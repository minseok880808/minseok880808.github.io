{"total":5,"pageSize":10,"pageCount":1,"data":[{"title":"kinesisDataAnalytics","slug":"kinesisDataAnalytics","date":"2020-05-02T04:36:44.000Z","updated":"2020-05-02T04:52:00.642Z","comments":true,"pin":null,"path":"api/articles/kinesisDataAnalytics.json","excerpt":"","keywords":null,"cover":"/img/01.SmartTok_System_01.png","content":"<h2 id=\"개발환경-구축\"><a href=\"#개발환경-구축\" class=\"headerlink\" title=\"개발환경 구축\"></a>개발환경 구축</h2><p>※ 기본 개발환경</p>\n<ul>\n<li>IntelliJ</li>\n<li>Java, Spring</li>\n<li>AWS Console</li>\n</ul>\n<h2 id=\"Kinesis-Data-Analytics-기초설명\"><a href=\"#Kinesis-Data-Analytics-기초설명\" class=\"headerlink\" title=\"Kinesis Data Analytics 기초설명\"></a>Kinesis Data Analytics 기초설명</h2><ol>\n<li>Kinesis Data Analytics을(를) 시작하려면 스트리밍 데이터를 지속적으로 읽고 처리하는 Kinesis 데이터 분석 애플리케이션을 생성합니다. 이 서비스는 Amazon Kinesis Data Streams 및 Amazon Kinesis Data Firehose 스트리밍 소스로부터의 데이터 수집을 지원합니다. 그런 다음 대화형 편집기를 사용하여 SQL 코드를 작성하고 라이브 스트리밍 데이터로 테스트합니다. Kinesis Data Analytics이(가) 결과를 전송하려는 대상을 구성할 수도 있습니다.</li>\n<li>Kinesis Data Analytics은(는) Amazon Kinesis Data Firehose(Amazon S3, Amazon Redshift, Amazon Elasticsearch Service 및 Splunk), AWS Lambda 및 Amazon Kinesis Data Streams을(를) 대상으로 지원합니다.</li>\n<li>Analytics의 경우 코딩이 전~~혀 없음.(굳이 있다면, 콘솔 내 SQL 문 작성해야 하는 정도?)</li>\n<li>코딩이 없는 만큼, Console화면에 대해 익숙해져야 함. </li>\n</ol>\n<h3 id=\"1-Create-application\"><a href=\"#1-Create-application\" class=\"headerlink\" title=\"1. Create application\"></a>1. Create application</h3><p><img src=\"https://user-images.githubusercontent.com/62123161/80855331-3f5ac200-8c7b-11ea-87f4-3176b8b70682.png\" alt=\"kinesisAnalytics_01\"></p>\n<ul>\n<li>[Create Application] 선택</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/62123161/80855330-3ec22b80-8c7b-11ea-988e-fca08da5ea36.png\" alt=\"kinesisAnalytics_02\"></p>\n<ul>\n<li>생성을 누르면 Analytics 생성이 완료되었습니다. 축하합니다. 끝…. 이면 좋겠지만, 이 뒤가 실제 분석단계고 겨우 겉의 껍데기 하나 만든것이다.</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/62123161/80855329-3e299500-8c7b-11ea-8c0e-423c69e40641.png\" alt=\"kinesisAnalytics_03\"></p>\n<ul>\n<li>Streaming 할 데이터, 실시간 분석(확인용), 보낼곳 설정 등 과정을 거친다.</li>\n<li>해당 과정을 거치면서 상당히 많은 오류를 맞닥트리게 될 것이다. 보통은 형변환에서 에러가 난다. (예-Varchar형인데 int형으로 분류됬을 경우.)</li>\n<li>실제 컬럼양이 많아서 귀찮더라도, 하나하나 전부 체크해 주어야 향후 Analytics를 원활하게 쓸 수 있다.</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/62123161/80855328-3d90fe80-8c7b-11ea-95fa-6377adcd65e9.png\" alt=\"kinesisAnalytics_04\"></p>\n<ul>\n<li>Source : 위에서 생성한 test-kinesis 선택</li>\n<li>Record pre-processing : 위의 firehose에서처럼 람다 함수를 이용하여 스트림 데이터 가공 가능</li>\n<li>Access permissions : IAM 롤 생성</li>\n<li>Discover schema 버튼을 클릭하여 스키마 확인 및 설정</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/62123161/80855327-3cf86800-8c7b-11ea-8063-351e853d8e13.PNG\" alt=\"kinesisAnalytics_05\"></p>\n<ul>\n<li>자동으로 설정된 스키마 확인 후 필요에 따라 Edit schema 버튼을 통하여 스키마 수정</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/62123161/80855326-3cf86800-8c7b-11ea-8901-cdbfe521e1db.PNG\" alt=\"kinesisAnalytics_06\"></p>\n<ul>\n<li>적절하게 스키마 변경 후 Save schema and update stream samples 버튼을 클릭하여 확인</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/62123161/80855325-3bc73b00-8c7b-11ea-9896-fe3958db0c75.PNG\" alt=\"kinesisAnalytics_07\"></p>\n<ul>\n<li>소스를 선택하면 Real time analytics 영역이 활성화됨. Go to SQL editor 클릭</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/62123161/80855324-3b2ea480-8c7b-11ea-84ba-bcbbea1d6efa.PNG\" alt=\"kinesisAnalytics_08\"></p>\n<ul>\n<li>스크림 SQL을 작성 후 Save and run SQL 버튼 클릭</li>\n<li>하단의 Real-time analytics 탭에서 결과 데이터 실시간 확인</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/62123161/80855323-3a960e00-8c7b-11ea-93f0-67c18f83d4d3.PNG\" alt=\"kinesisAnalytics_09\"></p>\n<ul>\n<li>Real time analytics를 선택하면 Destination 영역이 활성화됨</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/62123161/80855322-3a960e00-8c7b-11ea-9d44-becb19a625c9.PNG\" alt=\"kinesisAnalytics_10\"></p>\n<ul>\n<li>Kinesis Analytics 데이터를 전달할 Firehose 생성 (test-firehose-destination)</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/62123161/80855321-39fd7780-8c7b-11ea-8645-8ae033de86f2.PNG\" alt=\"kinesisAnalytics_11\"></p>\n<ul>\n<li>다시 Analytics로 돌아와서 Destination 버튼 클릭</li>\n<li>Destination 서비스는 Kinesis Firehose 선택 후 위에서 생성한 test-firehose-destination 선택</li>\n<li>In-application stream으로 위에서 생성한 DESTINATION_SQL_STREAM 선택 후 저장</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/62123161/80855320-3964e100-8c7b-11ea-8d38-df4f865408fa.PNG\" alt=\"kinesisAnalytics_12\"><br><img src=\"https://user-images.githubusercontent.com/62123161/80855318-38cc4a80-8c7b-11ea-9561-dae174bc37a3.PNG\" alt=\"kinesisAnalytics_13\"></p>\n<ul>\n<li>전체 설정 확인 후 목록에서 Running 상태 확인</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/62123161/80855316-3833b400-8c7b-11ea-8125-157f380587ca.PNG\" alt=\"kinesisAnalytics_14\"></p>\n<ul>\n<li>test-firehose에 연결한 Kinesis Streams 데이터 S3 저장 확인</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/62123161/80855314-37028700-8c7b-11ea-9b6f-1c2bb17198b0.PNG\" alt=\"kinesisAnalytics_15\"></p>\n<ul>\n<li>test-firehose-destination에 연결한 Kinesis Analytics 데이터 S3 저장 확인</li>\n</ul>\n","text":"개발환경 구축※ 기본 개발환경IntelliJJava, SpringAWS ConsoleKinesis Data Analytics 기초설명Kinesis Data Analytics을(를) 시작하려면 스트리밍 데이터를 지속적으로 읽고 처리하는 Kinesis 데","link":"","raw":null,"photos":[],"categories":[{"name":"tip","slug":"tip","count":4,"path":"api/categories/tip.json"}],"tags":[{"name":"AWS","slug":"AWS","count":3,"path":"api/tags/AWS.json"},{"name":"Kinesis","slug":"Kinesis","count":3,"path":"api/tags/Kinesis.json"},{"name":"Analytics","slug":"Analytics","count":1,"path":"api/tags/Analytics.json"}]},{"title":"kinesisDataFirehose","slug":"kinesisDataFirehose","date":"2020-05-01T01:21:23.000Z","updated":"2020-05-01T01:32:55.976Z","comments":true,"pin":null,"path":"api/articles/kinesisDataFirehose.json","excerpt":"","keywords":null,"cover":"/img/01.SmartTok_System_01.png","content":"<h2 id=\"개발환경-구축\"><a href=\"#개발환경-구축\" class=\"headerlink\" title=\"개발환경 구축\"></a>개발환경 구축</h2><p>※ 기본 개발환경</p>\n<ul>\n<li>IntelliJ</li>\n<li>Java, Spring</li>\n<li>AWS Console</li>\n</ul>\n<h2 id=\"Data-Firehose와-Data-Stream과-다른점\"><a href=\"#Data-Firehose와-Data-Stream과-다른점\" class=\"headerlink\" title=\"Data Firehose와 Data Stream과 다른점\"></a>Data Firehose와 Data Stream과 다른점</h2><ol>\n<li>Kinesis Stream은 기본 수준 서비스로, 각 파티션이 내부적으로 주문 된 여러 리더를 지원하는 파티션 된 데이터 스트림. 병합 / 분할 샤드를 관리하여 운영해야 함.</li>\n<li>커스터마이징이 가능하며 맞춤형 애플리케이션을 구축하거나 특수한 요구에 맞게 데이터를 스트리밍하는 개발자에게 가장 적합합니다. 그러나 수동 조정 및 프로비저닝이 필요합니다. 데이터는 일반적으로 24 시간 동안 스트림으로 제공되지만 추가 비용을 지불하면 최대 7 일 동안 데이터 가용성을 얻을 수 있습니다.</li>\n<li>Firehose는 매우 많은 Kinesis 사용 사례를 위해 구축 된 Kinesis 스트림 위에 구축 된 서비스로, 많은 데이터를 수집하고 이를 S3 / Redshift / ElasticSearch와 같은 스토리지 솔루션으로 파이핑 함. 파티션을 관리.</li>\n<li>스케일링은 초당 최대 기가 바이트까지 자동으로 처리되며 배치, 암호화 및 압축이 가능합니다.<br><img src=\"https://user-images.githubusercontent.com/62123161/80773866-2b896000-8b96-11ea-9292-4988675db895.png\" alt=\"kinesisfirehose_01\"></li>\n</ol>\n<h3 id=\"1-Firehose-생성\"><a href=\"#1-Firehose-생성\" class=\"headerlink\" title=\"1) Firehose 생성\"></a>1) Firehose 생성</h3><p><img src=\"https://user-images.githubusercontent.com/62123161/80773864-2b896000-8b96-11ea-863b-97cf308afdc9.png\" alt=\"kinesisfirehose_02\"><br>① Firehose Name 입력<br>② 자동으로 Put되는 방식인지, DataStream에서 받아서 전달하는 방식인지 선택.<br>    현재 우리 서비스에서는 Direct Put 해도 상관없음. Data를 특정 Stream에서 컨트롤해야한다면 Stream을 선택해주면 됨.<br>③ CMK를 활용하여 Stream의 평문데이터를 Firehose로 가져오면서 암호화 진행여부<br><img src=\"https://user-images.githubusercontent.com/62123161/80773863-2af0c980-8b96-11ea-9b59-4bcd47295594.png\" alt=\"kinesisfirehose_03\"><br>④ Lambda를 통해 저장할 데이터를 손볼건지 결정하는 부분.<br>⑤ AWS Glue를 통해 전처리 작업을 진행할지 선택하는 부분.</p>\n<p> *Glue 란?<br>AWS Glue는 완전 관리형 ETL(추출, 변환, 로드) 서비스로, 효율적인 비용으로 간단하게 여러 데이터 스토어 간에 원하는 데이터를 분류, 정리, 보강, 이동합니다. AWS Glue는 AWS Glue 데이터 카탈로그으로 알려진 중앙 메타데이터 리포지토리, 자동적으로 Python 및 Scala 코드를 생성하는 ETL 엔진 및 종속적 해결 방안, 작업 모니터링 및 재시도를 관리하는 유연성 스케줄러로 구성됩니다. AWS Glue는 서버리스이므로 설정하거나 관리할 인프라가 없습니다.<br><img src=\"https://user-images.githubusercontent.com/62123161/80773862-2a583300-8b96-11ea-8f42-d5299b504504.png\" alt=\"kinesisfirehose_04\"><br>⑥ S3 / Redshift / Elasticsearch Service / Splunk 등 AWS의 목적지로 보낼 곳 선택<br>     (우리 서비스에서는 우선 S3를 사용함. 추후 ES, Splunk 등 검토)<br>⑦ prefix / error prefix (저장되는 파일의 S3 디렉토리 지정)<br>     kd/year-!{timestamp:YYYY}/month-!{timestamp:MM}/day-!{timestamp:dd}/<br>     kderror/!{firehose:random-string}/!{firehose:error-output-type}/!{timestamp:yyyy/MM/dd}/<br><img src=\"https://user-images.githubusercontent.com/62123161/80773857-288e6f80-8b96-11ea-87e2-9efc8190f38c.png\" alt=\"kinesisfirehose_05\"><br>⑧ Buffer사이즈와 주기를 정해주어야 함.<br>    SmartTok 기준 40000대 15분동안 45MB가 쌓이고 있음. 용량이 부족하면 꽉 찬 데이터까지만 보내므로 조절이 필요함.(매우중요)<br>⑨ Compression(압축방식지정.. 비용문제만 아니면 안해도됨)<br>⑩ S3 Encryption<br>    KMS를 통한 암호화. 3번의 CMK를 통한 암호화를 지정해도되고 저장할때 KMS를 통해 지정해도 됨. 암호화는 나중에 반영.<br>⑪ Logging<br>    로깅은 항상 Enable함.<br>    본인이 코딩의 신이거나 AWS의 지배자가 아니라면 로깅 및 디버깅은 생활화 하자.<br>⑫ Permission(권한)<br>    권한은 기본권한으로..(AWS 사상 중 가장 중요시되는 최소권한의 원칙)</p>\n<h3 id=\"2-Data-직접-넣기\"><a href=\"#2-Data-직접-넣기\" class=\"headerlink\" title=\"2) Data 직접 넣기?\"></a>2) Data 직접 넣기?</h3><ul>\n<li><p>코딩이 없어서 아쉬우셨다면, 잠시 코딩을 갖는 시간을 갖겠음.</p>\n</li>\n<li><p>솔직히 Firehose는 AWS 완전관리형이기에 크게 손볼게 없다.</p>\n</li>\n<li><p>단순히 데이터 넣는 API정도뿐이라 간단히 소개함.</p>\n<figure class=\"highlight\"><figcaption><span>AWS Credential</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BasicAWSCredentials awsCreds = new BasicAWSCredentials(\"ACCESS_KEY\",</span><br><span class=\"line\">            \"SECRET_KEY\");</span><br><span class=\"line\">    AmazonKinesisFirehoseClientBuilder clientBuilder = AmazonKinesisFirehoseClientBuilder.standard();</span><br><span class=\"line\">    clientBuilder.setRegion(\"ap-northeast-2\"); // 서울 region</span><br><span class=\"line\">    clientBuilder.setCredentials(new AWSStaticCredentialsProvider(awsCreds));</span><br><span class=\"line\">    AmazonKinesisFirehose kinesisClient = clientBuilder.build();</span><br></pre></td></tr></table></figure>\n\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><figcaption><span>write</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;단일 쓰기 작업</span><br><span class=\"line\">static void sendData(AmazonKinesisFirehose kinesisClient, int count) &#123;</span><br><span class=\"line\">    String myData &#x3D; &quot;&#123;\\&quot;no\\&quot;:&quot; + count + &quot;&#125;\\n&quot;; &#x2F;&#x2F; 보내려는 데이터</span><br><span class=\"line\">    PutRecordRequest putRecordsRequest &#x3D; new PutRecordRequest();</span><br><span class=\"line\">    putRecordsRequest.setDeliveryStreamName(STREAM_NAME);</span><br><span class=\"line\">    Record rc &#x3D; new Record();</span><br><span class=\"line\">    rc.setData(ByteBuffer.wrap(myData.getBytes()));</span><br><span class=\"line\">    putRecordsRequest.setRecord(rc);</span><br><span class=\"line\">    PutRecordResult putRecordsResult &#x3D; kinesisClient.putRecord(putRecordsRequest);</span><br><span class=\"line\">    System.out.println(&quot;Put Result&quot; + putRecordsResult);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><figcaption><span>write</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;</span><br><span class=\"line\"> &#x2F;&#x2F; 10번 반복해서 전송(일괄전송)</span><br><span class=\"line\">        HashSet&lt;Record&gt; recordList &#x3D; new HashSet&lt;Record&gt;();</span><br><span class=\"line\">        for (int i &#x3D; 0; i &lt; 10 ; i++) &#123;</span><br><span class=\"line\">            recordList.add(createData());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        multiSendData(kinesisClient, recordList);</span><br><span class=\"line\">&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;</span><br><span class=\"line\"> </span><br><span class=\"line\">    &#x2F;&#x2F;일괄 쓰기 작업</span><br><span class=\"line\">    static void multiSendData(AmazonKinesisFirehose kinesisClient, HashSet&lt;Record&gt; recordList)&#123;</span><br><span class=\"line\">        PutRecordBatchRequest putRecordBatchRequest &#x3D; new PutRecordBatchRequest();</span><br><span class=\"line\">        putRecordBatchRequest.setDeliveryStreamName(STREAM_NAME);</span><br><span class=\"line\">        putRecordBatchRequest.setRecords(recordList);</span><br><span class=\"line\"> </span><br><span class=\"line\">        &#x2F;&#x2F; Put Record Batch records. Max No.Of Records we can put in a</span><br><span class=\"line\">        &#x2F;&#x2F; single put record batch request is 500</span><br><span class=\"line\">        PutRecordBatchResult putRecordBatchResult &#x3D; kinesisClient.putRecordBatch(putRecordBatchRequest);</span><br><span class=\"line\"> </span><br><span class=\"line\">        recordList.clear();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public static Record createData() &#123;</span><br><span class=\"line\">        String data &#x3D; ThreadLocalRandom.current().nextInt() + &quot;\\n&quot;;</span><br><span class=\"line\">        return new Record().withData(ByteBuffer.wrap(data.getBytes()));</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"3-현재-사용처\"><a href=\"#3-현재-사용처\" class=\"headerlink\" title=\"3) 현재 사용처\"></a>3) 현재 사용처</h3><ul>\n<li>AWS IoT Core 내의 Rule Engine에 현재 사용중임. DynamoDB를 대체해서 사용하고자 하며, 추후 Analytics를 통하거나 해서 MySQL에 저장할 예정.</li>\n</ul>\n</li>\n<li><p>저장기간이 최대 7일이 한계이므로, 주기적으로 Batch작업 돌려주어야 할 것으로 보임.</p>\n<h3 id=\"결론\"><a href=\"#결론\" class=\"headerlink\" title=\"결론\"></a>결론</h3></li>\n<li><p>솔직히 Data Stream의 활용범위는 상당히 넓다. 기본적인 SQS기능뿐만 아니라 AWS 다른 솔루션 플랫폼에 적용할 수 있을정도로 활용범위가 넓은 점은 장점이지만, 모든 설정을 해줘야 한다는 단점이 있다.</p>\n</li>\n<li><p>Firehose는 몇개 안되는 설정으로 자동으로 원하는 기능을 제공해주니 단순비교는 어렵지만 개인적으로 쓰기 편한감이 있음.</p>\n</li>\n<li><p>(코딩이 필요없다…….. 위 대제목 2번에 쓴 코드를 쓸 일 자체가 없을 것으로 보임.)</p>\n</li>\n</ul>\n","text":"개발환경 구축※ 기본 개발환경IntelliJJava, SpringAWS ConsoleData Firehose와 Data Stream과 다른점Kinesis Stream은 기본 수준 서비스로, 각 파티션이 내부적으로 주문 된 여러 리더를 지원하는 파티션 ","link":"","raw":null,"photos":[],"categories":[{"name":"tip","slug":"tip","count":4,"path":"api/categories/tip.json"}],"tags":[{"name":"AWS","slug":"AWS","count":3,"path":"api/tags/AWS.json"},{"name":"Kinesis","slug":"Kinesis","count":3,"path":"api/tags/Kinesis.json"},{"name":"firehose","slug":"firehose","count":1,"path":"api/tags/firehose.json"}]},{"title":"Kinesis Data Stream","slug":"kinesisDataStream","date":"2020-04-30T09:00:58.000Z","updated":"2020-04-30T11:22:26.686Z","comments":true,"pin":null,"path":"api/articles/kinesisDataStream.json","excerpt":"","keywords":null,"cover":"/img/01.SmartTok_System_01.png","content":"<h2 id=\"개발환경-구축\"><a href=\"#개발환경-구축\" class=\"headerlink\" title=\"개발환경 구축\"></a>개발환경 구축</h2><p>※ 기본 개발환경</p>\n<ul>\n<li>IntelliJ</li>\n<li>Java, Spring</li>\n<li>AWS Console</li>\n</ul>\n<p>※ 참고자료 : <a href=\"https://docs.aws.amazon.com/ko_kr/kinesis/index.html\" target=\"_blank\" rel=\"noopener\">https://docs.aws.amazon.com/ko_kr/kinesis/index.html</a></p>\n<h2 id=\"Kinesis-기초설명\"><a href=\"#Kinesis-기초설명\" class=\"headerlink\" title=\"Kinesis 기초설명\"></a>Kinesis 기초설명</h2><ol>\n<li>Kinesis는 SQS를 기반으로 한 큐 시스템이다.</li>\n<li>종류로는 Video Streams, Data Streams, Data Firehose, Data Analytics 총 4가지가 있다.</li>\n<li>경동에서는 이 4가지 시스템 모두 사용하겠지만, Video Streams의 경우에는 홈오토, 홈넷쪽에서 사용할 것으로 추정되므로 현 블로그에서는 나머지 기능만을 설명하기로 한다.</li>\n</ol>\n<h2 id=\"Data-Stream\"><a href=\"#Data-Stream\" class=\"headerlink\" title=\"Data Stream\"></a>Data Stream</h2><ol>\n<li>Shard라는 개념을 사용하고 있으며, 큐 내의 메모리 개념으로 받아들이면 된다.</li>\n<li>ap-northeast-2(서울) 리전의 경우 기본적으로 200개의 샤드만 지원이 된다.</li>\n</ol>\n<p><img src=\"https://user-images.githubusercontent.com/62123161/80692614-c5a4c600-8b0c-11ea-98ba-1efbe0264585.png\" alt=\"kinesis_01\"></p>\n<ol start=\"3\">\n<li>한개의 Shard당 1초에 1MB씩 처리가 가능하며, 1000개의 Record를 처리한다. 읽는데는 초당 2MB한도로 읽을 수 있다. 만약, 처리할 데이터의 용량이 크다면, 그만큼의 샤드를 추가하면 된다. 이번 연습에서는 기본샤드인 1만 추가하기로 한다.</li>\n<li>편의를 위해 언어는 Java로 통일한다.</li>\n</ol>\n<h3 id=\"1-Data-Stream-만들기\"><a href=\"#1-Data-Stream-만들기\" class=\"headerlink\" title=\"1) Data Stream 만들기\"></a>1) Data Stream 만들기</h3><ol>\n<li>사용하고자 하는 Stream의 이름과 샤드의 수만 입력하면 자동으로 생성이 된다.(feat. 별거없음)</li>\n</ol>\n<h3 id=\"2-Data-Stream-Page\"><a href=\"#2-Data-Stream-Page\" class=\"headerlink\" title=\"2) Data Stream Page\"></a>2) Data Stream Page</h3><ol>\n<li>데이터 Stream이 생성이 되었다고 하면 아래와 같이 Detail 페이지를 볼 수 있다.</li>\n</ol>\n<p><img src=\"https://user-images.githubusercontent.com/62123161/80692615-c6d5f300-8b0c-11ea-8dab-ab4473eea2a2.png\" alt=\"kinesis_02\"></p>\n<ol start=\"2\">\n<li><p>Data Stream은 Firehose와 Analytics에 사용될 수 있으며, 데이터는 모두 Json으로 하는게 좋다. 물론, CVS파일도 지원을 하기는 한다.(사용할 때 어려울뿐…)</p>\n</li>\n<li><p>데이터 저장방식에서 암호화를 추가할 수 있다. KMS를 설정해서 사용하는데, 현 연습에서는 사용하지 않도록 한다.</p>\n</li>\n<li><p>Data Stream의 보관 기간은 1일~7일까지 선택할 수 있다. 24시간에서 더 늘리게 되면 추가요금이 발생하므로 주의하자.</p>\n</li>\n</ol>\n<h3 id=\"3-Data-Stream을-Java로-개발\"><a href=\"#3-Data-Stream을-Java로-개발\" class=\"headerlink\" title=\"3) Data Stream을 Java로 개발\"></a>3) Data Stream을 Java로 개발</h3><ol>\n<li><p>Gradle(최소 수준의 Dependence 이므로 개발하면서 필요하면 추가해준다.)</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// https://mvnrepository.com/artifact/com.amazonaws/aws-java-sdk-sqs</span><br><span class=\"line\">compile group: <span class=\"string\">'com.amazonaws'</span>, name: <span class=\"string\">'aws-java-sdk-sqs'</span>, version: <span class=\"string\">'1.11.705'</span></span><br><span class=\"line\">// https://mvnrepository.com/artifact/com.amazonaws/aws-java-sdk-core</span><br><span class=\"line\">compile group: <span class=\"string\">'com.amazonaws'</span>, name: <span class=\"string\">'aws-java-sdk-core'</span>, version: <span class=\"string\">'1.9.17'</span></span><br><span class=\"line\">// https://mvnrepository.com/artifact/com.amazonaws/amazon-kinesis-client</span><br><span class=\"line\">compile group: <span class=\"string\">'com.amazonaws'</span>, name: <span class=\"string\">'amazon-kinesis-client'</span>, version: <span class=\"string\">'1.13.2'</span></span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p>스트림에 Data PUT(Multi)</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private static List&lt;PutRecordsRequestEntry&gt; <span class=\"function\"><span class=\"title\">putItemStream</span></span>()&#123;</span><br><span class=\"line\">        BasicAWSCredentials awsCreds = new BasicAWSCredentials(<span class=\"string\">\"ACCESSKEY\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"SECRETKEY\"</span>);</span><br><span class=\"line\">        AmazonKinesisClientBuilder clientBuilder = AmazonKinesisClientBuilder.standard();</span><br><span class=\"line\">        clientBuilder.setRegion(<span class=\"string\">\"ap-northeast-2\"</span>); // 서울 region</span><br><span class=\"line\">        clientBuilder.setCredentials(new AWSStaticCredentialsProvider(awsCreds));</span><br><span class=\"line\">        AmazonKinesis kinesisClient = clientBuilder.build();</span><br><span class=\"line\"> </span><br><span class=\"line\">        //PutRecords</span><br><span class=\"line\">        PutRecordsRequest putRecordsRequest  = new PutRecordsRequest();</span><br><span class=\"line\">        putRecordsRequest.setStreamName(STREAM_NAME);</span><br><span class=\"line\">        List &lt;PutRecordsRequestEntry&gt; putRecordsRequestEntryList  = new ArrayList&lt;&gt;();</span><br><span class=\"line\">        try&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (int i = 0; i &lt; 10; i++) &#123;</span><br><span class=\"line\">                PutRecordsRequestEntry putRecordsRequestEntry  = new PutRecordsRequestEntry();</span><br><span class=\"line\">                String myData = <span class=\"string\">\"&#123;\\\"testAWS\\\":\"</span> + i + <span class=\"string\">\"&#125;\\n\"</span>; // 보내려는 데이터</span><br><span class=\"line\">                putRecordsRequestEntry.setData(ByteBuffer.wrap(myData.getBytes()));</span><br><span class=\"line\">//            putRecordsRequestEntry.setData(ByteBuffer.wrap(String.valueOf(i).getBytes()));</span><br><span class=\"line\">                putRecordsRequestEntry.setPartitionKey(String.format(<span class=\"string\">\"partitionKey-%d\"</span>, i));</span><br><span class=\"line\">                putRecordsRequestEntryList.add(putRecordsRequestEntry);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">            putRecordsRequest.setRecords(putRecordsRequestEntryList);</span><br><span class=\"line\">            PutRecordsResult putRecordsResult  = kinesisClient.putRecords(putRecordsRequest);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        catch (Exception e)&#123;</span><br><span class=\"line\">            System.out.println(e.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"built_in\">return</span> putRecordsRequestEntryList;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p>스트림에 Data PUT(Single)</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static void sendData(AmazonKinesis kinesisClient, int count) &#123;</span><br><span class=\"line\">        HashMap&lt;Integer,String&gt; list &#x3D; new HashMap&lt;Integer,String&gt;();</span><br><span class=\"line\"> </span><br><span class=\"line\">        list.put(0,&quot;&#123;\\&quot;NAME\\&quot;:\\&quot;dhaval0\\&quot;,\\&quot;TOTAL\\&quot;:100&#125;&quot;);</span><br><span class=\"line\">        list.put(1,&quot;&#123;\\&quot;NAME\\&quot;:\\&quot;dhaval1\\&quot;,\\&quot;TOTAL\\&quot;:200&#125;&quot;);</span><br><span class=\"line\">        list.put(2,&quot;&#123;\\&quot;NAME\\&quot;:\\&quot;dhaval2\\&quot;,\\&quot;TOTAL\\&quot;:300&#125;&quot;);</span><br><span class=\"line\"> </span><br><span class=\"line\">        PutRecordsRequest putRecordsRequest  &#x3D; new PutRecordsRequest();</span><br><span class=\"line\">        putRecordsRequest.setStreamName(STREAM_NAME);</span><br><span class=\"line\">        List&lt;PutRecordsRequestEntry&gt; putRecordsRequestEntryList  &#x3D; new ArrayList&lt;&gt;();</span><br><span class=\"line\">        for (int i &#x3D; 0; i &lt; count; i++) &#123;</span><br><span class=\"line\">            String myData &#x3D; list.get(i); &#x2F;&#x2F; 보내려는 데이터</span><br><span class=\"line\">            PutRecordsRequestEntry putRecordsRequestEntry  &#x3D; new PutRecordsRequestEntry();</span><br><span class=\"line\">            putRecordsRequestEntry.setData(ByteBuffer.wrap(myData.getBytes()));</span><br><span class=\"line\">            putRecordsRequestEntry.setPartitionKey(&quot;MainStream&quot;);</span><br><span class=\"line\">&#x2F;&#x2F;            putRecordsRequestEntry.setPartitionKey(String.format(&quot;partitionKey-%d&quot;, i));</span><br><span class=\"line\">            putRecordsRequestEntryList.add(putRecordsRequestEntry);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        putRecordsRequest.setRecords(putRecordsRequestEntryList);</span><br><span class=\"line\">        PutRecordsResult putRecordsResult  &#x3D; kinesisClient.putRecords(putRecordsRequest);</span><br><span class=\"line\">        System.out.println(&quot;Put Result&quot; + putRecordsResult);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></div></li>\n<li><p>샤드 내 총 데이터 갯수조회</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static int getDataCount(String shardId, String streamName) &#123;</span><br><span class=\"line\">        int dataCount &#x3D; 0;</span><br><span class=\"line\"> </span><br><span class=\"line\">        BasicAWSCredentials awsCreds &#x3D; new BasicAWSCredentials(&quot;AKIAUEPDKBXF3QNKDUXM&quot;,</span><br><span class=\"line\">                &quot;JJnd0b81vuTxpyrPNGEWV1QQJYhSwalS5UjCSno3&quot;);</span><br><span class=\"line\">        AmazonKinesisClientBuilder clientBuilder &#x3D; AmazonKinesisClientBuilder.standard();</span><br><span class=\"line\">        clientBuilder.setRegion(&quot;ap-northeast-2&quot;); &#x2F;&#x2F; 서울 region</span><br><span class=\"line\">        clientBuilder.setCredentials(new AWSStaticCredentialsProvider(awsCreds));</span><br><span class=\"line\">        AmazonKinesis kinesisClient &#x3D; clientBuilder.build();</span><br><span class=\"line\"> </span><br><span class=\"line\">        String shardIterator;</span><br><span class=\"line\">        GetShardIteratorRequest getShardIteratorRequest &#x3D; new GetShardIteratorRequest();</span><br><span class=\"line\">        getShardIteratorRequest.setStreamName(streamName);</span><br><span class=\"line\">        getShardIteratorRequest.setShardId(shardId);</span><br><span class=\"line\">        getShardIteratorRequest.setShardIteratorType(ShardIteratorType.TRIM_HORIZON);</span><br><span class=\"line\"> </span><br><span class=\"line\">        GetShardIteratorResult getShardIteratorResult &#x3D; kinesisClient.getShardIterator(getShardIteratorRequest);</span><br><span class=\"line\">        shardIterator &#x3D; getShardIteratorResult.getShardIterator();</span><br><span class=\"line\">        GetRecordsRequest getRecordsRequest &#x3D; new GetRecordsRequest();</span><br><span class=\"line\">        getRecordsRequest.setShardIterator(shardIterator);</span><br><span class=\"line\">        getRecordsRequest.setLimit(1000);</span><br><span class=\"line\"> </span><br><span class=\"line\">        GetRecordsResult getRecordsResult &#x3D; kinesisClient.getRecords(getRecordsRequest);</span><br><span class=\"line\">        List&lt;Record&gt; records &#x3D; getRecordsResult.getRecords();</span><br><span class=\"line\">        if(!records.isEmpty() &amp;&amp; records.size() &gt; 0)&#123;</span><br><span class=\"line\">            dataCount &#x3D; records.size();</span><br><span class=\"line\">            Iterator&lt;Record&gt; iterator &#x3D; records.iterator();</span><br><span class=\"line\">            while(iterator.hasNext()) &#123;</span><br><span class=\"line\">                Record record &#x3D; iterator.next();</span><br><span class=\"line\">                byte[] bytes &#x3D; record.getData().array();</span><br><span class=\"line\">                String recordData &#x3D; new String(bytes);</span><br><span class=\"line\">                System.out.println(&quot;Shard Id. :&quot;+shardId+&quot;Seq. No. is : &quot;+&quot;  Record data :&quot;+recordData);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">        return dataCount;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></div></li>\n<li><p>샤드 내 데이터 조회</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private static HashSet&lt;Record&gt; getItemStream()&#123;</span><br><span class=\"line\">        BasicAWSCredentials awsCreds &#x3D; new BasicAWSCredentials(&quot;ACCESSKEY&quot;,</span><br><span class=\"line\">                &quot;SECRETKEY&quot;);</span><br><span class=\"line\">        AmazonKinesisClientBuilder clientBuilder &#x3D; AmazonKinesisClientBuilder.standard();</span><br><span class=\"line\">        clientBuilder.setRegion(&quot;ap-northeast-2&quot;); &#x2F;&#x2F; 서울 region</span><br><span class=\"line\">        clientBuilder.setCredentials(new AWSStaticCredentialsProvider(awsCreds));</span><br><span class=\"line\">        AmazonKinesis kinesisClient &#x3D; clientBuilder.build();</span><br><span class=\"line\"> </span><br><span class=\"line\">        List&lt;Shard&gt; shardList &#x3D; getShardList();</span><br><span class=\"line\"> </span><br><span class=\"line\">        &#x2F;&#x2F;GetRecords</span><br><span class=\"line\">        String shardIterator;</span><br><span class=\"line\">        GetShardIteratorRequest getShardIteratorRequest &#x3D; new GetShardIteratorRequest();</span><br><span class=\"line\">        getShardIteratorRequest.setStreamName(STREAM_NAME);</span><br><span class=\"line\">        getShardIteratorRequest.setShardId(shardList.get(0).getShardId());</span><br><span class=\"line\">        getShardIteratorRequest.setShardIteratorType(&quot;TRIM_HORIZON&quot;);</span><br><span class=\"line\"> </span><br><span class=\"line\">        GetShardIteratorResult getShardIteratorResult &#x3D; kinesisClient.getShardIterator(getShardIteratorRequest);</span><br><span class=\"line\">        shardIterator &#x3D; getShardIteratorResult.getShardIterator();</span><br><span class=\"line\"> </span><br><span class=\"line\">        HashSet&lt;Record&gt; records &#x3D; new HashSet&lt;Record&gt;();</span><br><span class=\"line\">        HashMap&lt;String, String&gt; view &#x3D; new HashMap&lt;String, String&gt;();</span><br><span class=\"line\"> </span><br><span class=\"line\">        while (true) &#123;</span><br><span class=\"line\">            GetRecordsRequest getRecordsRequest &#x3D; new GetRecordsRequest();</span><br><span class=\"line\">            getRecordsRequest.setShardIterator(shardIterator);</span><br><span class=\"line\">            getRecordsRequest.setLimit(25);</span><br><span class=\"line\"> </span><br><span class=\"line\">            GetRecordsResult result &#x3D; kinesisClient.getRecords(getRecordsRequest);</span><br><span class=\"line\">            if(result.getRecords().size() &#x3D;&#x3D; 0)&#123;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            &#x2F;&#x2F;for(Record record : result.getRecords())&#123;</span><br><span class=\"line\">            for(int i &#x3D; 0;i&lt;result.getRecords().size();i++)&#123;</span><br><span class=\"line\">                Record record &#x3D; result.getRecords().get(i);</span><br><span class=\"line\">                records.add(record);</span><br><span class=\"line\"> </span><br><span class=\"line\">                view.put(record.getSequenceNumber(), new String(record.getData().array()));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                Thread.sleep(1000);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            catch (InterruptedException exception) &#123;</span><br><span class=\"line\">                throw new RuntimeException(exception);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">            shardIterator &#x3D; result.getNextShardIterator();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return records;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></div></li>\n<li><p>(번외) Stream 내 Shard 리스트 출력</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private static List&lt;Shard&gt; getShardList()&#123;</span><br><span class=\"line\">        BasicAWSCredentials awsCreds &#x3D; new BasicAWSCredentials(&quot;ACCESSKEY&quot;,</span><br><span class=\"line\">                &quot;SECRETKEY&quot;);</span><br><span class=\"line\">        AmazonKinesisClientBuilder clientBuilder &#x3D; AmazonKinesisClientBuilder.standard();</span><br><span class=\"line\">        clientBuilder.setRegion(&quot;ap-northeast-2&quot;); &#x2F;&#x2F; 서울 region</span><br><span class=\"line\">        clientBuilder.setCredentials(new AWSStaticCredentialsProvider(awsCreds));</span><br><span class=\"line\">        AmazonKinesis kinesisClient &#x3D; clientBuilder.build();</span><br><span class=\"line\"> </span><br><span class=\"line\">        DescribeStreamRequest describeStreamRequest &#x3D; new DescribeStreamRequest();</span><br><span class=\"line\">        describeStreamRequest.setStreamName( STREAM_NAME );</span><br><span class=\"line\">        List&lt;Shard&gt; shards &#x3D; new ArrayList&lt;&gt;();</span><br><span class=\"line\">        String exclusiveStartShardId &#x3D; null;</span><br><span class=\"line\">        do &#123;</span><br><span class=\"line\">            describeStreamRequest.setExclusiveStartShardId( exclusiveStartShardId );</span><br><span class=\"line\">            DescribeStreamResult describeStreamResult &#x3D; kinesisClient.describeStream( describeStreamRequest );</span><br><span class=\"line\">            shards.addAll( describeStreamResult.getStreamDescription().getShards() );</span><br><span class=\"line\">            if (describeStreamResult.getStreamDescription().getHasMoreShards() &amp;&amp; shards.size() &gt; 0) &#123;</span><br><span class=\"line\">                exclusiveStartShardId &#x3D; shards.get(shards.size() - 1).getShardId();</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                exclusiveStartShardId &#x3D; null;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; while ( exclusiveStartShardId !&#x3D; null );</span><br><span class=\"line\">        return shards;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></div></li>\n<li><p>(번외) 계정 내 Stream 리스트 조회(전체)</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private static List&lt;String&gt; getStreamList()&#123;</span><br><span class=\"line\">        BasicAWSCredentials awsCreds &#x3D; new BasicAWSCredentials(&quot;ACCESSKEY&quot;,</span><br><span class=\"line\">                &quot;SECRETKEY&quot;);</span><br><span class=\"line\">        AmazonKinesisClientBuilder clientBuilder &#x3D; AmazonKinesisClientBuilder.standard();</span><br><span class=\"line\">        clientBuilder.setRegion(&quot;ap-northeast-2&quot;); &#x2F;&#x2F; 서울 region</span><br><span class=\"line\">        clientBuilder.setCredentials(new AWSStaticCredentialsProvider(awsCreds));</span><br><span class=\"line\">        AmazonKinesis kinesisClient &#x3D; clientBuilder.build();</span><br><span class=\"line\"> </span><br><span class=\"line\">        ListStreamsRequest listStreamsRequest &#x3D; new ListStreamsRequest();</span><br><span class=\"line\">        listStreamsRequest.setLimit(20);</span><br><span class=\"line\">        ListStreamsResult listStreamsResult &#x3D; kinesisClient.listStreams(listStreamsRequest);</span><br><span class=\"line\">        List&lt;String&gt; streamNames &#x3D; listStreamsResult.getStreamNames();</span><br><span class=\"line\"> </span><br><span class=\"line\">        while (listStreamsResult.getHasMoreStreams())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            if (streamNames.size() &gt; 0) &#123;</span><br><span class=\"line\">                listStreamsRequest.setExclusiveStartStreamName(streamNames.get(streamNames.size() - 1));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            listStreamsResult &#x3D; kinesisClient.listStreams(listStreamsRequest);</span><br><span class=\"line\">            streamNames.addAll(listStreamsResult.getStreamNames());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        return streamNames;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></div></li>\n<li><p>(번외) Stream 삭제</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private static Boolean deleteStream(String streamName)&#123;</span><br><span class=\"line\">        BasicAWSCredentials awsCreds &#x3D; new BasicAWSCredentials(&quot;ACCESSKEY&quot;,</span><br><span class=\"line\">                &quot;SECRETKEY&quot;);</span><br><span class=\"line\">        AmazonKinesisClientBuilder clientBuilder &#x3D; AmazonKinesisClientBuilder.standard();</span><br><span class=\"line\">        clientBuilder.setRegion(&quot;ap-northeast-2&quot;); &#x2F;&#x2F; 서울 region</span><br><span class=\"line\">        clientBuilder.setCredentials(new AWSStaticCredentialsProvider(awsCreds));</span><br><span class=\"line\">        AmazonKinesis kinesisClient &#x3D; clientBuilder.build();</span><br><span class=\"line\"> </span><br><span class=\"line\">        Boolean result &#x3D; false;</span><br><span class=\"line\">        try&#123;</span><br><span class=\"line\">            DeleteStreamRequest deleteStreamRequest &#x3D; new DeleteStreamRequest();</span><br><span class=\"line\">            deleteStreamRequest.setStreamName(streamName);</span><br><span class=\"line\">            kinesisClient.deleteStream(deleteStreamRequest);</span><br><span class=\"line\"> </span><br><span class=\"line\">            result &#x3D; true;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        catch (Exception e)&#123;</span><br><span class=\"line\">            System.out.println(e.getMessage());</span><br><span class=\"line\">            result &#x3D; false;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return result;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></div>\n\n</li>\n</ol>\n<h2 id=\"결론\"><a href=\"#결론\" class=\"headerlink\" title=\"결론\"></a>결론</h2><ul>\n<li>Kinesis는 기존의 SQS와 동일하게 사용해도 좋을 것 같다. 단지 SQS와 다른점은 가격이 싸고 속도가 빠르다는 점.<br>   싸고 빠르다는점 이외에도 Firehose, Analytics 등과 함께 사용하므로 더욱더 편리하게 AWS 생태계에 접근할 수 있다는 메리트가 있다.</li>\n<li>위 실습내용을 모두 돌려보고 나면, 크게 할 것이 없다는 점을 느낄 수 있을 것이다.</li>\n</ul>\n","text":"개발환경 구축※ 기본 개발환경IntelliJJava, SpringAWS Console※ 참고자료 : https://docs.aws.amazon.com/ko_kr/kinesis/index.htmlKinesis 기초설명Kinesis는 SQS를 기반으로 한","link":"","raw":null,"photos":[],"categories":[{"name":"tip","slug":"tip","count":4,"path":"api/categories/tip.json"}],"tags":[{"name":"AWS","slug":"AWS","count":3,"path":"api/tags/AWS.json"},{"name":"Kinesis","slug":"Kinesis","count":3,"path":"api/tags/Kinesis.json"},{"name":"Cloud","slug":"Cloud","count":1,"path":"api/tags/Cloud.json"}]},{"title":"Git Hub 설정","slug":"github-useage","date":"2020-04-29T06:39:58.000Z","updated":"2020-04-29T11:30:47.673Z","comments":true,"pin":null,"path":"api/articles/github-useage.json","excerpt":"","keywords":null,"cover":null,"content":"<h1 id=\"—-GitHub-Pages-만들기-—\"><a href=\"#—-GitHub-Pages-만들기-—\" class=\"headerlink\" title=\"— GitHub Pages 만들기 —\"></a>— GitHub Pages 만들기 —</h1><p>참고 : <a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"noopener\">https://pages.github.com/</a></p>\n<h3 id=\"1-Github-Repository-생성\"><a href=\"#1-Github-Repository-생성\" class=\"headerlink\" title=\"1) Github Repository 생성\"></a>1) Github Repository 생성</h3><ol>\n<li>New repository 버튼 클릭</li>\n<li>Repository name 입력 : arcjjang.github.io</li>\n<li>Public 선택</li>\n<li>Create repository 버튼 클릭</li>\n</ol>\n<h3 id=\"2-터미널에서-Clone-the-repository\"><a href=\"#2-터미널에서-Clone-the-repository\" class=\"headerlink\" title=\"2) 터미널에서 Clone the repository\"></a>2) 터미널에서 Clone the repository</h3><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/arcjjang/arcjjang.github.io.git</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"3-Hello-World\"><a href=\"#3-Hello-World\" class=\"headerlink\" title=\"3) Hello World\"></a>3) Hello World</h3><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> arcjjang.github.io</span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">\"Hello World\"</span> &gt; index.html</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"4-Push-it\"><a href=\"#4-Push-it\" class=\"headerlink\" title=\"4) Push it\"></a>4) Push it</h3><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add --all</span><br><span class=\"line\">$ git commit -m <span class=\"string\">\"Initial commit\"</span></span><br><span class=\"line\">$ git push -u origin master</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"5-go-to-https-arcjjang-github-io\"><a href=\"#5-go-to-https-arcjjang-github-io\" class=\"headerlink\" title=\"5) go to https://arcjjang.github.io\"></a>5) go to <em><a href=\"https://arcjjang.github.io\" target=\"_blank\" rel=\"noopener\">https://arcjjang.github.io</a></em></h3><h1 id=\"—-Hexo-적용하기-—\"><a href=\"#—-Hexo-적용하기-—\" class=\"headerlink\" title=\"— Hexo 적용하기 —\"></a>— Hexo 적용하기 —</h1><p>참고 : <a href=\"https://hexo.io/ko/index.html\" target=\"_blank\" rel=\"noopener\">https://hexo.io/ko/index.html</a></p>\n<h3 id=\"1-Hexo-설치-및-생성\"><a href=\"#1-Hexo-설치-및-생성\" class=\"headerlink\" title=\"1) Hexo 설치 및 생성\"></a>1) Hexo 설치 및 생성</h3><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-cli -g</span><br><span class=\"line\">$ hexo init blog</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> blog</span><br><span class=\"line\">$ npm install</span><br><span class=\"line\">$ npm install hexo-deployer-git --save &lt;-- Git으로 배포하는 경우 설치</span><br><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"2-Hexo-환경파일-수정\"><a href=\"#2-Hexo-환경파일-수정\" class=\"headerlink\" title=\"2) Hexo 환경파일 수정\"></a>2) Hexo 환경파일 수정</h3><p>/_config.yml</p>\n<h4 id=\"2-1-Site-설정\"><a href=\"#2-1-Site-설정\" class=\"headerlink\" title=\"2-1) Site 설정\"></a>2-1) Site 설정</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"YML\"><figure class=\"iseeu highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Site</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">Coder`s</span> <span class=\"string\">Frontline</span></span><br><span class=\"line\"><span class=\"attr\">subtitle:</span> <span class=\"string\">For</span> <span class=\"string\">my</span> <span class=\"string\">poor</span> <span class=\"string\">memory...</span></span><br><span class=\"line\"><span class=\"attr\">description:</span> <span class=\"string\">나만을</span> <span class=\"string\">위한,</span> <span class=\"string\">나의</span> <span class=\"string\">불쌍한(?)</span> <span class=\"string\">기억력을</span> <span class=\"string\">위한</span> <span class=\"string\">지식</span> <span class=\"string\">저장소</span></span><br><span class=\"line\"><span class=\"attr\">author:</span> <span class=\"string\">arcjjang</span></span><br><span class=\"line\"><span class=\"attr\">language:</span></span><br><span class=\"line\"><span class=\"attr\">timezone:</span></span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"2-2-URL-설정\"><a href=\"#2-2-URL-설정\" class=\"headerlink\" title=\"2-2) URL 설정\"></a>2-2) URL 설정</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"YML\"><figure class=\"iseeu highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># URL</span></span><br><span class=\"line\"><span class=\"attr\">url:</span> <span class=\"string\">https://arcjjang.github.io</span></span><br><span class=\"line\"><span class=\"attr\">root:</span> <span class=\"string\">/</span></span><br><span class=\"line\"><span class=\"attr\">permalink:</span> <span class=\"string\">:year/:month/:day/:title/</span></span><br><span class=\"line\"><span class=\"attr\">permalink_defaults:</span></span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"2-3-배포-설정\"><a href=\"#2-3-배포-설정\" class=\"headerlink\" title=\"2-3) 배포 설정\"></a>2-3) 배포 설정</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"YML\"><figure class=\"iseeu highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Deployment</span></span><br><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span> <span class=\"string\">https://github.com/arcjjang/arcjjang.github.io.git</span></span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"3-로컬에서-서버-실행하기\"><a href=\"#3-로컬에서-서버-실행하기\" class=\"headerlink\" title=\"3) 로컬에서 서버 실행하기\"></a>3) 로컬에서 서버 실행하기</h3><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"YML\"><figure class=\"iseeu highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">$</span> <span class=\"string\">hexo</span> <span class=\"string\">server</span></span><br></pre></td></tr></table></figure></div>\n<p>go to <a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/</a></p>\n<h3 id=\"4-배포하기\"><a href=\"#4-배포하기\" class=\"headerlink\" title=\"4) 배포하기\"></a>4) 배포하기</h3><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"YML\"><figure class=\"iseeu highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">$</span> <span class=\"string\">hexo</span> <span class=\"string\">clean</span></span><br><span class=\"line\"><span class=\"string\">$</span> <span class=\"string\">hexo</span> <span class=\"string\">deploy</span> <span class=\"string\">--generate</span></span><br></pre></td></tr></table></figure></div>\n\n<p>※ windows 환경에서 deploy중에 username error가 나면 윈도우자격증명을 다시 설정</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global credential.helper wincred</span><br></pre></td></tr></table></figure></div>\n\n<h1 id=\"—-테마-적용하기-—\"><a href=\"#—-테마-적용하기-—\" class=\"headerlink\" title=\"— 테마 적용하기 —\"></a>— 테마 적용하기 —</h1><p>테마 종류 : <a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">https://hexo.io/themes/</a></p>\n<h3 id=\"1-테마-설치\"><a href=\"#1-테마-설치\" class=\"headerlink\" title=\"1) 테마 설치\"></a>1) 테마 설치</h3><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"YML\"><figure class=\"iseeu highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">$</span> <span class=\"string\">cd</span> <span class=\"string\">themes</span></span><br><span class=\"line\"><span class=\"string\">$</span> <span class=\"string\">git</span> <span class=\"string\">clone</span> <span class=\"string\">https://github.com/klugjo/hexo-theme-clean-blog.git</span> <span class=\"string\">clean-blog</span></span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"2-테마-설정하기\"><a href=\"#2-테마-설정하기\" class=\"headerlink\" title=\"2) 테마 설정하기\"></a>2) 테마 설정하기</h3><blockquote>\n<p>/clean-blog/_config.yml</p>\n</blockquote>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"YML\"><figure class=\"iseeu highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Header</span></span><br><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\">  <span class=\"attr\">Home:</span> <span class=\"string\">/</span></span><br><span class=\"line\">  <span class=\"attr\">Archives:</span> <span class=\"string\">/archives</span></span><br><span class=\"line\">  <span class=\"attr\">Tags:</span> <span class=\"string\">/tags</span></span><br><span class=\"line\">  <span class=\"attr\">Categories:</span> <span class=\"string\">/categories</span></span><br><span class=\"line\">  <span class=\"attr\">Github:</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">https://github.com/arcjjang</span></span><br><span class=\"line\">    <span class=\"attr\">icon:</span> <span class=\"string\">github</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Title on top left of menu. Leave empty to use main blog title</span></span><br><span class=\"line\"><span class=\"attr\">menu_title:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># URL of the Home page image</span></span><br><span class=\"line\"><span class=\"attr\">index_cover:</span> <span class=\"string\">/images/topimage.jpg</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Social Accounts</span></span><br><span class=\"line\"><span class=\"attr\">twitter_url:</span></span><br><span class=\"line\"><span class=\"attr\">twitter_handle:</span></span><br><span class=\"line\"><span class=\"attr\">facebook_url:</span></span><br><span class=\"line\"><span class=\"attr\">github_url:</span> <span class=\"string\">https://github.com/arcjjang</span></span><br><span class=\"line\"><span class=\"attr\">gitlab_url:</span></span><br><span class=\"line\"><span class=\"attr\">linkedin_url:</span></span><br><span class=\"line\"><span class=\"attr\">mailto:</span> <span class=\"string\">arcelias@naver.com</span></span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"3-Tags-페이지-만들기\"><a href=\"#3-Tags-페이지-만들기\" class=\"headerlink\" title=\"3) Tags 페이지 만들기\"></a>3) Tags 페이지 만들기</h3><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> ..</span><br><span class=\"line\">$ hexo new page <span class=\"string\">\"tags\"</span></span><br></pre></td></tr></table></figure></div>\n\n<p>/source/tags/index.md 파일 수정</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: All tags</span><br><span class=\"line\">type: &quot;tags&quot;</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"4-Categories-페이지-만들기\"><a href=\"#4-Categories-페이지-만들기\" class=\"headerlink\" title=\"4) Categories 페이지 만들기\"></a>4) Categories 페이지 만들기</h3><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new page <span class=\"string\">\"categories\"</span></span><br></pre></td></tr></table></figure></div>\n\n<p>/source/categories/index.md 파일 수정</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: All categories</span><br><span class=\"line\">type: &quot;categories&quot;</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"5-테마-선택하기\"><a href=\"#5-테마-선택하기\" class=\"headerlink\" title=\"5) 테마 선택하기\"></a>5) 테마 선택하기</h3><blockquote>\n<p>/_config.yml 파일</p>\n</blockquote>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">theme: clean-blog</span><br></pre></td></tr></table></figure></div>\n\n<h1 id=\"—-Post-쓰기-—\"><a href=\"#—-Post-쓰기-—\" class=\"headerlink\" title=\"— Post 쓰기 —\"></a>— Post 쓰기 —</h1><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new post 포스트명</span><br></pre></td></tr></table></figure></div>\n\n<p>/source/posts/포스트명.md 파일 수정</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: Github Pages + Hexo</span><br><span class=\"line\">date: 2018-02-02 14:13:10</span><br><span class=\"line\">tags: [github, hexo]</span><br><span class=\"line\">cover: # post cover image</span><br><span class=\"line\">categories: [blog]</span><br><span class=\"line\">subtitle: 나만의 블러그를 만들어보자.</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure></div>\n\n<p>참고 : <a href=\"https://guides.github.com/features/mastering-markdown/\" target=\"_blank\" rel=\"noopener\">https://guides.github.com/features/mastering-markdown/</a></p>\n","text":"— GitHub Pages 만들기 —참고 : https://pages.github.com/1) Github Repository 생성New repository 버튼 클릭Repository name 입력 : arcjjang.github.ioPublic 선","link":"","raw":null,"photos":[],"categories":[{"name":"tip","slug":"tip","count":4,"path":"api/categories/tip.json"}],"tags":[{"name":"Hexo","slug":"Hexo","count":1,"path":"api/tags/Hexo.json"},{"name":"GITHUB","slug":"GITHUB","count":1,"path":"api/tags/GITHUB.json"}]},{"title":"Hello World","slug":"hello-world","date":"2020-04-29T06:29:48.101Z","updated":"2020-04-29T06:29:48.102Z","comments":true,"pin":null,"path":"api/articles/hello-world.json","excerpt":"","keywords":null,"cover":null,"content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure></div>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure></div>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure></div>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure></div>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the ","link":"","raw":null,"photos":[],"categories":[],"tags":[]}]}