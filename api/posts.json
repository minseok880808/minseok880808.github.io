{"total":34,"pageSize":10,"pageCount":4,"data":[{"title":"Redis(작성중)","slug":"Redis","date":"2021-04-20T01:26:57.000Z","updated":"2021-04-22T02:51:51.257Z","comments":true,"pin":null,"path":"api/articles/Redis.json","excerpt":"","keywords":null,"cover":"https://user-images.githubusercontent.com/62123161/115353865-f8e7d580-a1f3-11eb-8e26-b0b4ee5ec8e5.png","content":"<h2 id=\"개요\"><a href=\"#개요\" class=\"headerlink\" title=\"개요\"></a>개요</h2><ul>\n<li>인메모리 Key-Value형 데이터베이스.</li>\n<li>오픈소스</li>\n<li>data structure 지원<blockquote>\n<p>Strings, set, hash, list<br>sorted-set(랭킹시스템 할때 좋음) But, 데이터 100만건 넘어가면 느려짐(초당 백만건 순회)<br>Hyperlog, bitmap, geospatial index<br>Stream</p>\n</blockquote>\n</li>\n<li>싱글스레드 : v4.0부터는 4개의 Thread를 가지지만, 메인스레드 한개만 돌고 나머지는 유휴상태(sub thread)에 있다가 메인스레드에 문제가 생기면 메인스레드가 됨.</li>\n<li>속도가 빠름.</li>\n</ul>\n<h2 id=\"설치\"><a href=\"#설치\" class=\"headerlink\" title=\"설치\"></a>설치</h2><p><a href=\"https://gofnrk.tistory.com/35\" target=\"_blank\" rel=\"noopener\">https://gofnrk.tistory.com/35</a></p>\n<ul>\n<li>위 주소를 통해 설치를 하면 되며, 별다른 설정없이도 기본기능은 사용할 수 있음.</li>\n</ul>\n<h2 id=\"CLI\"><a href=\"#CLI\" class=\"headerlink\" title=\"CLI\"></a>CLI</h2><ul>\n<li>Windows 기준</li>\n<li>설치폴더(C:\\Program Files\\Redis) 내 redis-cli.exe 를 통하여 Command를 날릴 수 있음.<br><a href=\"https://user-images.githubusercontent.com/62123161/115353865-f8e7d580-a1f3-11eb-8e26-b0b4ee5ec8e5.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/115353865-f8e7d580-a1f3-11eb-8e26-b0b4ee5ec8e5.png\" alt=\"image\"></a></li>\n</ul>\n<h2 id=\"사용시-주의사항\"><a href=\"#사용시-주의사항\" class=\"headerlink\" title=\"사용시 주의사항\"></a>사용시 주의사항</h2><ul>\n<li>메모리 관리<ol>\n<li>physical memory 이상을 사용하면 swap 메모리를 사용(swap 사용하면 메모리 page 접근시마다 읽고 쓰기 때문에 엄청 느려짐)</li>\n<li>적은 메모리 사용하는 instance 여러개가 안전</li>\n<li>큰 메모리일시 elastic cache 쓰면 상관없음(걔가 알아서 관리해줌)</li>\n<li>메모리 파편화<ul>\n<li>실제로 메모리 파편화가 많이 발생함</li>\n<li>jemlloc 버전에 따라서 다르게 파편화가 발생<ul>\n<li>jemlloc 4.x 대 부터 메모리 파편화 줄이기 위한 jemalloc에 힌트를 주는 기능이 들어감</li>\n<li>jemlloc 3.x 버전은 used memory 2GB라고 나오지만 실제론 11GB RSS를 사용하는 경우가 자주 발생함</li>\n</ul>\n</li>\n<li>다양한 사이즈를 가지는 데이터보단 유사크기의 데이터를 가지는 경우가 유리함</li>\n</ul>\n</li>\n<li>메모리 부족시?<ul>\n<li>장비 마이그레이션<ul>\n<li>메모리 빡빡하면 마이그레이션중 문제생길수도 있다 넉넉하게 하자</li>\n</ul>\n</li>\n<li>있는 데이터 줄이기<ul>\n<li>특정 데이터를 줄일때 이미 swap 사용중이라면 프로세스 재시작 해야됨</li>\n</ul>\n</li>\n<li>메모리를 줄이기위한 설정<ul>\n<li>Collection<ul>\n<li>Hash -&gt; HashTable 하나 더 사용</li>\n<li>Sorted Set -&gt; Skiplist와 HashTable 이용</li>\n<li>Set -&gt; HashTable 사용</li>\n<li>위의 자료구조들은 메모리 많이 사용함</li>\n</ul>\n</li>\n<li>Ziplist 이용<ul>\n<li>인메모리 특성상 적은 개수(100만개 이하)라면 선형탐색이 정말 빠름</li>\n<li>게다가 ziplist는 기존 자료구조보다 메모리를 적게 먹음!</li>\n<li>그러니 List, hash, sorted set 등을 ziplist로 대체하자<ul>\n<li>hash-max-ziplist-entries, hash-max-ziplist-value</li>\n<li>list-max-ziplist-size, list-max-ziplist-value</li>\n<li>zset-max-ziplist-entries, zset-max-ziplist-value</li>\n</ul>\n</li>\n<li>만약 설정갯수 오버하면 원래 설정 구조로 바뀌게됨(n개 이상이면 원래 hash로 돌아감.. 이런식)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>O(n) 관련 명령어 조심하자!<ol>\n<li>오래걸리는 대표적인 O(N) 명령들[KEYS, FLUSHALL, FLUSHDB, Delete Collections, Get All Collections]<ul>\n<li>싱글스레드기에 시간을 길게잡는 명령어들은 위험하다.</li>\n<li>Key가 백만개 이상인데 Key 명령을 사용하는 경우</li>\n<li>아이템이 몇만개 든 hash, sorted set, set에서 모든 데이터를 가져오는 경우</li>\n<li>spring security oauth redis tokenStore 문제</li>\n</ul>\n</li>\n<li>대안<ul>\n<li>KEYS -&gt; Scan<ul>\n<li>scan 명령으로 하나의 긴 명령을 짧은 여러번의 명령으로 바꿈</li>\n</ul>\n</li>\n<li>Collection의 모든 아이템을 가져와야 할때<ul>\n<li>Collection 일부만 가져오거나</li>\n<li>큰 Collection을 작은 여러개의 Collection으로 나눠서 저장</li>\n<li>Userranks -&gt; Userrank1, Userrank2, Userrank3</li>\n<li>개당 몇천개 안쪽으로 저장하는게 좋음</li>\n</ul>\n</li>\n<li>Spring security oauth RedisTokenStore 이슈<ul>\n<li>스프링 시큐리티 레디스 토큰조회를 O(N) 으로 하고있었음</li>\n<li>100만개 넘어가면 검색/삭제 한번 하는데에 1초씩 걸렸음</li>\n<li>O(N) -&gt; O(1) 로 고쳐짐, 따라서 지금은 괜찮음</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"별첨-Redis-Setting\"><a href=\"#별첨-Redis-Setting\" class=\"headerlink\" title=\"별첨 : Redis Setting\"></a>별첨 : Redis Setting</h2><ol>\n<li><p>General</p>\n<ul>\n<li>databases</li>\n<li>logfile</li>\n<li>pidfile</li>\n<li>daemonize</li>\n<li>bind</li>\n<li>port</li>\n<li>tcp-backlog</li>\n</ul>\n</li>\n<li><p>AOF(Append Only File)</p>\n<ul>\n<li>aof-load-truncated    </li>\n<li>aof-rewrite-incremental-fsync</li>\n<li>appendfsync</li>\n<li>appendonly</li>\n<li>auto-aof-rewrite-min-size</li>\n<li>auto-aof-rewrite-percentage</li>\n<li>no-appendfsync-on-rewrite</li>\n</ul>\n</li>\n<li><p>RDB</p>\n<ul>\n<li>dbfilename</li>\n<li>rdbchecksum</li>\n<li>rdbcompression</li>\n<li>save</li>\n<li>stop-writes-on-bgsave-error</li>\n</ul>\n</li>\n<li><p>Replication</p>\n<ul>\n<li>slaveof    </li>\n<li>slave-read-only    </li>\n<li>slave-priority</li>\n<li>slave-serve-stale-data</li>\n<li>repl-backlog-size</li>\n<li>repl-backlog-ttl</li>\n<li>repl-disable-tcp-nodelay</li>\n<li>repl-diskless-sync</li>\n<li>repl-diskless-sync-delay</li>\n<li>repl-ping-slave-period</li>\n<li>repl-timeout</li>\n<li>min-slaves-max-lag</li>\n<li>min-slaves-to-write</li>\n</ul>\n</li>\n<li><p>Memory</p>\n<ul>\n<li>maxmemory</li>\n<li>maxmemory-policy</li>\n<li>maxmemory-samples</li>\n</ul>\n</li>\n<li><p>Cluster</p>\n<ul>\n<li>cluster-migration-barrier</li>\n<li>cluster-node-timeout</li>\n<li>cluster-require-full-coverage</li>\n<li>cluster-slave-validity-factor</li>\n</ul>\n</li>\n<li><p>Etc</p>\n<ul>\n<li>dir</li>\n<li>loglevel</li>\n<li>tcp-keepalive</li>\n<li>timeout</li>\n<li>client-output-buffer-limit</li>\n<li>maxclients</li>\n<li>list-max-ziplist-entries</li>\n<li>list-max-ziplist-value</li>\n<li>hash-max-ziplist-entries</li>\n<li>hash-max-ziplist-value</li>\n<li>set-max-intset-entries</li>\n<li>zset-max-ziplist-entries</li>\n<li>zset-max-ziplist-value</li>\n<li>activerehashing</li>\n<li>hll-sparse-max-bytes</li>\n<li>hz</li>\n<li>latency-monitor-threshold</li>\n<li>requirepass</li>\n<li>masterauth</li>\n<li>notify-keyspace-events</li>\n<li>slowlog-log-slower-than</li>\n<li>slowlog-max-len</li>\n<li>unixsocket</li>\n<li>unixsocketperm</li>\n<li>lua-time-limit</li>\n<li>watchdog-period</li>\n</ul>\n</li>\n</ol>\n<p>관련출처 : <a href=\"https://sehajyang.github.io/2019/12/11/how-to-operate-redis/\" target=\"_blank\" rel=\"noopener\">https://sehajyang.github.io/2019/12/11/how-to-operate-redis/</a></p>\n","text":"개요인메모리 Key-Value형 데이터베이스.오픈소스data structure 지원Strings, set, hash, list<br>sorted-set(랭킹시스템 할때 좋음) But, 데이터 100만건 넘어가면 느려짐(초당 백만건 순회)<br>Hype","link":"","raw":null,"photos":[],"categories":[{"name":"aws","slug":"aws","count":19,"path":"api/categories/aws.json"}],"tags":[{"name":"Redis","slug":"Redis","count":1,"path":"api/tags/Redis.json"},{"name":"key","slug":"key","count":1,"path":"api/tags/key.json"},{"name":"value","slug":"value","count":1,"path":"api/tags/value.json"},{"name":"inmemory","slug":"inmemory","count":1,"path":"api/tags/inmemory.json"},{"name":"db","slug":"db","count":1,"path":"api/tags/db.json"}]},{"title":"Container-Lambda","slug":"Container-Lambda","date":"2021-03-26T03:46:18.000Z","updated":"2021-03-30T07:30:14.098Z","comments":true,"pin":null,"path":"api/articles/Container-Lambda.json","excerpt":"","keywords":null,"cover":"https://user-images.githubusercontent.com/56995911/112574344-69881600-8e31-11eb-806d-741718653ca7.png","content":"<h2 id=\"컨테이너의-개념\"><a href=\"#컨테이너의-개념\" class=\"headerlink\" title=\"컨테이너의 개념\"></a>컨테이너의 개념</h2><ul>\n<li><p>선박의 컨테이너처럼 프로세스가 사용하는 자원을 격리하는 것.<br><a href=\"https://user-images.githubusercontent.com/56995911/112574344-69881600-8e31-11eb-806d-741718653ca7.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/112574344-69881600-8e31-11eb-806d-741718653ca7.png\" alt=\"image\"></a></p>\n</li>\n<li><p>가상머신과 마찬가지로 애플리케이션을 관련 라이브러리 및 종속 항목과 함께 패키지로 묶어 소프트웨어 서비스를 위한 격리환경에서 구동</p>\n</li>\n<li><p>장점</p>\n<ul>\n<li>가벼움<ul>\n<li>Request Traffic에 따라 추가배포가 가능.</li>\n<li>가상머신은 수 GB의 무거운 환경을 구성해야 하지만, Container는 GuestOS가 없으므로 MB단위의 구동환경을 가짐.</li>\n</ul>\n</li>\n<li>탄력성<ul>\n<li>운영체제(Linux, Windows 등), 가상머신, 로컬, 운영PC, 클라우드 등 어느 환경에서나 구동이 가능하므로 개발/배포가 쉬움.</li>\n</ul>\n</li>\n<li>유지 관리 효율<ul>\n<li>커널이 하나뿐이어서 업데이트/패치를 수행하면 전체적용이 되므로 효율적으로 유지관리 가능.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>도커의 작동순서<br><a href=\"https://user-images.githubusercontent.com/56995911/112584661-96412b00-8e3b-11eb-8274-900aeffd4ec2.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/112584661-96412b00-8e3b-11eb-8274-900aeffd4ec2.png\" alt=\"image\"></a></p>\n<ol>\n<li>코드개발</li>\n<li>Dockerfile 생성</li>\n<li>Dockerfile Image 생성(핵심 : 코드를 이미지화 하여 배포)</li>\n<li>Container Orchestrator를 통한 배포</li>\n<li>Container run</li>\n<li>Container image Push</li>\n</ol>\n</li>\n<li><p>도커파일 예제</p>\n<ul>\n<li><a href=\"https://javacan.tistory.com/entry/docker-start-7-create-image-using-dockerfile\" target=\"_blank\" rel=\"noopener\">https://javacan.tistory.com/entry/docker-start-7-create-image-using-dockerfile</a></li>\n</ul>\n</li>\n<li><p>[Container 시리즈] 02. Docker사용법 Docker Basic Command (osci.kr)(<a href=\"https://tech.osci.kr/2020/03/03/91690192/\" target=\"_blank\" rel=\"noopener\">https://tech.osci.kr/2020/03/03/91690192/</a>)</p>\n</li>\n</ul>\n<h2 id=\"Lambda-작성-및-시연\"><a href=\"#Lambda-작성-및-시연\" class=\"headerlink\" title=\"Lambda 작성 및 시연\"></a>Lambda 작성 및 시연</h2><h3 id=\"설정\"><a href=\"#설정\" class=\"headerlink\" title=\"설정\"></a>설정</h3><p><a href=\"https://user-images.githubusercontent.com/56995911/112585029-67778480-8e3c-11eb-9ce6-2a4bfd4db374.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/112585029-67778480-8e3c-11eb-9ce6-2a4bfd4db374.png\" alt=\"image\"></a><br><a href=\"https://user-images.githubusercontent.com/56995911/112585035-6b0b0b80-8e3c-11eb-80bf-7961f577cf28.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/112585035-6b0b0b80-8e3c-11eb-80bf-7961f577cf28.png\" alt=\"image\"></a></p>\n<ul>\n<li>위와 같은 화면이 나오기 위해서는 AWS Sam(다람쥐) 설치하여야 한다.</li>\n<li>Configure-Plugins 내에서 AWS ToolKit을 설치.</li>\n<li>또한, Docker는 필수. </li>\n</ul>\n<h3 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h3><p><a href=\"https://user-images.githubusercontent.com/56995911/112586776-b672e900-8e3f-11eb-8253-dc407c41a8b2.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/112586776-b672e900-8e3f-11eb-8253-dc407c41a8b2.png\" alt=\"image\"></a><br><a href=\"https://user-images.githubusercontent.com/56995911/112586785-bbd03380-8e3f-11eb-9389-d5abb4dd7de1.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/112586785-bbd03380-8e3f-11eb-9389-d5abb4dd7de1.png\" alt=\"image\"></a><br><a href=\"https://user-images.githubusercontent.com/56995911/112586790-bf63ba80-8e3f-11eb-8c2c-46beccfc5e15.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/112586790-bf63ba80-8e3f-11eb-8c2c-46beccfc5e15.png\" alt=\"image\"></a><br><a href=\"https://user-images.githubusercontent.com/56995911/112586797-c1c61480-8e3f-11eb-94f6-c9fe9e3d01fa.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/112586797-c1c61480-8e3f-11eb-94f6-c9fe9e3d01fa.png\" alt=\"image\"></a><br><a href=\"https://user-images.githubusercontent.com/56995911/112586804-c4286e80-8e3f-11eb-84bf-9687952ef1de.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/112586804-c4286e80-8e3f-11eb-84bf-9687952ef1de.png\" alt=\"image\"></a></p>\n<h3 id=\"Node-Js\"><a href=\"#Node-Js\" class=\"headerlink\" title=\"Node.Js\"></a>Node.Js</h3><p><a href=\"https://user-images.githubusercontent.com/56995911/112586925-f8039400-8e3f-11eb-9947-ed02d7fad936.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/112586925-f8039400-8e3f-11eb-9947-ed02d7fad936.png\" alt=\"image\"></a><br><a href=\"https://user-images.githubusercontent.com/56995911/112586929-fa65ee00-8e3f-11eb-82ce-d0abf9405385.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/112586929-fa65ee00-8e3f-11eb-82ce-d0abf9405385.png\" alt=\"image\"></a><br><a href=\"https://user-images.githubusercontent.com/56995911/112586934-fcc84800-8e3f-11eb-9bf5-c5e2859151f1.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/112586934-fcc84800-8e3f-11eb-9bf5-c5e2859151f1.png\" alt=\"image\"></a><br><a href=\"https://user-images.githubusercontent.com/56995911/112586939-ff2aa200-8e3f-11eb-96dc-83597e3839db.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/112586939-ff2aa200-8e3f-11eb-96dc-83597e3839db.png\" alt=\"image\"></a></p>\n","text":"컨테이너의 개념선박의 컨테이너처럼 프로세스가 사용하는 자원을 격리하는 것.<br> [Figure] ","link":"","raw":null,"photos":[],"categories":[{"name":"aws","slug":"aws","count":19,"path":"api/categories/aws.json"}],"tags":[{"name":"AWS","slug":"AWS","count":20,"path":"api/tags/AWS.json"},{"name":"Container","slug":"Container","count":1,"path":"api/tags/Container.json"},{"name":"Lambda","slug":"Lambda","count":2,"path":"api/tags/Lambda.json"}]},{"title":"ECS-Fargate","slug":"ECS-Fargate","date":"2021-03-26T02:45:47.000Z","updated":"2021-03-26T03:04:01.118Z","comments":true,"pin":null,"path":"api/articles/ECS-Fargate.json","excerpt":"","keywords":null,"cover":"https://user-images.githubusercontent.com/56995911/112570172-e498fe80-8e28-11eb-9ad5-26085f9e5a9e.png","content":"<h2 id=\"미리-드리는-말\"><a href=\"#미리-드리는-말\" class=\"headerlink\" title=\"미리 드리는 말\"></a>미리 드리는 말</h2><ul>\n<li>예제로 생성되는 컨테이너는 Public Docker File 이며, ECS에서 각 서비스별로 사용할때는 ECR에 Container Image를 등록하여 활용하는 것이 좋음.</li>\n<li>컨테이너 파일을 미리 만들어 둔 것이 있다면 해당 컨테이너를 사용해도 아래 예제는 정상적으로 돌아감.<br>(단, Port 설정 / Bound 설정 등 네트워크 설정들은 해주어야 함)</li>\n</ul>\n<h3 id=\"1-Cluster-생성\"><a href=\"#1-Cluster-생성\" class=\"headerlink\" title=\"1. Cluster 생성\"></a>1. Cluster 생성</h3><p><a href=\"https://user-images.githubusercontent.com/56995911/112570172-e498fe80-8e28-11eb-9ad5-26085f9e5a9e.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/112570172-e498fe80-8e28-11eb-9ad5-26085f9e5a9e.png\" alt=\"image\"></a></p>\n<p><a href=\"https://user-images.githubusercontent.com/56995911/112570232-04302700-8e29-11eb-9957-2eed9e2840a9.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/112570232-04302700-8e29-11eb-9957-2eed9e2840a9.png\" alt=\"image\"></a></p>\n<p><a href=\"https://user-images.githubusercontent.com/56995911/112570272-1611ca00-8e29-11eb-86f2-613946650c95.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/112570272-1611ca00-8e29-11eb-86f2-613946650c95.png\" alt=\"image\"></a></p>\n<p><a href=\"https://user-images.githubusercontent.com/56995911/112570312-27f36d00-8e29-11eb-8e64-39ca72f758ab.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/112570312-27f36d00-8e29-11eb-8e64-39ca72f758ab.png\" alt=\"image\"></a></p>\n<ul>\n<li>클러스터는 ECS의 기본단위이며, Task들이 돌아갈 수 있는 일종의 EC2인스턴스같은 환경이라고 이해하면 됨.</li>\n<li>따라서, 아무것도 없는 EC2를 먼저 띄우듯이 빈 껍데기인 Cluster를 먼저 생성해줌.</li>\n</ul>\n<h3 id=\"2-Task-Definition-설정\"><a href=\"#2-Task-Definition-설정\" class=\"headerlink\" title=\"2. Task Definition 설정\"></a>2. Task Definition 설정</h3><p><a href=\"https://user-images.githubusercontent.com/56995911/112570468-7143bc80-8e29-11eb-895a-9cacc52a8bc1.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/112570468-7143bc80-8e29-11eb-895a-9cacc52a8bc1.png\" alt=\"image\"></a></p>\n<p><a href=\"https://user-images.githubusercontent.com/56995911/112570506-80c30580-8e29-11eb-93a5-e9eb98e71cd0.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/112570506-80c30580-8e29-11eb-93a5-e9eb98e71cd0.png\" alt=\"image\"></a></p>\n<p><a href=\"https://user-images.githubusercontent.com/56995911/112570585-a3edb500-8e29-11eb-86c3-26949eec9f33.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/112570585-a3edb500-8e29-11eb-86c3-26949eec9f33.png\" alt=\"image\"></a></p>\n<p><a href=\"https://user-images.githubusercontent.com/56995911/112570604-b1a33a80-8e29-11eb-86b2-277ae062f59e.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/112570604-b1a33a80-8e29-11eb-86b2-277ae062f59e.png\" alt=\"image\"></a></p>\n<p><a href=\"https://user-images.githubusercontent.com/56995911/112570638-c41d7400-8e29-11eb-8b46-8f1347984181.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/112570638-c41d7400-8e29-11eb-8b46-8f1347984181.png\" alt=\"image\"></a></p>\n<ul>\n<li>실제 Task들이 어떻게 구동할지 어떤환경에서 구동이 되는지를 설정해주는 것.</li>\n<li>Task Definition 은 ECS에 종속적이지 않음.</li>\n<li>Docker Example : docker.io/library/nginx</li>\n<li>예제샘플 도커 주소 : <a href=\"https://hub.docker.com/search?q=nginx&amp;type=image\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com/search?q=nginx&amp;type=image</a></li>\n</ul>\n<h3 id=\"3-서비스-생성\"><a href=\"#3-서비스-생성\" class=\"headerlink\" title=\"3. 서비스 생성\"></a>3. 서비스 생성</h3><p><a href=\"https://user-images.githubusercontent.com/56995911/112571035-89680b80-8e2a-11eb-9a68-387db7307657.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/112571035-89680b80-8e2a-11eb-9a68-387db7307657.png\" alt=\"image\"></a></p>\n<p><a href=\"https://user-images.githubusercontent.com/56995911/112571055-971d9100-8e2a-11eb-951c-10ec489422c5.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/112571055-971d9100-8e2a-11eb-951c-10ec489422c5.png\" alt=\"image\"></a></p>\n<p><a href=\"https://user-images.githubusercontent.com/56995911/112571083-a43a8000-8e2a-11eb-9551-cc284e26431d.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/112571083-a43a8000-8e2a-11eb-9551-cc284e26431d.png\" alt=\"image\"></a></p>\n<p><a href=\"https://user-images.githubusercontent.com/56995911/112571113-b4525f80-8e2a-11eb-8842-e2aedf23fcde.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/112571113-b4525f80-8e2a-11eb-8842-e2aedf23fcde.png\" alt=\"image\"></a></p>\n<p><a href=\"https://user-images.githubusercontent.com/56995911/112571136-c16f4e80-8e2a-11eb-96a2-23d7c4a9d9c7.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/112571136-c16f4e80-8e2a-11eb-96a2-23d7c4a9d9c7.png\" alt=\"image\"></a></p>\n<p><a href=\"https://user-images.githubusercontent.com/56995911/112571145-c9c78980-8e2a-11eb-9083-5ee82e568d03.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/112571145-c9c78980-8e2a-11eb-9083-5ee82e568d03.png\" alt=\"image\"></a></p>\n<p><a href=\"https://user-images.githubusercontent.com/56995911/112571316-29259980-8e2b-11eb-8813-9c99f1bc322e.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/112571316-29259980-8e2b-11eb-8813-9c99f1bc322e.png\" alt=\"image\"></a></p>\n<p><a href=\"https://user-images.githubusercontent.com/56995911/112571373-3c386980-8e2b-11eb-869e-8d040c97fb38.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/112571373-3c386980-8e2b-11eb-869e-8d040c97fb38.png\" alt=\"image\"></a></p>\n<h3 id=\"4-테스트\"><a href=\"#4-테스트\" class=\"headerlink\" title=\"4. 테스트\"></a>4. 테스트</h3><ul>\n<li>public IP : 3.36.59.154 로 인터넷 접속하면 화면이 아래와 같이 뜸.<br><a href=\"https://user-images.githubusercontent.com/56995911/112571419-52462a00-8e2b-11eb-89d5-41961b23018c.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/112571419-52462a00-8e2b-11eb-89d5-41961b23018c.png\" alt=\"image\"></a></li>\n</ul>\n","text":"미리 드리는 말예제로 생성되는 컨테이너는 Public Docker File 이며, ECS에서 각 서비스별로 사용할때는 ECR에 Container Image를 등록하여 활용하는 것이 좋음.컨테이너 파일을 미리 만들어 둔 것이 있다면 해당 컨테이너를 사용","link":"","raw":null,"photos":[],"categories":[{"name":"aws","slug":"aws","count":19,"path":"api/categories/aws.json"}],"tags":[{"name":"AWS","slug":"AWS","count":20,"path":"api/tags/AWS.json"},{"name":"ECS","slug":"ECS","count":3,"path":"api/tags/ECS.json"},{"name":"Fargate","slug":"Fargate","count":1,"path":"api/tags/Fargate.json"}]},{"title":"Kinesis WebRTC","slug":"Kinesis-WebRTC","date":"2021-03-11T07:10:56.000Z","updated":"2021-03-11T07:58:37.628Z","comments":true,"pin":null,"path":"api/articles/Kinesis-WebRTC.json","excerpt":"","keywords":null,"cover":"https://user-images.githubusercontent.com/62123161/110749545-99a5b580-8284-11eb-8fad-54274432de3a.png","content":"<h2 id=\"WebRTC-가격비교\"><a href=\"#WebRTC-가격비교\" class=\"headerlink\" title=\"WebRTC 가격비교\"></a>WebRTC 가격비교</h2><p>WebRTC 기능을 사용하면 해당 월의 활성 상태인 신호 채널 수, 송수신된 신호 메시지 수 및 미디어 중계에 사용된 TURN 스트리밍 분에 따라 부과됩니다.</p>\n<p>해당 월 기간에 언제든지 디바이스 또는 애플리케이션이 신호 채널에 연결되면 신호 채널은 활성으로 간주됩니다. TURN 스트리밍 분은 1분 간격으로 계량됩니다.</p>\n<p><a href=\"https://user-images.githubusercontent.com/62123161/110749545-99a5b580-8284-11eb-8fad-54274432de3a.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/110749545-99a5b580-8284-11eb-8fad-54274432de3a.png\" alt=\"image\"></a></p>\n<h2 id=\"WebRTC-검토\"><a href=\"#WebRTC-검토\" class=\"headerlink\" title=\"WebRTC 검토\"></a>WebRTC 검토</h2><h3 id=\"OverView\"><a href=\"#OverView\" class=\"headerlink\" title=\"OverView\"></a>OverView</h3><ul>\n<li>Official Site : <a href=\"https://webrtc.org\" target=\"_blank\" rel=\"noopener\">https://webrtc.org</a></li>\n<li>W3C Specification : <a href=\"https://w3c.github.io/webrtc-pc/\" target=\"_blank\" rel=\"noopener\">https://w3c.github.io/webrtc-pc/</a> (latest published version : WebRTC 1.0: Real-Time Communication Between Browsers (w3.org))</li>\n<li>Associated Test Suite (Browser base)</li>\n<li>wpt/webrtc at master · web-platform-tests/wpt · GitHub</li>\n<li>Web 기반, Peer to Peer 실시간 비디오/오디오 통신 Specification</li>\n</ul>\n<p><a href=\"https://user-images.githubusercontent.com/62123161/110749938-189aee00-8285-11eb-9227-93f4fc395e61.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/110749938-189aee00-8285-11eb-9227-93f4fc395e61.png\" alt=\"image\"></a></p>\n<ul>\n<li><p>각종 브라우저에서 기본 WebRTC Framework 을 지원하고 , 브라우저를 통해서는 별다른 설정없이 1:1 실시간 화상통화 기능은 즉시 사용가능함.<br>&nbsp;&nbsp; - 브라우저 자체엔진에서 WebRTC Framework 탑재.<br>&nbsp;&nbsp; - HTML 기반 API 제공하고 있음.<br>&nbsp;&nbsp; - OS or Browser Version 별 지원내역 ( ref&gt; wikipedia )<br>&nbsp;&nbsp;&nbsp;&nbsp; - Desktop Browser (MS-Edge 12+, Google Chrome 28+, Mozilla Firefox 22+, Safari 11+, Opera 18+, Vivaldi 1.9+)<br>&nbsp;&nbsp;&nbsp;&nbsp; - Android (Google Chrome 28+, Mozilla Firefox 24+, Opera Mobile 12+)<br>&nbsp;&nbsp;&nbsp;&nbsp; - Chrome OS / Firefox OS / BlackBerry 10<br>&nbsp;&nbsp;&nbsp;&nbsp; - iOS 11(MobileSafari/WebKit)<br>&nbsp;&nbsp;&nbsp;&nbsp; - Tizen 3.0</p>\n</li>\n<li><p>1:1 (Peer to Peer) 동작 지원이 기본 사양.</p>\n</li>\n<li><p>1:N 및 방화벽을 경유하는 영상/음성 전송을 제공하기 위해서는 별도의 서버(TURN/STUN) 를 구축 필요.<br>&nbsp;&nbsp; - 대부분의 방화벽모델은 Port Forwarding Rule 설정을 통해 해결됨.<br>&nbsp;&nbsp; - 방화벽이 Symmetric NAT 인 경우 Outbound IP Address 가 달라지므로, 외부에서 접속할 방법이 없어져 동작 불가능.<br>&nbsp;&nbsp; Solution) TURN Relay  : Public Domain 에 Relay Server 를 두고 이를 통해 영상/음성 Data 를 Routing 하는 것으로 해결.</p>\n</li>\n</ul>\n<h3 id=\"Protocol-Stack\"><a href=\"#Protocol-Stack\" class=\"headerlink\" title=\"Protocol Stack\"></a>Protocol Stack</h3><ul>\n<li>WebRTC 기능 개발시 RTCPeerConnection , RTCDataChannel API 는 아래와 같이 구성됨.</li>\n<li>Secure 채널을 제공하기위해 ICE/STUN/TURN 위에 DTLS 를 사용.(Mandatory feature)</li>\n<li>UDP 특성상 congestion control , flow control reliability 를 제공하지 않음에 따라</li>\n<li>SRTP / SCTP 를 통한 Connection setup / Data Delivery 를 사용함.</li>\n</ul>\n<p><a href=\"https://user-images.githubusercontent.com/62123161/110750295-9ced7100-8285-11eb-82a8-affa6f8e55d4.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/110750295-9ced7100-8285-11eb-82a8-affa6f8e55d4.png\" alt=\"image\"></a></p>\n<h3 id=\"APIs\"><a href=\"#APIs\" class=\"headerlink\" title=\"APIs\"></a>APIs</h3><p>WebRTC 의 주요 구성요소는 각 Platform ( Browser 기반, Android 기반, iOS 기반 ) 별로 표준화된(유사한) API 를 제공하고,<br>이를 통해 각 Client Application 을 제작, 배포 가능.</p>\n<h4 id=\"Interfaces\"><a href=\"#Interfaces\" class=\"headerlink\" title=\"Interfaces\"></a>Interfaces</h4><ul>\n<li>getUserMedia<br>&nbsp;&nbsp; - Webcam/audio등의 사용권한 요청.</li>\n<li>RTCPeerConnection<br>&nbsp;&nbsp; - ICE agent 역할을 수행하는 Object, Signaling channel을 통해 획득한 sdp/ice candidate등을 등록하여, ICE gathering수행.<br>&nbsp;&nbsp; - RTCIceCanddiate/ RTCConfiguration 객체등을 사용함.<br>&nbsp;&nbsp; - Peer와 컨넥션 생성 후 미디어 전송을 위한 RTCRtpSender/RTCRtpReceiver/RTCRtpTransceiver등을 획득할 수 있음.<br>&nbsp;&nbsp; - addTrack을 이용해서 전송하고자 하는 미디어 트랙을 추가 할 수 있음<br>&nbsp;&nbsp; - createDataChennel을 통해서 데이터 전송을 위한 커넥션 생성가능. (채팅/파일전송등)</li>\n<li>RTCDataChannel</li>\n<li>RTCDataChannelEvent</li>\n<li>RTCSessionDescription<br>&nbsp;&nbsp; - SDP정보</li>\n<li>RTCStatsReport</li>\n<li>RTCIceCandidate<br>&nbsp;&nbsp; - ICE candidate정보</li>\n<li>RTCIceTransport<br>&nbsp;&nbsp; - ICE agent의 상태확인 가능/ gathering state/ local, remote candidates, 이 Agent의 role./ selected candidate pair등</li>\n<li>RTCPeerConnectionIceEvent</li>\n<li>RTCRtpSender<br>&nbsp;&nbsp; - 주어진 MediaStreamTrack의 전송을 제어 할 수 있음.<br>&nbsp;&nbsp; - MediaStreamTrack변경<br>&nbsp;&nbsp; - 전송상태 확인가능</li>\n<li>RTCRtpReceiver<br>&nbsp;&nbsp; - 수신중인 MediaStream의 미디어속성/TLS속성/상태 확인가능.</li>\n<li>RTCTrackEvent</li>\n<li>RTCSctpTransport</li>\n</ul>\n<h3 id=\"Service-Component\"><a href=\"#Service-Component\" class=\"headerlink\" title=\"Service Component\"></a>Service Component</h3><p>WebRTC Service 는 다음 세가지로 구성되고 서비스 목적에 따라 각 구성 요소별 별도 Configuration 이 필요</p>\n<ul>\n<li><p>WebRTC Gateway<br>WebRTC 의 Signaling 방식은 Web 방식임에 따라 각 Peer 간의 initial Connection 을 위해 WebServer 가 필요함.<br>node.js 또는 XHR 처리가 가능한 Server 로 구성필요.</p>\n</li>\n<li><p>WebRTC Client</p>\n</li>\n<li><p>TURN/STUN Server</p>\n</li>\n</ul>\n<h3 id=\"Testing-Flow\"><a href=\"#Testing-Flow\" class=\"headerlink\" title=\"Testing Flow?\"></a>Testing Flow?</h3><p><a href=\"https://user-images.githubusercontent.com/62123161/110750602-138a6e80-8286-11eb-8e75-6078530b7e56.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/110750602-138a6e80-8286-11eb-8e75-6078530b7e56.png\" alt=\"image\"></a></p>\n","text":"WebRTC 가격비교WebRTC 기능을 사용하면 해당 월의 활성 상태인 신호 채널 수, 송수신된 신호 메시지 수 및 미디어 중계에 사용된 TURN 스트리밍 분에 따라 부과됩니다.해당 월 기간에 언제든지 디바이스 또는 애플리케이션이 신호 채널에 연결되면","link":"","raw":null,"photos":[],"categories":[{"name":"aws","slug":"aws","count":19,"path":"api/categories/aws.json"}],"tags":[{"name":"AWS","slug":"AWS","count":20,"path":"api/tags/AWS.json"},{"name":"Kinesis","slug":"Kinesis","count":4,"path":"api/tags/Kinesis.json"},{"name":"WebRTC","slug":"WebRTC","count":1,"path":"api/tags/WebRTC.json"}]},{"title":"Fargate","slug":"Fargate","date":"2021-03-01T01:45:56.000Z","updated":"2021-02-23T01:50:19.654Z","comments":true,"pin":null,"path":"api/articles/Fargate.json","excerpt":"","keywords":null,"cover":null,"content":"<h3 id=\"Fargate란\"><a href=\"#Fargate란\" class=\"headerlink\" title=\"Fargate란?\"></a>Fargate란?</h3><ul>\n<li>ECS<sup>Elastic Container Service</sup> 의 하나의 옵션이었음.</li>\n<li>기존 ECS는 EC2의 인스턴스 클러스터를 관리, 사용률 모니터링 등을 사용자가 수행해야 했지만, EC2 자원관리를 AWS에 맡겨 서버의 프로비저닝이나 스케일링에 대해 생각하지 않고 컨테이너, Application에 집중해서 구축 할 수 있는 장점이 있음.</li>\n<li>서버를 관리하지 않는다는 관점에서 Lambda랑 비슷하기에 컨테이너버전의 Serverless라고 불리기도 함. (람다와 달리 성능, 시간제한같은게 없다.)</li>\n</ul>\n<h3 id=\"가격\"><a href=\"#가격\" class=\"headerlink\" title=\"가격?\"></a>가격?</h3><ul>\n<li>t2.Micro 보다 비싼편 ($0.00511USD/hour)</li>\n<li>다만, CPU를 0.25(1/4)로 사용이 가능하기에 어느정도 절약은 가능.</li>\n</ul>\n<h3 id=\"적용방법\"><a href=\"#적용방법\" class=\"headerlink\" title=\"적용방법\"></a>적용방법</h3><ol>\n<li>IAM 계정 생성</li>\n<li>도커 이미지 생성 및 ECR에 등록</li>\n</ol>\n<ul>\n<li>aws cli 환경설정</li>\n<li>Docker 이미지용 Application 작성</li>\n<li>ECR에 repository 생성</li>\n<li>ECR에 repository에 Docker Image 올리기</li>\n</ul>\n<ol start=\"3\">\n<li>작업 정의</li>\n</ol>\n<ul>\n<li>작업 정의 생성</li>\n<li>작업 정의에 컨테이너 추가</li>\n</ul>\n<ol start=\"4\">\n<li>클러스터 및 서비스 생성</li>\n</ol>\n<ul>\n<li>클러스터 생성</li>\n<li>서비스 생성</li>\n<li>서비스 확인</li>\n</ul>\n","text":"Fargate란?ECSElastic Container Service 의 하나의 옵션이었음.기존 ECS는 EC2의 인스턴스 클러스터를 관리, 사용률 모니터링 등을 사용자가 수행해야 했지만, EC2 자원관리를 AWS에 맡겨 서버의 프로비저닝이나 스케일링에","link":"","raw":null,"photos":[],"categories":[{"name":"aws","slug":"aws","count":19,"path":"api/categories/aws.json"}],"tags":[{"name":"AWS","slug":"AWS","count":20,"path":"api/tags/AWS.json"},{"name":"ECS","slug":"ECS","count":3,"path":"api/tags/ECS.json"},{"name":"fargate","slug":"fargate","count":1,"path":"api/tags/fargate.json"}]},{"title":"ECS","slug":"ECS","date":"2021-03-01T01:32:32.000Z","updated":"2021-03-26T02:45:30.947Z","comments":true,"pin":null,"path":"api/articles/ECS.json","excerpt":"","keywords":null,"cover":"https://user-images.githubusercontent.com/56995911/108791589-c68a7500-75c2-11eb-895d-07dc43f35c83.png","content":"<h3 id=\"ECSElastic-Container-Service란\"><a href=\"#ECSElastic-Container-Service란\" class=\"headerlink\" title=\"ECSElastic Container Service란 ?\"></a>ECS<sup>Elastic Container Service</sup>란 ?</h3><ul>\n<li>도커<sup>Docker</sup>는 응용프로그램들을 소프트웨어 컨테이너안에 배치시키고 이를 신속하게 구축, 테스트, 배포 가능한 소프트웨어 플랫폼</li>\n<li>컨테이너 가상화에 기반한 서비스</li>\n<li>엘라스틱 컨테이너 서비스<sup>Elastic Container Service</sup> 는 이런 Docker컨테이너를 관리해주는 오케스트레이션 도구.</li>\n<li>비슷한 오케스트레이션 도구로는 도커에서 만든 스웜<sup>Swarm</sup>, 구글<sup>Google</sup>의 노하우가 담겨있는 쿠버네티스<sup>Kubernetes</sup>, 하시코프의 노마드<sup>Nomad</sup> 등이 있음.</li>\n<li>Fargate 시작유형 / EC2 시작유형 으로 분리되어 있음.</li>\n</ul>\n<h3 id=\"ECSElastic-Container-Service사용시-이점\"><a href=\"#ECSElastic-Container-Service사용시-이점\" class=\"headerlink\" title=\"ECSElastic Container Service사용시 이점 ?\"></a>ECS<sup>Elastic Container Service</sup>사용시 이점 ?</h3><ul>\n<li>간단한 API 호출을 사용하여 컨테이너 기반 애플리케이션을 시작 및 중지할 수 있다.</li>\n<li>중앙 집중식 서비스를 사용하여 클러스터 상태를 확인할 수 있다</li>\n<li>다수의 친숙한 EC2 기능에 액세스할 수 있다.</li>\n<li>일관된 배포 및 구축 환경을 생성하고, 배치 및 ETL(Extract-Transform-Load) 워크로드를 관리 및 크기 조정하고, 마이크로 서비스 모델에 정교한 애플리케이션 아키텍처를 구축할 수 있다.</li>\n</ul>\n<h3 id=\"클러스터Cluster와-클러스터-인스턴스Cluster-Instance\"><a href=\"#클러스터Cluster와-클러스터-인스턴스Cluster-Instance\" class=\"headerlink\" title=\"클러스터Cluster와 클러스터 인스턴스Cluster Instance\"></a>클러스터<sup>Cluster</sup>와 클러스터 인스턴스<sup>Cluster Instance</sup></h3><p><a href=\"https://user-images.githubusercontent.com/56995911/108791589-c68a7500-75c2-11eb-895d-07dc43f35c83.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/108791589-c68a7500-75c2-11eb-895d-07dc43f35c83.png\" alt=\"image\"></a></p>\n<h4 id=\"클러스터Cluster\"><a href=\"#클러스터Cluster\" class=\"headerlink\" title=\"클러스터Cluster\"></a>클러스터<sup>Cluster</sup></h4><ul>\n<li>ECS의 가장 기본 단위는 Cluster</li>\n<li>도커 컨테이너를 실행할 수 있는 가상의 공간</li>\n<li>EC2와 다른점은 컴퓨팅자원을 기본적으로 갖고있지 않다는 것.</li>\n<li>A라는 기능(프로젝트)을 수행하는 컨테이너들은 A클러스트 내에서만 동작하고, B프로젝트 컨테이너들은 B클러스터 내에서만 동작하는 방식.</li>\n</ul>\n<h4 id=\"클러스터-인스턴스Cluster-Instance\"><a href=\"#클러스터-인스턴스Cluster-Instance\" class=\"headerlink\" title=\"클러스터 인스턴스Cluster Instance\"></a>클러스터 인스턴스<sup>Cluster Instance</sup></h4><ul>\n<li>클러스터에 연결된 EC2인스턴스</li>\n<li>EC2의 ecs-client라는 서비스를 활용해 특정 Cluster로 연결이 가능함.</li>\n<li>ecs-client는 컨테이너 인스턴스의 자원을 모니터링, 관리 등 적절하게 실행하는 역할을 해줌.</li>\n</ul>\n<h3 id=\"태스크Task와-태스크-디피니션Task-definition\"><a href=\"#태스크Task와-태스크-디피니션Task-definition\" class=\"headerlink\" title=\"태스크Task와 태스크 디피니션Task definition\"></a>태스크<sup>Task</sup>와 태스크 디피니션<sup>Task definition</sup></h3><p><a href=\"https://user-images.githubusercontent.com/56995911/108791719-1c5f1d00-75c3-11eb-9b0c-721c0dedccf1.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/108791719-1c5f1d00-75c3-11eb-9b0c-721c0dedccf1.png\" alt=\"image\"></a></p>\n<h4 id=\"태스크Task\"><a href=\"#태스크Task\" class=\"headerlink\" title=\"태스크Task\"></a>태스크<sup>Task</sup></h4><ul>\n<li>ECS에서 컨테이너를 실행하는 최소단위.</li>\n<li>컨테이너가 2개이상 모였을때 태스크로 구성가능함.</li>\n<li>같은 태스크 내에 있는 컨테이너들은 모두 같은 컨테이너 인스턴스에서 실행되는것이 보장됨.</li>\n</ul>\n<h4 id=\"태스크-디피니션Task-definition\"><a href=\"#태스크-디피니션Task-definition\" class=\"headerlink\" title=\"태스크 디피니션Task definition\"></a>태스크 디피니션<sup>Task definition</sup></h4><ul>\n<li>컨테이너 네트워크모드, 테스크 Role, 도커이미지, 실행명령어, CPU제한, 메모리 제한 등의 설정을 해주는 태스크관리 역할을 함.</li>\n<li>매번 설정을 해주기 번거로우니 미리 설정의 집합을 하나의 단위로 정의해놓고 사용.</li>\n<li>Task는 클러스터에 종속적이지만, Task Definition(리비전)은 클러스터에 종속되지 않음.<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"family\"</span>: <span class=\"string\">\"webserver\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"containerDefinitions\"</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"string\">\"name\"</span>: <span class=\"string\">\"web\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"image\"</span>: <span class=\"string\">\"nginx\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"memory\"</span>: <span class=\"string\">\"100\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"cpu\"</span>: <span class=\"string\">\"99\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">\"requiresCompatibilities\"</span>: [</span><br><span class=\"line\">        <span class=\"string\">\"FARGATE\"</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">\"networkMode\"</span>: <span class=\"string\">\"awsvpc\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"memory\"</span>: <span class=\"string\">\"512\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"cpu\"</span>: <span class=\"string\">\"256\"</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n</li>\n</ul>\n<h3 id=\"서비스Service\"><a href=\"#서비스Service\" class=\"headerlink\" title=\"서비스Service\"></a>서비스<sup>Service</sup></h3><p><a href=\"https://user-images.githubusercontent.com/56995911/108792157-fab26580-75c3-11eb-9946-8ca66a93547c.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/108792157-fab26580-75c3-11eb-9946-8ca66a93547c.png\" alt=\"image\"></a></p>\n<ol>\n<li>Task Definition을 사용하여 1회성으로 실행하는 방법.<br>1) 한번 실행되고 종료되며, 데몬위에서 프로세스로 돌아가는 상황에서 종료 스크립트가 없으면 컨테이너가 남아있을 수 있음.<br>2) 특수한 경우가 아니면 사용되지 않음.</li>\n<li>서비스를 정의하는 방법<br>1) 리플리카 타입</li>\n</ol>\n<ul>\n<li>테스크의 갯수를 지정해주면 자동으로 실행되도록 관리해줌.</li>\n<li>웹서버들에서 사용됨.<br>2) 데몬 타입</li>\n<li>모든 컨테이너 인스턴스에 해당 테스크가 하나씩 실행됨.</li>\n</ul>\n<h3 id=\"엘라스틱-컨테이너-레지스트리Elastic-Conatiner-Registry\"><a href=\"#엘라스틱-컨테이너-레지스트리Elastic-Conatiner-Registry\" class=\"headerlink\" title=\"엘라스틱 컨테이너 레지스트리Elastic Conatiner Registry\"></a>엘라스틱 컨테이너 레지스트리<sup>Elastic Conatiner Registry</sup></h3><ul>\n<li>줄여서 ECR</li>\n<li>도커이미지를 관리해줌.</li>\n<li>콘솔에서 보여줄 수 있으며, 바로 이미지를 불러올 수 있음.</li>\n<li>일반적으로는 Docker hub가 있지만, 무료로는 프라이빗한 이미지는 1개뿐이 저장이 되지 않음.</li>\n</ul>\n<h3 id=\"컨테이너-에이전트Container-Agent\"><a href=\"#컨테이너-에이전트Container-Agent\" class=\"headerlink\" title=\"컨테이너 에이전트Container Agent\"></a>컨테이너 에이전트<sup>Container Agent<sup></h3><ul>\n<li>ECS 클러스터의 각 인프라 Resource에서 실행.</li>\n<li>현재 실행중인 작업과 Resource 사용률에 대한 정보를 ECS로 전송하고 ECS는 Event가 들어올때마다 작업을 시작 or 중지.</li>\n</ul>\n<h3 id=\"AuroraDB가-ECS내에-들어가있지-않은-이유\"><a href=\"#AuroraDB가-ECS내에-들어가있지-않은-이유\" class=\"headerlink\" title=\"AuroraDB가 ECS내에 들어가있지 않은 이유\"></a>AuroraDB가 ECS내에 들어가있지 않은 이유</h3><ul>\n<li>Container는 쉽게 생성하고 쉽게 지울 수 있다.</li>\n<li>이점이 데이터베이스에서는 반대로 적용이 되어야 하기에 컨테이너로 올리지 않았을 것으로 추정</li>\n<li>로드밸런서를 굳이 Instance내에서 갖고있기보다는 오히려 RDS관리가 더 편했을 것으로 보임.</li>\n</ul>\n<h3 id=\"Bastion-Host가-NLB에만-있는-이유\"><a href=\"#Bastion-Host가-NLB에만-있는-이유\" class=\"headerlink\" title=\"Bastion Host가 NLB에만 있는 이유\"></a>Bastion Host가 NLB에만 있는 이유</h3><ul>\n<li>우선, Bastion의 용도는 외부 공격이나 수상한 접근에 방화벽을 세워 막아주는 일종의 게이트웨이 호스트 서버라고 보면 됨.</li>\n<li>ALB단으로 들어오는 요청사항에 대해서는 기본적으로 API-Gateway에서 어느정도 걸러줄 것으로 보고 따로 세우지 않았다고 판단됨.</li>\n<li>HTTPS가 일정부분 보안을 책임져주는 것도 한몫한 것으로 보임.</li>\n</ul>\n<h3 id=\"AZ가용영역을-2개로만-간-이유\"><a href=\"#AZ가용영역을-2개로만-간-이유\" class=\"headerlink\" title=\"AZ가용영역을 2개로만 간 이유?\"></a>AZ가용영역을 2개로만 간 이유?</h3><ul>\n<li>굳이 가용영역을 3개로 무리해서 확장할 필요가 없었을 것으로 보임.</li>\n</ul>\n","text":"ECSElastic Container Service란 ?도커Docker는 응용프로그램들을 소프트웨어 컨테이너안에 배치시키고 이를 신속하게 구축, 테스트, 배포 가능한 소프트웨어 플랫폼컨테이너 가상화에 기반한 서비스엘라스틱 컨테이너 서비스Elastic ","link":"","raw":null,"photos":[],"categories":[{"name":"aws","slug":"aws","count":19,"path":"api/categories/aws.json"}],"tags":[{"name":"AWS","slug":"AWS","count":20,"path":"api/tags/AWS.json"},{"name":"ECS","slug":"ECS","count":3,"path":"api/tags/ECS.json"},{"name":"EC2","slug":"EC2","count":1,"path":"api/tags/EC2.json"}]},{"title":"Armeria(공부중)","slug":"Armeria","date":"2021-02-18T07:04:21.000Z","updated":"2021-02-18T02:52:34.484Z","comments":true,"pin":null,"path":"api/articles/Armeria.json","excerpt":"","keywords":null,"cover":null,"content":"<h2 id=\"서문\"><a href=\"#서문\" class=\"headerlink\" title=\"서문\"></a>서문</h2><ul>\n<li>요즘 대세인 아르메리아(Armeria)에 대해 간단히 알아보자.</li>\n<li>오픈소스 기반의 자바 HTTP/2 마이크로서비스 프레임워크</li>\n<li>Netty  개발자와 Line에서 사용중</li>\n<li>공식홈페이지(<a href=\"https://armeria.dev/\" target=\"_blank\" rel=\"noopener\">https://armeria.dev/</a>)</li>\n</ul>\n<h2 id=\"본문\"><a href=\"#본문\" class=\"headerlink\" title=\"본문\"></a>본문</h2><h3 id=\"1-Armeria\"><a href=\"#1-Armeria\" class=\"headerlink\" title=\"1. Armeria?\"></a>1. Armeria?</h3><ul>\n<li>Asynchronous RPC/REST library built on top of Java 8, Netty, HTTP/2, Thrift and gRPC</li>\n<li>고성능 비동기 마이크로서비스를 손쉽게 제작할 수 있음</li>\n<li>단일 어플리케이션에서 단일 포트로 HTTP, gRPC, Thrift를 동시에 지원<br>spring webflux는 서블릿엔진이 아니기 때문에 thrift의 Tservlet을 사용할 수 없음, 별도로 서버구현체를 만들어야해서 포트 소모</li>\n<li>gRPC, Thrift를 브라우저기반에서 테스트 가능</li>\n<li>cf. 사용처 : zipkin, slack, twitter, kakaoPay 등</li>\n</ul>\n<h3 id=\"2-설정방법\"><a href=\"#2-설정방법\" class=\"headerlink\" title=\"2. 설정방법\"></a>2. 설정방법</h3><h4 id=\"Gradle\"><a href=\"#Gradle\" class=\"headerlink\" title=\"Gradle\"></a>Gradle</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    ....</span><br><span class=\"line\">    compile <span class=\"string\">\"com.linecorp.armeria:armeria:0.68.2\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"라우팅-전-psvm\"><a href=\"#라우팅-전-psvm\" class=\"headerlink\" title=\"라우팅 전 psvm\"></a>라우팅 전 psvm</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">        ServerBuilder sb = new ServerBuilder();</span><br><span class=\"line\">        sb.http(8080);</span><br><span class=\"line\">  </span><br><span class=\"line\">        sb.service(<span class=\"string\">\"/hello\"</span>, (ctx, res) -&gt;</span><br><span class=\"line\">            HttpResponse.of(</span><br><span class=\"line\">                HttpStatus.OK,</span><br><span class=\"line\">                MediaType.HTML_UTF_8,</span><br><span class=\"line\">                <span class=\"string\">\"&lt;h1&gt;Hello Armeria...!&lt;/h1&gt;\"</span>));</span><br><span class=\"line\">  </span><br><span class=\"line\">        Server server = sb.build();</span><br><span class=\"line\">        CompletableFuture&lt;Void&gt; future = server.start();</span><br><span class=\"line\">        future.join();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"라우팅\"><a href=\"#라우팅\" class=\"headerlink\" title=\"라우팅\"></a>라우팅</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class CustomService &#123;</span><br><span class=\"line\">    @Get(<span class=\"string\">\"/\"</span>)</span><br><span class=\"line\">    public HttpResponse <span class=\"function\"><span class=\"title\">defaultMethod</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> HttpResponse.of(</span><br><span class=\"line\">            HttpStatus.OK,</span><br><span class=\"line\">            MediaType.HTML_UTF_8,</span><br><span class=\"line\">            <span class=\"string\">\"&lt;h1&gt;Hello world...!&lt;/h1&gt;\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    @Get(<span class=\"string\">\"/page/:text\"</span>) // nest.js, spring과 큰 차이없음.</span><br><span class=\"line\">    public HttpResponse methodB(@Param(<span class=\"string\">\"text\"</span>) String text) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> HttpResponse.of(</span><br><span class=\"line\">            HttpStatus.OK,</span><br><span class=\"line\">            MediaType.HTML_UTF_8,</span><br><span class=\"line\">            <span class=\"string\">\"&lt;h1&gt;Hello \"</span> + text + <span class=\"string\">\"...!&lt;/h1&gt;\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"라우팅-후-psvm\"><a href=\"#라우팅-후-psvm\" class=\"headerlink\" title=\"라우팅 후 psvm\"></a>라우팅 후 psvm</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">        ServerBuilder sb = new ServerBuilder();</span><br><span class=\"line\">        sb.http(8080);</span><br><span class=\"line\">  </span><br><span class=\"line\">        sb.annotatedService(new CustomService()); //여기서 호출!</span><br><span class=\"line\">  </span><br><span class=\"line\">        Server server = sb.build();</span><br><span class=\"line\">        CompletableFuture&lt;Void&gt; future = server.start();</span><br><span class=\"line\">        future.join();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></div>\n\n\n<h2 id=\"참고자료\"><a href=\"#참고자료\" class=\"headerlink\" title=\"참고자료\"></a>참고자료</h2><h3 id=\"gRPC-란\"><a href=\"#gRPC-란\" class=\"headerlink\" title=\"gRPC 란?\"></a>gRPC 란?</h3><ul>\n<li>RPC는 원격 프로시저 요청(Remote Procedure Call)의 약자로 gRPC는 Google에서 개발.</li>\n<li>통신 프로토콜 : HTTP/2</li>\n<li>표현언어 : 프로토콜 버퍼<br>xml 이나 json은 사람이 읽을 수 있게 직렬화 하지만, 프로토콜 버퍼는 이진바이너리로 직렬화 =&gt; 매우 빨라짐</li>\n<li>특징<br>로드밸런싱, 인증, 양방향 스트리밍 및 흐름 제어, 바인딩 차단 또는 차단 해제 및 취소 및 시간 초과 기능<br>클라이언트에서 서버의 API호출을 메소드처럼 직접 할 수 있음 (MSA에서 강점인 듯?)<br>gRPC 클라이언트는 서버의 메소드의 stub을 작성<br>gRPC 서버는 인터페이스 제공</li>\n</ul>\n<h3 id=\"Thrift-란\"><a href=\"#Thrift-란\" class=\"headerlink\" title=\"Thrift 란?\"></a>Thrift 란?</h3><ul>\n<li>다양한 언어를 지원하는 RPC 프레임워크, facebook 에서 개발</li>\n<li>데이타 타입 및 서비스 인터페이스를 간단한 정의 파일안에 제공하며, 컴파일러는 다른 언어간에 통신할 수 있는 RPC 클라이언트/서버의 코드를 생성</li>\n<li>특징<br>Sync, Async Server API 제공<br>서블릿 제공(org.apache.thrift.server.TServlet)<br>멀티쓰레드 지원 (org.apache.thrift.server.ThreadPoolServer : worker thread 지정)</li>\n</ul>\n","text":"서문요즘 대세인 아르메리아(Armeria)에 대해 간단히 알아보자.오픈소스 기반의 자바 HTTP/2 마이크로서비스 프레임워크Netty  개발자와 Line에서 사용중공식홈페이지(https://armeria.dev/)본문1. Armeria?Asynchro","link":"","raw":null,"photos":[],"categories":[{"name":"aws","slug":"aws","count":19,"path":"api/categories/aws.json"}],"tags":[{"name":"AWS","slug":"AWS","count":20,"path":"api/tags/AWS.json"},{"name":"Cloud9","slug":"Cloud9","count":2,"path":"api/tags/Cloud9.json"},{"name":"Web","slug":"Web","count":2,"path":"api/tags/Web.json"},{"name":"Debugger","slug":"Debugger","count":2,"path":"api/tags/Debugger.json"},{"name":"python","slug":"python","count":4,"path":"api/tags/python.json"}]},{"title":"Jenkins vs Bamboo","slug":"Jenkins-Bamboo-CI-CD","date":"2021-02-09T05:53:44.000Z","updated":"2021-02-09T07:40:41.161Z","comments":true,"pin":null,"path":"api/articles/Jenkins-Bamboo-CI-CD.json","excerpt":"","keywords":null,"cover":null,"content":"<h2 id=\"서문\"><a href=\"#서문\" class=\"headerlink\" title=\"서문\"></a>서문</h2><ul>\n<li>Jenkins와 Bamboo라고 많이들 들어보았을 것이다. 빌드테스트 자동화와 배포자동화에 특화된 솔루션이며, Hudson사가 원조임.</li>\n<li>Hudson 은 오라클 인수후 지속적으로 사용자가 줄고 있는 듯 하고 위 두개 외에 솔루션들은 따로 조사하지 않았으므로 포스팅 하지 않음.</li>\n</ul>\n<h2 id=\"본문\"><a href=\"#본문\" class=\"headerlink\" title=\"본문\"></a>본문</h2><ul>\n<li>두 개의 솔루션에 대해 먼저 장점과 단점을 알고 가는 것이 좋을 것 같다.</li>\n</ul>\n<h3 id=\"1-Jenkins\"><a href=\"#1-Jenkins\" class=\"headerlink\" title=\"1. Jenkins\"></a>1. Jenkins</h3><h4 id=\"장점\"><a href=\"#장점\" class=\"headerlink\" title=\"장점\"></a>장점</h4><ol>\n<li>무료이고 Reference 및 사용자가 많고 정보가 많은 편이다. (openstack 의 CI 에도 적용되어 있다.- <a href=\"https://jenkins.openstack.org/\" target=\"_blank\" rel=\"noopener\">https://jenkins.openstack.org/</a>)</li>\n<li>Hudson core 개발자가 jenkins 를 시작했고 주요 플러그인 개발자도 jenkins 로 전환해서 개발 속도가 빠르고 플러그인 지원이 좋은 편이다.</li>\n<li>설치 및 사용이 간단하다. 실제로 maven 으로 build 가 구성되어 있다면 jenkins 설치후 project 만드는데 얼마 안 걸린다.</li>\n<li>Remote Access API 를 제공하므로 다른 솔루션에서 연계하여 기능 확장이 가능하다.</li>\n</ol>\n<h4 id=\"단점\"><a href=\"#단점\" class=\"headerlink\" title=\"단점\"></a>단점</h4><ol>\n<li>프로젝트 별 보안 및 권한 설정등이 불편하다. (bamboo 에 비해)</li>\n<li>JIRA나 redmine 등 Issue tracking 과 연계가 불편하거나 완벽하지 않다.</li>\n</ol>\n<h3 id=\"2-Jenkins\"><a href=\"#2-Jenkins\" class=\"headerlink\" title=\"2. Jenkins\"></a>2. Jenkins</h3><h4 id=\"장점-1\"><a href=\"#장점-1\" class=\"headerlink\" title=\"장점\"></a>장점</h4><ol>\n<li>손쉽고 직관적인 UI를 갖고 있고 상용 SW 에 걸맞게 예쁜 외양을 자랑한다.</li>\n<li>atlassian 제품군과 완벽한 통합 제공. JIRA 의 대쉬보드나 confluence의 Page에 bamboo build chart 를 붙일수도 있고 JIRA 의 특정 이슈와 관련된 build 내역을 조회하는 등 atlassian 제품을 기존에 사용하고 있다면 각 제품군을 통합해서 더욱 유기적으로 사용할 수 있다.</li>\n<li>MS의 Visual Studio, Mac OSX 의 XCode 등 Java 이외의 개발 환경을 지원한다. ( Visual Studio 지원은 아직 그리 잘 돌아가지 않고 복잡해서 시행착오를 좀 거쳐야 하고 써본 경험상 bamboo 에 붙이는건 그리 추천하지 않는다.)</li>\n<li>Jenkins 에 비해 프로젝트 권한 설정이나 분산 빌드가 아주 간편하다.</li>\n<li>Remote Access API 를 제공하므로 다른 솔루션에서 연계하여 기능 확장이 가능하다.</li>\n</ol>\n<h4 id=\"단점-1\"><a href=\"#단점-1\" class=\"headerlink\" title=\"단점\"></a>단점</h4><ol>\n<li>제법 비싼 비용이 발생한다.  (build 를 할수 있는 remote agent 수 따라 라이센스 비용이 책정되는데 5 remote agent 가 $2,200 이다. 1년후마다 매년 구입가의 50% subscription 비용 추가 발생.)</li>\n<li>Project, Plan, Stage, Task 의 개념이 복잡해서 익숙해지고 제대로 쓰려면 약간의 시간이 필요하다.</li>\n</ol>\n<h2 id=\"결론\"><a href=\"#결론\" class=\"headerlink\" title=\"결론\"></a>결론</h2><ul>\n<li>기존 atlassian 제품을 쓰고 있기에, Bamboo로 도입하기로 결정했다.</li>\n<li>Jenkins로 프로젝트를 구성하고 Bamboo로 Migration이 가능하기에 더 기능이 많은 Bamboo가 좋은 선택으로 보여진다.</li>\n<li>나는 짬이 안되므로 Bamboo 관리자 계정을 빌려 학습하였다.</li>\n</ul>\n","text":"서문Jenkins와 Bamboo라고 많이들 들어보았을 것이다. 빌드테스트 자동화와 배포자동화에 특화된 솔루션이며, Hudson사가 원조임.Hudson 은 오라클 인수후 지속적으로 사용자가 줄고 있는 듯 하고 위 두개 외에 솔루션들은 따로 조사하지 않았","link":"","raw":null,"photos":[],"categories":[{"name":"CICD","slug":"CICD","count":1,"path":"api/categories/CICD.json"}],"tags":[{"name":"CI","slug":"CI","count":1,"path":"api/tags/CI.json"},{"name":"CD","slug":"CD","count":1,"path":"api/tags/CD.json"},{"name":"Bamboo","slug":"Bamboo","count":1,"path":"api/tags/Bamboo.json"},{"name":"Jenkins","slug":"Jenkins","count":1,"path":"api/tags/Jenkins.json"}]},{"title":"MongoDB Compass Guide","slug":"MongoDB-Compass-Guide","date":"2021-02-09T05:29:14.000Z","updated":"2021-02-09T05:48:25.666Z","comments":true,"pin":null,"path":"api/articles/MongoDB-Compass-Guide.json","excerpt":"","keywords":null,"cover":"https://user-images.githubusercontent.com/56995911/107320066-515b7200-6ae3-11eb-8007-1266bbad72a9.png","content":"<h2 id=\"서문\"><a href=\"#서문\" class=\"headerlink\" title=\"서문\"></a>서문</h2><p>Document DB 사용을 원활하게 하기 위하여 MongoDB Compass를 활용해보기로 한다.<br>Studio 3T와 달리 무료이며 MongoDB에서 기본적으로 제공하는 툴이다.(<a href=\"https://www.mongodb.com/try/download/compass\" target=\"_blank\" rel=\"noopener\">https://www.mongodb.com/try/download/compass</a>)<br>연결설정방법을 가이드한다.<br>Collection을 생성하고 index 작업 및 CRUD 작업에 대하여 툴에서 사용하는 방법을 가이드한다.<br>모든 가이드의 출처는 <a href=\"https://docs.mongodb.com/compass/master/를\" target=\"_blank\" rel=\"noopener\">https://docs.mongodb.com/compass/master/를</a> 참고하여 작성하였다.</p>\n<h2 id=\"본문\"><a href=\"#본문\" class=\"headerlink\" title=\"본문\"></a>본문</h2><h3 id=\"1-시작\"><a href=\"#1-시작\" class=\"headerlink\" title=\"1. 시작\"></a>1. 시작</h3><p><a href=\"https://user-images.githubusercontent.com/56995911/107320066-515b7200-6ae3-11eb-8007-1266bbad72a9.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107320066-515b7200-6ae3-11eb-8007-1266bbad72a9.png\" alt=\"image\"></a></p>\n<ul>\n<li>URI를 통해 접속하는 방법이 Default로 나온다.</li>\n<li>URI는 앞서 설명한 Studio 3T에서 나오긴한다.</li>\n<li>URI를 쉽게 추출하고 싶다면 Studio 3T를 사용해야하며, 반드시 비밀번호 포함과 각종옵션 추가 체크를 해주어야 한다.</li>\n</ul>\n<h3 id=\"2-Connection-Setting-Step-by-Step\"><a href=\"#2-Connection-Setting-Step-by-Step\" class=\"headerlink\" title=\"2. Connection Setting(Step by Step)\"></a>2. Connection Setting(Step by Step)</h3><h4 id=\"1-Studio-3T-URI를-활용하는-방법\"><a href=\"#1-Studio-3T-URI를-활용하는-방법\" class=\"headerlink\" title=\"1) Studio 3T URI를 활용하는 방법\"></a>1) Studio 3T URI를 활용하는 방법</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><figcaption><span>3T URI</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongodb:&#x2F;&#x2F;administrator:##KDnetworkER1@docdb-2021-01-08-06-18-46.cluster-ccjhfbfchw3b.ap-northeast-2.docdb.amazonaws.com:27017&#x2F;admin?authSource&#x3D;admin&amp;connectTimeoutMS&#x3D;10000&amp;readPreference&#x3D;secondaryPreferred&amp;authMechanism&#x3D;SCRAM-SHA-1&amp;appname&#x3D;MongoDB%20Compass&amp;ssl&#x3D;true</span><br></pre></td></tr></table></figure></div>\n\n<h5 id=\"i-MongoDB-홈페이지에-나와있듯이-구조는-아래와-같다-https-docs-mongodb-com-manual-reference-connection-string\"><a href=\"#i-MongoDB-홈페이지에-나와있듯이-구조는-아래와-같다-https-docs-mongodb-com-manual-reference-connection-string\" class=\"headerlink\" title=\"i) MongoDB 홈페이지에 나와있듯이, 구조는 아래와 같다.(https://docs.mongodb.com/manual/reference/connection-string/)\"></a>i) MongoDB 홈페이지에 나와있듯이, 구조는 아래와 같다.(<a href=\"https://docs.mongodb.com/manual/reference/connection-string/\" target=\"_blank\" rel=\"noopener\">https://docs.mongodb.com/manual/reference/connection-string/</a>)</h5><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongodb://[username:password@]host1[:port1][,...hostN[:portN]][/[defaultauthdb][?options]]</span><br></pre></td></tr></table></figure></div>\n\n<h5 id=\"ii-완성된-URI를-Connect-위의-TextBox에-삽입한다\"><a href=\"#ii-완성된-URI를-Connect-위의-TextBox에-삽입한다\" class=\"headerlink\" title=\"ii) 완성된 URI를 Connect 위의 TextBox에 삽입한다.\"></a>ii) 완성된 URI를 Connect 위의 TextBox에 삽입한다.</h5><h5 id=\"iii-화면상단에-Fill-in-connection-fields-individually-를-선택한-뒤-상세-옵션설정을-한다\"><a href=\"#iii-화면상단에-Fill-in-connection-fields-individually-를-선택한-뒤-상세-옵션설정을-한다\" class=\"headerlink\" title=\"iii) 화면상단에 Fill in connection fields individually 를 선택한 뒤 상세 옵션설정을 한다.\"></a>iii) 화면상단에 Fill in connection fields individually 를 선택한 뒤 상세 옵션설정을 한다.</h5><h5 id=\"iv-URI를-통해-기본적인-Connection-옵션은-이미-채워져있음을-확인할-수-있다\"><a href=\"#iv-URI를-통해-기본적인-Connection-옵션은-이미-채워져있음을-확인할-수-있다\" class=\"headerlink\" title=\"iv) URI를 통해 기본적인 Connection 옵션은 이미 채워져있음을 확인할 수 있다.\"></a>iv) URI를 통해 기본적인 Connection 옵션은 이미 채워져있음을 확인할 수 있다.</h5><p><a href=\"https://user-images.githubusercontent.com/56995911/107320190-97b0d100-6ae3-11eb-8067-803c25ea900d.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107320190-97b0d100-6ae3-11eb-8067-803c25ea900d.png\" alt=\"image\"></a></p>\n<h5 id=\"v-SSL-SSH-설정부가-제일-중요하다-아래와-같이-설정해주도록-한다-SSH-Passphrase는-설정하지-않아도-된다\"><a href=\"#v-SSL-SSH-설정부가-제일-중요하다-아래와-같이-설정해주도록-한다-SSH-Passphrase는-설정하지-않아도-된다\" class=\"headerlink\" title=\"v) SSL, SSH 설정부가 제일 중요하다. 아래와 같이 설정해주도록 한다. (SSH Passphrase는 설정하지 않아도 된다)\"></a>v) SSL, SSH 설정부가 제일 중요하다. 아래와 같이 설정해주도록 한다. (SSH Passphrase는 설정하지 않아도 된다)</h5><p><a href=\"https://user-images.githubusercontent.com/56995911/107320230-aa2b0a80-6ae3-11eb-9b83-150b7c98c41f.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107320230-aa2b0a80-6ae3-11eb-9b83-150b7c98c41f.png\" alt=\"image\"></a></p>\n<h5 id=\"vi-접속이-완료됨을-확인할-수-있다\"><a href=\"#vi-접속이-완료됨을-확인할-수-있다\" class=\"headerlink\" title=\"vi) 접속이 완료됨을 확인할 수 있다.\"></a>vi) 접속이 완료됨을 확인할 수 있다.</h5><p><a href=\"https://user-images.githubusercontent.com/56995911/107320268-b8792680-6ae3-11eb-94c9-df61de612654.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107320268-b8792680-6ae3-11eb-94c9-df61de612654.png\" alt=\"image\"></a></p>\n<h4 id=\"2-수동입력방법-Studio-3T-에서-URI의-지원을-받을-수-없을-경우-사용\"><a href=\"#2-수동입력방법-Studio-3T-에서-URI의-지원을-받을-수-없을-경우-사용\" class=\"headerlink\" title=\"2) 수동입력방법(Studio 3T 에서 URI의 지원을 받을 수 없을 경우 사용)\"></a>2) 수동입력방법(Studio 3T 에서 URI의 지원을 받을 수 없을 경우 사용)</h4><h5 id=\"i-host-정보-입력\"><a href=\"#i-host-정보-입력\" class=\"headerlink\" title=\"i) host 정보 입력\"></a>i) host 정보 입력</h5><p><a href=\"https://user-images.githubusercontent.com/56995911/107320338-d9da1280-6ae3-11eb-8004-bd9aa916a146.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107320338-d9da1280-6ae3-11eb-8004-bd9aa916a146.png\" alt=\"image\"></a></p>\n<h5 id=\"ii-추가옵션-선택\"><a href=\"#ii-추가옵션-선택\" class=\"headerlink\" title=\"ii) 추가옵션 선택\"></a>ii) 추가옵션 선택</h5><p><a href=\"https://user-images.githubusercontent.com/56995911/107320375-e9595b80-6ae3-11eb-8228-8500160bb361.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107320375-e9595b80-6ae3-11eb-8228-8500160bb361.png\" alt=\"image\"></a></p>\n<h3 id=\"3-Database-생성\"><a href=\"#3-Database-생성\" class=\"headerlink\" title=\"3. Database 생성\"></a>3. Database 생성</h3><h4 id=\"1-UI로-생성하는-방법\"><a href=\"#1-UI로-생성하는-방법\" class=\"headerlink\" title=\"1) UI로 생성하는 방법\"></a>1) UI로 생성하는 방법</h4><p><a href=\"https://user-images.githubusercontent.com/56995911/107320410-fe35ef00-6ae3-11eb-9056-0d7f0acf3a00.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107320410-fe35ef00-6ae3-11eb-9056-0d7f0acf3a00.png\" alt=\"image\"></a><br><a href=\"https://user-images.githubusercontent.com/56995911/107320436-0857ed80-6ae4-11eb-81ec-bc996b81a4d3.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107320436-0857ed80-6ae4-11eb-81ec-bc996b81a4d3.png\" alt=\"image\"></a></p>\n<h4 id=\"2-프로그램으로-생성\"><a href=\"#2-프로그램으로-생성\" class=\"headerlink\" title=\"2) 프로그램으로 생성\"></a>2) 프로그램으로 생성</h4><h5 id=\"i-https-docs-aws-amazon-com-ko-kr-documentdb-latest-developerguide-connect-programmatically-html\"><a href=\"#i-https-docs-aws-amazon-com-ko-kr-documentdb-latest-developerguide-connect-programmatically-html\" class=\"headerlink\" title=\"i) https://docs.aws.amazon.com/ko_kr/documentdb/latest/developerguide/connect_programmatically.html\"></a>i) <a href=\"https://docs.aws.amazon.com/ko_kr/documentdb/latest/developerguide/connect_programmatically.html\" target=\"_blank\" rel=\"noopener\">https://docs.aws.amazon.com/ko_kr/documentdb/latest/developerguide/connect_programmatically.html</a></h5><h3 id=\"4-Collection-생성\"><a href=\"#4-Collection-생성\" class=\"headerlink\" title=\"4. Collection 생성\"></a>4. Collection 생성</h3><h4 id=\"1-UI로-생성하는-방법-1\"><a href=\"#1-UI로-생성하는-방법-1\" class=\"headerlink\" title=\"1) UI로 생성하는 방법\"></a>1) UI로 생성하는 방법</h4><h5 id=\"i-Capped-Collection은-컬렉션에-크기제한을-두는것이므로-예제상에서는-따로-제한을-두지-않음\"><a href=\"#i-Capped-Collection은-컬렉션에-크기제한을-두는것이므로-예제상에서는-따로-제한을-두지-않음\" class=\"headerlink\" title=\"i) Capped Collection은 컬렉션에 크기제한을 두는것이므로 예제상에서는 따로 제한을 두지 않음.\"></a>i) Capped Collection은 컬렉션에 크기제한을 두는것이므로 예제상에서는 따로 제한을 두지 않음.</h5><ul>\n<li>Use Custom Collection은 컬렉션 내에 프로파일들에 대한 각 형을 정해주는것. 예→ varchar(45), datetime, boolean 등..<br><a href=\"https://user-images.githubusercontent.com/56995911/107320539-363d3200-6ae4-11eb-85ad-5222a7e039bc.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107320539-363d3200-6ae4-11eb-85ad-5222a7e039bc.png\" alt=\"image\"></a><br><a href=\"https://user-images.githubusercontent.com/56995911/107320548-3f2e0380-6ae4-11eb-843a-ee8c7bde20e6.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107320548-3f2e0380-6ae4-11eb-843a-ee8c7bde20e6.png\" alt=\"image\"></a></li>\n</ul>\n<h4 id=\"2-프로그램으로-생성-1\"><a href=\"#2-프로그램으로-생성-1\" class=\"headerlink\" title=\"2) 프로그램으로 생성\"></a>2) 프로그램으로 생성</h4><h5 id=\"i-https-docs-aws-amazon-com-ko-kr-documentdb-latest-developerguide-connect-programmatically-html-1\"><a href=\"#i-https-docs-aws-amazon-com-ko-kr-documentdb-latest-developerguide-connect-programmatically-html-1\" class=\"headerlink\" title=\"i) https://docs.aws.amazon.com/ko_kr/documentdb/latest/developerguide/connect_programmatically.html\"></a>i) <a href=\"https://docs.aws.amazon.com/ko_kr/documentdb/latest/developerguide/connect_programmatically.html\" target=\"_blank\" rel=\"noopener\">https://docs.aws.amazon.com/ko_kr/documentdb/latest/developerguide/connect_programmatically.html</a></h5><h3 id=\"5-Indexing-생성\"><a href=\"#5-Indexing-생성\" class=\"headerlink\" title=\"5. Indexing 생성\"></a>5. Indexing 생성</h3><ul>\n<li>우선, Collection을 생성하면 기본으로 _id 라는 키값이 자동으로 잡힌다. </li>\n<li>아마도 DocumentDB내에서 자체 인덱싱을 위해 쓰는 것으로 보여지며, 이걸 생성안한다고 하면 Collection이 아예 생성되지 않는다.</li>\n</ul>\n<h4 id=\"1-UI로-생성하는-방법-2\"><a href=\"#1-UI로-생성하는-방법-2\" class=\"headerlink\" title=\"1) UI로 생성하는 방법\"></a>1) UI로 생성하는 방법</h4><h5 id=\"i-생성하고자-하는-Collection-마우스우클릭-→-Add-Index-Drop-Index-는-삭제\"><a href=\"#i-생성하고자-하는-Collection-마우스우클릭-→-Add-Index-Drop-Index-는-삭제\" class=\"headerlink\" title=\"i) 생성하고자 하는 Collection (마우스우클릭)→ (Add Index..)  [Drop Index 는 삭제]\"></a>i) 생성하고자 하는 Collection (마우스우클릭)→ (Add Index..)  [Drop Index 는 삭제]</h5><h4 id=\"2-Linux에서-Cmd로-생성하는-방법\"><a href=\"#2-Linux에서-Cmd로-생성하는-방법\" class=\"headerlink\" title=\"2) Linux에서 Cmd로 생성하는 방법\"></a>2) Linux에서 Cmd로 생성하는 방법</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rs0:PRIMARY&gt;    </span><br><span class=\"line\"> </span><br><span class=\"line\">db.[COLLECTION_NAME].createIndex(&#123;[KEY]:-1&#125;, &#123;background: <span class=\"literal\">true</span>&#125;); //1은 ascending, -1은 descending / background는 아래 설명</span><br></pre></td></tr></table></figure></div>\n\n<p><a href=\"https://user-images.githubusercontent.com/56995911/107320639-743a5600-6ae4-11eb-8a50-60fd25e705eb.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107320639-743a5600-6ae4-11eb-8a50-60fd25e705eb.png\" alt=\"image\"></a></p>\n<h3 id=\"6-CRUD\"><a href=\"#6-CRUD\" class=\"headerlink\" title=\"6. CRUD\"></a>6. CRUD</h3><h4 id=\"1-SELECT\"><a href=\"#1-SELECT\" class=\"headerlink\" title=\"1) SELECT\"></a>1) SELECT</h4><h5 id=\"i-UI를-통한-Select\"><a href=\"#i-UI를-통한-Select\" class=\"headerlink\" title=\"i) UI를 통한 Select\"></a>i) UI를 통한 Select</h5><p><a href=\"https://user-images.githubusercontent.com/56995911/107320692-8ddb9d80-6ae4-11eb-89d4-888e5ab4f634.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107320692-8ddb9d80-6ae4-11eb-89d4-888e5ab4f634.png\" alt=\"image\"></a></p>\n<ul>\n<li><p>Filter : 조건검색, SQL의 WHERE절</p>\n</li>\n<li><p>Project : 표시항목, SQL의 * 이나 컬럼이름(1: 표시, 0:생략)</p>\n</li>\n<li><p>Sort : 순서정렬, SQL의 ORDER BY(1:오름차순, -1:내림차순)</p>\n</li>\n<li><p>Max Time MS : Millisecond이며 Default 5000이 맞음. 60초까지 넣을 필욘 없지만 쿼리복잡도에 따라 시간이 더 필요할 경우 늘려주면됨.</p>\n</li>\n<li><p>Skip : 페이징처리 할때 좋음. (갯수에 따라 pass되고 나머지 것이 표시됨)</p>\n</li>\n<li><p>LIMIT : 출력하고자 하는 한계를 설정, MySQL의 LIMIT / MSSQL의 TOP 과 비슷한 기능.</p>\n</li>\n</ul>\n<h4 id=\"2-UPDATE\"><a href=\"#2-UPDATE\" class=\"headerlink\" title=\"2) UPDATE\"></a>2) UPDATE</h4><h5 id=\"i-다수-Update\"><a href=\"#i-다수-Update\" class=\"headerlink\" title=\"i) 다수 Update\"></a>i) 다수 Update</h5><ul>\n<li>업데이트 예정</li>\n</ul>\n<h5 id=\"ii-일부-Update\"><a href=\"#ii-일부-Update\" class=\"headerlink\" title=\"ii) 일부 Update\"></a>ii) 일부 Update</h5><p><a href=\"https://user-images.githubusercontent.com/56995911/107320766-aea3f300-6ae4-11eb-9b88-913be1391b2d.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107320766-aea3f300-6ae4-11eb-9b88-913be1391b2d.png\" alt=\"image\"></a></p>\n<ul>\n<li>수정하고자 하는 행을 더블클릭만 하고 Update 버튼으로 적용하면 된다.</li>\n</ul>\n<h4 id=\"3-INSERT\"><a href=\"#3-INSERT\" class=\"headerlink\" title=\"3) INSERT\"></a>3) INSERT</h4><h5 id=\"i-다수-Insert\"><a href=\"#i-다수-Insert\" class=\"headerlink\" title=\"i) 다수 Insert\"></a>i) 다수 Insert</h5><p><a href=\"https://user-images.githubusercontent.com/56995911/107320816-c67b7700-6ae4-11eb-90fa-381795b739c2.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107320816-c67b7700-6ae4-11eb-90fa-381795b739c2.png\" alt=\"image\"></a></p>\n<ul>\n<li>JSON File을 만들어서 동시에 Insert 시킬 수 있음.(Json Array)</li>\n</ul>\n<h5 id=\"ii-단일-Insert\"><a href=\"#ii-단일-Insert\" class=\"headerlink\" title=\"ii) 단일 Insert\"></a>ii) 단일 Insert</h5><p><a href=\"https://user-images.githubusercontent.com/56995911/107320838-d7c48380-6ae4-11eb-8376-5ab019f2913a.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107320838-d7c48380-6ae4-11eb-8376-5ab019f2913a.png\" alt=\"image\"></a></p>\n<h4 id=\"4-DELETE\"><a href=\"#4-DELETE\" class=\"headerlink\" title=\"4) DELETE\"></a>4) DELETE</h4><h5 id=\"i-일부-Delete\"><a href=\"#i-일부-Delete\" class=\"headerlink\" title=\"i) 일부 Delete\"></a>i) 일부 Delete</h5><p><a href=\"https://user-images.githubusercontent.com/56995911/107320881-ee6ada80-6ae4-11eb-829a-26a9eaabaa32.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107320881-ee6ada80-6ae4-11eb-829a-26a9eaabaa32.png\" alt=\"image\"></a></p>\n","text":"서문Document DB 사용을 원활하게 하기 위하여 MongoDB Compass를 활용해보기로 한다.<br>Studio 3T와 달리 무료이며 MongoDB에서 기본적으로 제공하는 툴이다.(https://www.mongodb.com/try/downlo","link":"","raw":null,"photos":[],"categories":[{"name":"AWS","slug":"AWS","count":3,"path":"api/categories/AWS.json"}],"tags":[{"name":"Document DB","slug":"Document-DB","count":3,"path":"api/tags/Document-DB.json"},{"name":"Mongo","slug":"Mongo","count":3,"path":"api/tags/Mongo.json"}]},{"title":"Studio 3T Guide","slug":"Studio-3T-Guide","date":"2021-01-12T03:45:15.000Z","updated":"2021-02-09T05:52:37.650Z","comments":true,"pin":null,"path":"api/articles/Studio-3T-Guide.json","excerpt":"","keywords":null,"cover":"https://user-images.githubusercontent.com/56995911/107318394-09871b80-6ae0-11eb-854a-cad27c7a6b0e.png","content":"<h2 id=\"서문\"><a href=\"#서문\" class=\"headerlink\" title=\"서문\"></a>서문</h2><ul>\n<li>Document DB 사용을 원활하게 하기 위하여 Studio 3T를 활용해보기로 한다.</li>\n<li>우선, 해당 툴은 유료툴인데 돈이 아깝지 않은 성능을 보여준다.</li>\n<li>Collection을 생성하고 index 작업 및 CRUD 작업에 대하여 툴에서 사용하는 방법과 Back-End에서 사용하는 법을 정의한다.</li>\n</ul>\n<h2 id=\"본문\"><a href=\"#본문\" class=\"headerlink\" title=\"본문\"></a>본문</h2><h3 id=\"1-시작\"><a href=\"#1-시작\" class=\"headerlink\" title=\"1. 시작\"></a>1. 시작</h3><p><a href=\"https://user-images.githubusercontent.com/56995911/107318394-09871b80-6ae0-11eb-854a-cad27c7a6b0e.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107318394-09871b80-6ae0-11eb-854a-cad27c7a6b0e.png\" alt=\"image\"></a></p>\n<p><a href=\"https://user-images.githubusercontent.com/56995911/107318424-173ca100-6ae0-11eb-8645-27c3613ba3c7.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107318424-173ca100-6ae0-11eb-8645-27c3613ba3c7.png\" alt=\"image\"></a></p>\n<ul>\n<li>Connect 로 해당 DB접속</li>\n</ul>\n<h3 id=\"2-Database-생성\"><a href=\"#2-Database-생성\" class=\"headerlink\" title=\"2. Database 생성\"></a>2. Database 생성</h3><h4 id=\"1-UI로-생성하는-방법\"><a href=\"#1-UI로-생성하는-방법\" class=\"headerlink\" title=\"1) UI로 생성하는 방법\"></a>1) UI로 생성하는 방법</h4><ul>\n<li>i) replica set으로 보이는 전체 데이터베이스 (마우스우클릭)→ (Add Database)</li>\n</ul>\n<h4 id=\"2-Linux에서-Cmd로-생성하는-방법\"><a href=\"#2-Linux에서-Cmd로-생성하는-방법\" class=\"headerlink\" title=\"2) Linux에서 Cmd로 생성하는 방법\"></a>2) Linux에서 Cmd로 생성하는 방법</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rs0:PRIMARY&gt;    </span><br><span class=\"line\"> </span><br><span class=\"line\">show dbs                            //Database 목록 확인용</span><br><span class=\"line\">use [DATABASE_NAME]                 //데이터베이스 사용or생성</span><br><span class=\"line\">switched to db [DATABASE_NAME]      //데이터베이스를 상대로 변경</span><br><span class=\"line\">db.runCommand( &#123; serverStatus: 1 &#125;) //데이터베이스 상태확인</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"3-프로그램으로-생성\"><a href=\"#3-프로그램으로-생성\" class=\"headerlink\" title=\"3) 프로그램으로 생성\"></a>3) 프로그램으로 생성</h4><ul>\n<li>i) <a href=\"https://docs.aws.amazon.com/ko_kr/documentdb/latest/developerguide/connect_programmatically.html\" target=\"_blank\" rel=\"noopener\">https://docs.aws.amazon.com/ko_kr/documentdb/latest/developerguide/connect_programmatically.html</a></li>\n</ul>\n<h3 id=\"3-Collection-생성\"><a href=\"#3-Collection-생성\" class=\"headerlink\" title=\"3. Collection 생성\"></a>3. Collection 생성</h3><h4 id=\"1-UI로-생성하는-방법-1\"><a href=\"#1-UI로-생성하는-방법-1\" class=\"headerlink\" title=\"1) UI로 생성하는 방법\"></a>1) UI로 생성하는 방법</h4><ul>\n<li>i) 폴더모양의 Collections를 (마우스우클릭)→ (Add Collection)</li>\n</ul>\n<h4 id=\"2-Linux에서-Cmd로-생성하는-방법-1\"><a href=\"#2-Linux에서-Cmd로-생성하는-방법-1\" class=\"headerlink\" title=\"2) Linux에서 Cmd로 생성하는 방법\"></a>2) Linux에서 Cmd로 생성하는 방법</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rs0:PRIMARY&gt;    </span><br><span class=\"line\"> </span><br><span class=\"line\">db.[COLLECTION_NAME]</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"3-프로그램으로-생성-1\"><a href=\"#3-프로그램으로-생성-1\" class=\"headerlink\" title=\"3) 프로그램으로 생성\"></a>3) 프로그램으로 생성</h4><ul>\n<li>i) <a href=\"https://docs.aws.amazon.com/ko_kr/documentdb/latest/developerguide/connect_programmatically.html\" target=\"_blank\" rel=\"noopener\">https://docs.aws.amazon.com/ko_kr/documentdb/latest/developerguide/connect_programmatically.html</a></li>\n</ul>\n<h3 id=\"4-Indexing-생성\"><a href=\"#4-Indexing-생성\" class=\"headerlink\" title=\"4. Indexing 생성\"></a>4. Indexing 생성</h3><ul>\n<li>우선, Collection을 생성하면 기본으로 _id 라는 키값이 자동으로 잡힌다. </li>\n<li>아마도 DocumentDB내에서 자체 인덱싱을 위해 쓰는 것으로 보여지며, 이걸 생성안한다고 하면 Collection이 아예 생성되지 않는다.</li>\n</ul>\n<h4 id=\"1-UI로-생성하는-방법-2\"><a href=\"#1-UI로-생성하는-방법-2\" class=\"headerlink\" title=\"1) UI로 생성하는 방법\"></a>1) UI로 생성하는 방법</h4><ul>\n<li>i) 생성하고자 하는 Collection (마우스우클릭)→ (Add Index..)  [Drop Index 는 삭제]</li>\n</ul>\n<h4 id=\"2-Linux에서-Cmd로-생성하는-방법-2\"><a href=\"#2-Linux에서-Cmd로-생성하는-방법-2\" class=\"headerlink\" title=\"2) Linux에서 Cmd로 생성하는 방법\"></a>2) Linux에서 Cmd로 생성하는 방법</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rs0:PRIMARY&gt;    </span><br><span class=\"line\"> </span><br><span class=\"line\">db.[COLLECTION_NAME].createIndex(&#123;[KEY]:-1&#125;, &#123;background: <span class=\"literal\">true</span>&#125;); //1은 ascending, -1은 descending / background는 아래 설명</span><br></pre></td></tr></table></figure></div>\n\n<p><a href=\"(https://user-images.githubusercontent.com/56995911/107318654-97fb9d00-6ae0-11eb-8a56-6f2921e6a40d.png)\"><img src=\"https://user-images.githubusercontent.com/56995911/107318654-97fb9d00-6ae0-11eb-8a56-6f2921e6a40d.png\" alt=\"image\"></a></p>\n<h3 id=\"5-CRUD\"><a href=\"#5-CRUD\" class=\"headerlink\" title=\"5. CRUD\"></a>5. CRUD</h3><h4 id=\"1-SELECT\"><a href=\"#1-SELECT\" class=\"headerlink\" title=\"1) SELECT\"></a>1) SELECT</h4><h5 id=\"i-UI를-통한-Select\"><a href=\"#i-UI를-통한-Select\" class=\"headerlink\" title=\"i) UI를 통한 Select\"></a>i) UI를 통한 Select</h5><p><a href=\"https://user-images.githubusercontent.com/56995911/107318707-b2ce1180-6ae0-11eb-8ff8-d01453b8f7cb.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107318707-b2ce1180-6ae0-11eb-8ff8-d01453b8f7cb.png\" alt=\"image\"></a><br><a href=\"https://user-images.githubusercontent.com/56995911/107318732-c6797800-6ae0-11eb-88df-97fc6d6fe3dc.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107318732-c6797800-6ae0-11eb-88df-97fc6d6fe3dc.png\" alt=\"image\"></a></p>\n<ul>\n<li>MongoDB와 같은 Docuent성 NoSQL을 처음 쓴다면, UI로 자동완성 시켜주는 쿼리메이커가 유용히 쓰일 수 있다.</li>\n<li>또한, Query Code탭을 통해 각종언어에 따른 예제를 만들어낼 수 있다.(실제 구동이 된다)</li>\n<li>Function 기반 Call에 익숙치 않다면, SQL 탭에서 기존에 쓰던 Select 문을 통해 자동완성 된 코드를 받아볼 수 있다.</li>\n</ul>\n<p><a href=\"https://user-images.githubusercontent.com/56995911/107318761-d5f8c100-6ae0-11eb-9527-a57f7fd7b190.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107318761-d5f8c100-6ae0-11eb-9527-a57f7fd7b190.png\" alt=\"image\"></a></p>\n<h5 id=\"ii-쿼리Function을-통한-Select\"><a href=\"#ii-쿼리Function을-통한-Select\" class=\"headerlink\" title=\"ii) 쿼리Function을 통한 Select\"></a>ii) 쿼리Function을 통한 Select</h5><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rs0:PRIMARY&gt;    </span><br><span class=\"line\">// 전체 Select</span><br><span class=\"line\">db.[COLLECTION_NAME].find();</span><br><span class=\"line\"> </span><br><span class=\"line\">// 조건 Select</span><br><span class=\"line\">db.[COLLECTION_NAME].find(&#123;<span class=\"string\">'name'</span>:<span class=\"string\">'Frank'</span>&#125;);</span><br><span class=\"line\">db.[COLLECTION_NAME].find(&#123;<span class=\"string\">'status'</span>:&#123;<span class=\"variable\">$in</span>:[<span class=\"string\">'active'</span>]&#125;&#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">// 조건+옵션</span><br><span class=\"line\">// https://docs.mongodb.com/manual/reference/method/</span><br><span class=\"line\">db.getCollection(<span class=\"string\">\"profiles\"</span>).find(&#123;<span class=\"string\">\"status\"</span> : <span class=\"string\">\"active\"</span>&#125;).skip(1).<span class=\"built_in\">limit</span>(1).pretty();</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"2-UPDATE\"><a href=\"#2-UPDATE\" class=\"headerlink\" title=\"2) UPDATE\"></a>2) UPDATE</h4><h5 id=\"i-다수-Update\"><a href=\"#i-다수-Update\" class=\"headerlink\" title=\"i) 다수 Update\"></a>i) 다수 Update</h5><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rs0:PRIMARY&gt;    </span><br><span class=\"line\">// nice컬럼과 meet 컬럼에 to,you 인 값을 포함하고 있는 document는 전부 meet컬럼을 me로 수정.</span><br><span class=\"line\">db.[COLLECTION_NAME].findAndModify(&#123;query:&#123;nice:<span class=\"string\">\"to\"</span>,meet:<span class=\"string\">\"you\"</span>&#125;,update:&#123;<span class=\"variable\">$set</span>:&#123;meet:<span class=\"string\">\"me\"</span>&#125;&#125;, upsert:<span class=\"literal\">true</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">// 어떤컬럼이건 상관없이 meet컬럼을 모두 me로 업데이트</span><br><span class=\"line\">db.[COLLECTION_NAME].findAndModify(&#123;query:&#123;&#125;,update:&#123;<span class=\"variable\">$set</span>:&#123;meet:<span class=\"string\">\"me\"</span>&#125;&#125;, upsert:<span class=\"literal\">true</span>);</span><br></pre></td></tr></table></figure></div>\n\n<h5 id=\"ii-일부-Update\"><a href=\"#ii-일부-Update\" class=\"headerlink\" title=\"ii) 일부 Update\"></a>ii) 일부 Update</h5><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rs0:PRIMARY&gt;    </span><br><span class=\"line\">// nice컬럼과 meet 컬럼에 to,you 인 값을 포함하고 있는 document는 전부 meet컬럼을 me로 수정.</span><br><span class=\"line\">db.[COLLECTION_NAME].findAndModify(&#123;query:&#123;nice:<span class=\"string\">\"to\"</span>,meet:<span class=\"string\">\"you\"</span>&#125;,update:&#123;<span class=\"variable\">$set</span>:&#123;meet:<span class=\"string\">\"me\"</span>&#125;&#125;, upsert:<span class=\"literal\">true</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">// status 가 active이면서 name이 Karen일 경우 status를 inactive로 변경</span><br><span class=\"line\">db.[COLLECTION_NAME].findOneAndUpdate(&#123;status : <span class=\"string\">'active'</span>, name:<span class=\"string\">'Karen'</span>&#125;, &#123;<span class=\"variable\">$set</span>:&#123;status:<span class=\"string\">'inactive'</span>&#125;&#125;);</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"3-INSERT\"><a href=\"#3-INSERT\" class=\"headerlink\" title=\"3) INSERT\"></a>3) INSERT</h4><h5 id=\"i-단일-Insert\"><a href=\"#i-단일-Insert\" class=\"headerlink\" title=\"i) 단일 Insert\"></a>i) 단일 Insert</h5><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rs0:PRIMARY&gt;    </span><br><span class=\"line\"> </span><br><span class=\"line\">db.[COLLECTION_NAME].insert(&#123;<span class=\"string\">\"nice\"</span>:<span class=\"string\">\"to\"</span>,<span class=\"string\">\"meet\"</span>:<span class=\"string\">\"you\"</span>&#125;);</span><br></pre></td></tr></table></figure></div>\n\n<h5 id=\"ii-다수-Insert\"><a href=\"#ii-다수-Insert\" class=\"headerlink\" title=\"ii) 다수 Insert\"></a>ii) 다수 Insert</h5><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rs0:PRIMARY&gt;    </span><br><span class=\"line\"> </span><br><span class=\"line\">db.[COLLECTION_NAME].insert([&#123;<span class=\"string\">\"nice\"</span>:<span class=\"string\">\"to\"</span>,<span class=\"string\">\"meet\"</span>:<span class=\"string\">\"you\"</span>&#125;, &#123;..........&#125;]);</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"4-DELETE\"><a href=\"#4-DELETE\" class=\"headerlink\" title=\"4) DELETE\"></a>4) DELETE</h4><h5 id=\"i-전체-Delete\"><a href=\"#i-전체-Delete\" class=\"headerlink\" title=\"i) 전체 Delete\"></a>i) 전체 Delete</h5><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rs0:PRIMARY&gt;    </span><br><span class=\"line\"> </span><br><span class=\"line\">db.[COLLECTION_NAME].remove( &#123; &#125; )</span><br></pre></td></tr></table></figure></div>\n\n<h5 id=\"ii-조건-Delete\"><a href=\"#ii-조건-Delete\" class=\"headerlink\" title=\"ii) 조건 Delete\"></a>ii) 조건 Delete</h5><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rs0:PRIMARY&gt;    </span><br><span class=\"line\"> </span><br><span class=\"line\">//1개의 조건</span><br><span class=\"line\">db.[COLLECTION_NAME].remove( &#123; name: <span class=\"string\">\"Frank\"</span> &#125; );</span><br><span class=\"line\"> </span><br><span class=\"line\">//2개 이상 조건</span><br><span class=\"line\">db.[COLLECTION_NAME].remove( &#123; nice : <span class=\"string\">\"to\"</span>, meet : <span class=\"string\">\"you\"</span>&#125; );</span><br></pre></td></tr></table></figure></div>\n","text":"서문Document DB 사용을 원활하게 하기 위하여 Studio 3T를 활용해보기로 한다.우선, 해당 툴은 유료툴인데 돈이 아깝지 않은 성능을 보여준다.Collection을 생성하고 index 작업 및 CRUD 작업에 대하여 툴에서 사용하는 방법과 ","link":"","raw":null,"photos":[],"categories":[{"name":"AWS","slug":"AWS","count":3,"path":"api/categories/AWS.json"}],"tags":[{"name":"Document DB","slug":"Document-DB","count":3,"path":"api/tags/Document-DB.json"},{"name":"Mongo","slug":"Mongo","count":3,"path":"api/tags/Mongo.json"}]}]}