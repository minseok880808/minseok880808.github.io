{"total":28,"pageSize":10,"pageCount":3,"data":[{"title":"Armeria(공부중)","slug":"Armeria","date":"2021-02-18T07:04:21.000Z","updated":"2021-02-18T02:52:34.484Z","comments":true,"pin":null,"path":"api/articles/Armeria.json","excerpt":"","keywords":null,"cover":null,"content":"<h2 id=\"서문\"><a href=\"#서문\" class=\"headerlink\" title=\"서문\"></a>서문</h2><ul>\n<li>요즘 대세인 아르메리아(Armeria)에 대해 간단히 알아보자.</li>\n<li>오픈소스 기반의 자바 HTTP/2 마이크로서비스 프레임워크</li>\n<li>Netty  개발자와 Line에서 사용중</li>\n<li>공식홈페이지(<a href=\"https://armeria.dev/\" target=\"_blank\" rel=\"noopener\">https://armeria.dev/</a>)</li>\n</ul>\n<h2 id=\"본문\"><a href=\"#본문\" class=\"headerlink\" title=\"본문\"></a>본문</h2><h3 id=\"1-Armeria\"><a href=\"#1-Armeria\" class=\"headerlink\" title=\"1. Armeria?\"></a>1. Armeria?</h3><ul>\n<li>Asynchronous RPC/REST library built on top of Java 8, Netty, HTTP/2, Thrift and gRPC</li>\n<li>고성능 비동기 마이크로서비스를 손쉽게 제작할 수 있음</li>\n<li>단일 어플리케이션에서 단일 포트로 HTTP, gRPC, Thrift를 동시에 지원<br>spring webflux는 서블릿엔진이 아니기 때문에 thrift의 Tservlet을 사용할 수 없음, 별도로 서버구현체를 만들어야해서 포트 소모</li>\n<li>gRPC, Thrift를 브라우저기반에서 테스트 가능</li>\n<li>cf. 사용처 : zipkin, slack, twitter, kakaoPay 등</li>\n</ul>\n<h3 id=\"2-설정방법\"><a href=\"#2-설정방법\" class=\"headerlink\" title=\"2. 설정방법\"></a>2. 설정방법</h3><h4 id=\"Gradle\"><a href=\"#Gradle\" class=\"headerlink\" title=\"Gradle\"></a>Gradle</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    ....</span><br><span class=\"line\">    compile <span class=\"string\">\"com.linecorp.armeria:armeria:0.68.2\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"라우팅-전-psvm\"><a href=\"#라우팅-전-psvm\" class=\"headerlink\" title=\"라우팅 전 psvm\"></a>라우팅 전 psvm</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">        ServerBuilder sb = new ServerBuilder();</span><br><span class=\"line\">        sb.http(8080);</span><br><span class=\"line\">  </span><br><span class=\"line\">        sb.service(<span class=\"string\">\"/hello\"</span>, (ctx, res) -&gt;</span><br><span class=\"line\">            HttpResponse.of(</span><br><span class=\"line\">                HttpStatus.OK,</span><br><span class=\"line\">                MediaType.HTML_UTF_8,</span><br><span class=\"line\">                <span class=\"string\">\"&lt;h1&gt;Hello Armeria...!&lt;/h1&gt;\"</span>));</span><br><span class=\"line\">  </span><br><span class=\"line\">        Server server = sb.build();</span><br><span class=\"line\">        CompletableFuture&lt;Void&gt; future = server.start();</span><br><span class=\"line\">        future.join();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"라우팅\"><a href=\"#라우팅\" class=\"headerlink\" title=\"라우팅\"></a>라우팅</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class CustomService &#123;</span><br><span class=\"line\">    @Get(<span class=\"string\">\"/\"</span>)</span><br><span class=\"line\">    public HttpResponse <span class=\"function\"><span class=\"title\">defaultMethod</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> HttpResponse.of(</span><br><span class=\"line\">            HttpStatus.OK,</span><br><span class=\"line\">            MediaType.HTML_UTF_8,</span><br><span class=\"line\">            <span class=\"string\">\"&lt;h1&gt;Hello world...!&lt;/h1&gt;\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    @Get(<span class=\"string\">\"/page/:text\"</span>) // nest.js, spring과 큰 차이없음.</span><br><span class=\"line\">    public HttpResponse methodB(@Param(<span class=\"string\">\"text\"</span>) String text) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> HttpResponse.of(</span><br><span class=\"line\">            HttpStatus.OK,</span><br><span class=\"line\">            MediaType.HTML_UTF_8,</span><br><span class=\"line\">            <span class=\"string\">\"&lt;h1&gt;Hello \"</span> + text + <span class=\"string\">\"...!&lt;/h1&gt;\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"라우팅-후-psvm\"><a href=\"#라우팅-후-psvm\" class=\"headerlink\" title=\"라우팅 후 psvm\"></a>라우팅 후 psvm</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">        ServerBuilder sb = new ServerBuilder();</span><br><span class=\"line\">        sb.http(8080);</span><br><span class=\"line\">  </span><br><span class=\"line\">        sb.annotatedService(new CustomService()); //여기서 호출!</span><br><span class=\"line\">  </span><br><span class=\"line\">        Server server = sb.build();</span><br><span class=\"line\">        CompletableFuture&lt;Void&gt; future = server.start();</span><br><span class=\"line\">        future.join();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></div>\n\n\n<h2 id=\"참고자료\"><a href=\"#참고자료\" class=\"headerlink\" title=\"참고자료\"></a>참고자료</h2><h3 id=\"gRPC-란\"><a href=\"#gRPC-란\" class=\"headerlink\" title=\"gRPC 란?\"></a>gRPC 란?</h3><ul>\n<li>RPC는 원격 프로시저 요청(Remote Procedure Call)의 약자로 gRPC는 Google에서 개발.</li>\n<li>통신 프로토콜 : HTTP/2</li>\n<li>표현언어 : 프로토콜 버퍼<br>xml 이나 json은 사람이 읽을 수 있게 직렬화 하지만, 프로토콜 버퍼는 이진바이너리로 직렬화 =&gt; 매우 빨라짐</li>\n<li>특징<br>로드밸런싱, 인증, 양방향 스트리밍 및 흐름 제어, 바인딩 차단 또는 차단 해제 및 취소 및 시간 초과 기능<br>클라이언트에서 서버의 API호출을 메소드처럼 직접 할 수 있음 (MSA에서 강점인 듯?)<br>gRPC 클라이언트는 서버의 메소드의 stub을 작성<br>gRPC 서버는 인터페이스 제공</li>\n</ul>\n<h3 id=\"Thrift-란\"><a href=\"#Thrift-란\" class=\"headerlink\" title=\"Thrift 란?\"></a>Thrift 란?</h3><ul>\n<li>다양한 언어를 지원하는 RPC 프레임워크, facebook 에서 개발</li>\n<li>데이타 타입 및 서비스 인터페이스를 간단한 정의 파일안에 제공하며, 컴파일러는 다른 언어간에 통신할 수 있는 RPC 클라이언트/서버의 코드를 생성</li>\n<li>특징<br>Sync, Async Server API 제공<br>서블릿 제공(org.apache.thrift.server.TServlet)<br>멀티쓰레드 지원 (org.apache.thrift.server.ThreadPoolServer : worker thread 지정)</li>\n</ul>\n","text":"서문요즘 대세인 아르메리아(Armeria)에 대해 간단히 알아보자.오픈소스 기반의 자바 HTTP/2 마이크로서비스 프레임워크Netty  개발자와 Line에서 사용중공식홈페이지(https://armeria.dev/)본문1. Armeria?Asynchro","link":"","raw":null,"photos":[],"categories":[{"name":"aws","slug":"aws","count":13,"path":"api/categories/aws.json"}],"tags":[{"name":"AWS","slug":"AWS","count":15,"path":"api/tags/AWS.json"},{"name":"Cloud9","slug":"Cloud9","count":2,"path":"api/tags/Cloud9.json"},{"name":"Web","slug":"Web","count":2,"path":"api/tags/Web.json"},{"name":"Debugger","slug":"Debugger","count":2,"path":"api/tags/Debugger.json"},{"name":"python","slug":"python","count":4,"path":"api/tags/python.json"}]},{"title":"Jenkins vs Bamboo","slug":"Jenkins-Bamboo-CI-CD","date":"2021-02-09T05:53:44.000Z","updated":"2021-02-09T07:40:41.161Z","comments":true,"pin":null,"path":"api/articles/Jenkins-Bamboo-CI-CD.json","excerpt":"","keywords":null,"cover":null,"content":"<h2 id=\"서문\"><a href=\"#서문\" class=\"headerlink\" title=\"서문\"></a>서문</h2><ul>\n<li>Jenkins와 Bamboo라고 많이들 들어보았을 것이다. 빌드테스트 자동화와 배포자동화에 특화된 솔루션이며, Hudson사가 원조임.</li>\n<li>Hudson 은 오라클 인수후 지속적으로 사용자가 줄고 있는 듯 하고 위 두개 외에 솔루션들은 따로 조사하지 않았으므로 포스팅 하지 않음.</li>\n</ul>\n<h2 id=\"본문\"><a href=\"#본문\" class=\"headerlink\" title=\"본문\"></a>본문</h2><ul>\n<li>두 개의 솔루션에 대해 먼저 장점과 단점을 알고 가는 것이 좋을 것 같다.</li>\n</ul>\n<h3 id=\"1-Jenkins\"><a href=\"#1-Jenkins\" class=\"headerlink\" title=\"1. Jenkins\"></a>1. Jenkins</h3><h4 id=\"장점\"><a href=\"#장점\" class=\"headerlink\" title=\"장점\"></a>장점</h4><ol>\n<li>무료이고 Reference 및 사용자가 많고 정보가 많은 편이다. (openstack 의 CI 에도 적용되어 있다.- <a href=\"https://jenkins.openstack.org/\" target=\"_blank\" rel=\"noopener\">https://jenkins.openstack.org/</a>)</li>\n<li>Hudson core 개발자가 jenkins 를 시작했고 주요 플러그인 개발자도 jenkins 로 전환해서 개발 속도가 빠르고 플러그인 지원이 좋은 편이다.</li>\n<li>설치 및 사용이 간단하다. 실제로 maven 으로 build 가 구성되어 있다면 jenkins 설치후 project 만드는데 얼마 안 걸린다.</li>\n<li>Remote Access API 를 제공하므로 다른 솔루션에서 연계하여 기능 확장이 가능하다.</li>\n</ol>\n<h4 id=\"단점\"><a href=\"#단점\" class=\"headerlink\" title=\"단점\"></a>단점</h4><ol>\n<li>프로젝트 별 보안 및 권한 설정등이 불편하다. (bamboo 에 비해)</li>\n<li>JIRA나 redmine 등 Issue tracking 과 연계가 불편하거나 완벽하지 않다.</li>\n</ol>\n<h3 id=\"2-Jenkins\"><a href=\"#2-Jenkins\" class=\"headerlink\" title=\"2. Jenkins\"></a>2. Jenkins</h3><h4 id=\"장점-1\"><a href=\"#장점-1\" class=\"headerlink\" title=\"장점\"></a>장점</h4><ol>\n<li>손쉽고 직관적인 UI를 갖고 있고 상용 SW 에 걸맞게 예쁜 외양을 자랑한다.</li>\n<li>atlassian 제품군과 완벽한 통합 제공. JIRA 의 대쉬보드나 confluence의 Page에 bamboo build chart 를 붙일수도 있고 JIRA 의 특정 이슈와 관련된 build 내역을 조회하는 등 atlassian 제품을 기존에 사용하고 있다면 각 제품군을 통합해서 더욱 유기적으로 사용할 수 있다.</li>\n<li>MS의 Visual Studio, Mac OSX 의 XCode 등 Java 이외의 개발 환경을 지원한다. ( Visual Studio 지원은 아직 그리 잘 돌아가지 않고 복잡해서 시행착오를 좀 거쳐야 하고 써본 경험상 bamboo 에 붙이는건 그리 추천하지 않는다.)</li>\n<li>Jenkins 에 비해 프로젝트 권한 설정이나 분산 빌드가 아주 간편하다.</li>\n<li>Remote Access API 를 제공하므로 다른 솔루션에서 연계하여 기능 확장이 가능하다.</li>\n</ol>\n<h4 id=\"단점-1\"><a href=\"#단점-1\" class=\"headerlink\" title=\"단점\"></a>단점</h4><ol>\n<li>제법 비싼 비용이 발생한다.  (build 를 할수 있는 remote agent 수 따라 라이센스 비용이 책정되는데 5 remote agent 가 $2,200 이다. 1년후마다 매년 구입가의 50% subscription 비용 추가 발생.)</li>\n<li>Project, Plan, Stage, Task 의 개념이 복잡해서 익숙해지고 제대로 쓰려면 약간의 시간이 필요하다.</li>\n</ol>\n<h2 id=\"결론\"><a href=\"#결론\" class=\"headerlink\" title=\"결론\"></a>결론</h2><ul>\n<li>기존 atlassian 제품을 쓰고 있기에, Bamboo로 도입하기로 결정했다.</li>\n<li>Jenkins로 프로젝트를 구성하고 Bamboo로 Migration이 가능하기에 더 기능이 많은 Bamboo가 좋은 선택으로 보여진다.</li>\n<li>나는 짬이 안되므로 Bamboo 관리자 계정을 빌려 학습하였다.</li>\n</ul>\n","text":"서문Jenkins와 Bamboo라고 많이들 들어보았을 것이다. 빌드테스트 자동화와 배포자동화에 특화된 솔루션이며, Hudson사가 원조임.Hudson 은 오라클 인수후 지속적으로 사용자가 줄고 있는 듯 하고 위 두개 외에 솔루션들은 따로 조사하지 않았","link":"","raw":null,"photos":[],"categories":[{"name":"CICD","slug":"CICD","count":1,"path":"api/categories/CICD.json"}],"tags":[{"name":"CI","slug":"CI","count":1,"path":"api/tags/CI.json"},{"name":"CD","slug":"CD","count":1,"path":"api/tags/CD.json"},{"name":"Bamboo","slug":"Bamboo","count":1,"path":"api/tags/Bamboo.json"},{"name":"Jenkins","slug":"Jenkins","count":1,"path":"api/tags/Jenkins.json"}]},{"title":"MongoDB Compass Guide","slug":"MongoDB-Compass-Guide","date":"2021-02-09T05:29:14.000Z","updated":"2021-02-09T05:48:25.666Z","comments":true,"pin":null,"path":"api/articles/MongoDB-Compass-Guide.json","excerpt":"","keywords":null,"cover":"https://user-images.githubusercontent.com/56995911/107320066-515b7200-6ae3-11eb-8007-1266bbad72a9.png","content":"<h2 id=\"서문\"><a href=\"#서문\" class=\"headerlink\" title=\"서문\"></a>서문</h2><p>Document DB 사용을 원활하게 하기 위하여 MongoDB Compass를 활용해보기로 한다.<br>Studio 3T와 달리 무료이며 MongoDB에서 기본적으로 제공하는 툴이다.(<a href=\"https://www.mongodb.com/try/download/compass\" target=\"_blank\" rel=\"noopener\">https://www.mongodb.com/try/download/compass</a>)<br>연결설정방법을 가이드한다.<br>Collection을 생성하고 index 작업 및 CRUD 작업에 대하여 툴에서 사용하는 방법을 가이드한다.<br>모든 가이드의 출처는 <a href=\"https://docs.mongodb.com/compass/master/를\" target=\"_blank\" rel=\"noopener\">https://docs.mongodb.com/compass/master/를</a> 참고하여 작성하였다.</p>\n<h2 id=\"본문\"><a href=\"#본문\" class=\"headerlink\" title=\"본문\"></a>본문</h2><h3 id=\"1-시작\"><a href=\"#1-시작\" class=\"headerlink\" title=\"1. 시작\"></a>1. 시작</h3><p><a href=\"https://user-images.githubusercontent.com/56995911/107320066-515b7200-6ae3-11eb-8007-1266bbad72a9.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107320066-515b7200-6ae3-11eb-8007-1266bbad72a9.png\" alt=\"image\"></a></p>\n<ul>\n<li>URI를 통해 접속하는 방법이 Default로 나온다.</li>\n<li>URI는 앞서 설명한 Studio 3T에서 나오긴한다.</li>\n<li>URI를 쉽게 추출하고 싶다면 Studio 3T를 사용해야하며, 반드시 비밀번호 포함과 각종옵션 추가 체크를 해주어야 한다.</li>\n</ul>\n<h3 id=\"2-Connection-Setting-Step-by-Step\"><a href=\"#2-Connection-Setting-Step-by-Step\" class=\"headerlink\" title=\"2. Connection Setting(Step by Step)\"></a>2. Connection Setting(Step by Step)</h3><h4 id=\"1-Studio-3T-URI를-활용하는-방법\"><a href=\"#1-Studio-3T-URI를-활용하는-방법\" class=\"headerlink\" title=\"1) Studio 3T URI를 활용하는 방법\"></a>1) Studio 3T URI를 활용하는 방법</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><figcaption><span>3T URI</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongodb:&#x2F;&#x2F;administrator:##KDnetworkER1@docdb-2021-01-08-06-18-46.cluster-ccjhfbfchw3b.ap-northeast-2.docdb.amazonaws.com:27017&#x2F;admin?authSource&#x3D;admin&amp;connectTimeoutMS&#x3D;10000&amp;readPreference&#x3D;secondaryPreferred&amp;authMechanism&#x3D;SCRAM-SHA-1&amp;appname&#x3D;MongoDB%20Compass&amp;ssl&#x3D;true</span><br></pre></td></tr></table></figure></div>\n\n<h5 id=\"i-MongoDB-홈페이지에-나와있듯이-구조는-아래와-같다-https-docs-mongodb-com-manual-reference-connection-string\"><a href=\"#i-MongoDB-홈페이지에-나와있듯이-구조는-아래와-같다-https-docs-mongodb-com-manual-reference-connection-string\" class=\"headerlink\" title=\"i) MongoDB 홈페이지에 나와있듯이, 구조는 아래와 같다.(https://docs.mongodb.com/manual/reference/connection-string/)\"></a>i) MongoDB 홈페이지에 나와있듯이, 구조는 아래와 같다.(<a href=\"https://docs.mongodb.com/manual/reference/connection-string/\" target=\"_blank\" rel=\"noopener\">https://docs.mongodb.com/manual/reference/connection-string/</a>)</h5><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongodb://[username:password@]host1[:port1][,...hostN[:portN]][/[defaultauthdb][?options]]</span><br></pre></td></tr></table></figure></div>\n\n<h5 id=\"ii-완성된-URI를-Connect-위의-TextBox에-삽입한다\"><a href=\"#ii-완성된-URI를-Connect-위의-TextBox에-삽입한다\" class=\"headerlink\" title=\"ii) 완성된 URI를 Connect 위의 TextBox에 삽입한다.\"></a>ii) 완성된 URI를 Connect 위의 TextBox에 삽입한다.</h5><h5 id=\"iii-화면상단에-Fill-in-connection-fields-individually-를-선택한-뒤-상세-옵션설정을-한다\"><a href=\"#iii-화면상단에-Fill-in-connection-fields-individually-를-선택한-뒤-상세-옵션설정을-한다\" class=\"headerlink\" title=\"iii) 화면상단에 Fill in connection fields individually 를 선택한 뒤 상세 옵션설정을 한다.\"></a>iii) 화면상단에 Fill in connection fields individually 를 선택한 뒤 상세 옵션설정을 한다.</h5><h5 id=\"iv-URI를-통해-기본적인-Connection-옵션은-이미-채워져있음을-확인할-수-있다\"><a href=\"#iv-URI를-통해-기본적인-Connection-옵션은-이미-채워져있음을-확인할-수-있다\" class=\"headerlink\" title=\"iv) URI를 통해 기본적인 Connection 옵션은 이미 채워져있음을 확인할 수 있다.\"></a>iv) URI를 통해 기본적인 Connection 옵션은 이미 채워져있음을 확인할 수 있다.</h5><p><a href=\"https://user-images.githubusercontent.com/56995911/107320190-97b0d100-6ae3-11eb-8067-803c25ea900d.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107320190-97b0d100-6ae3-11eb-8067-803c25ea900d.png\" alt=\"image\"></a></p>\n<h5 id=\"v-SSL-SSH-설정부가-제일-중요하다-아래와-같이-설정해주도록-한다-SSH-Passphrase는-설정하지-않아도-된다\"><a href=\"#v-SSL-SSH-설정부가-제일-중요하다-아래와-같이-설정해주도록-한다-SSH-Passphrase는-설정하지-않아도-된다\" class=\"headerlink\" title=\"v) SSL, SSH 설정부가 제일 중요하다. 아래와 같이 설정해주도록 한다. (SSH Passphrase는 설정하지 않아도 된다)\"></a>v) SSL, SSH 설정부가 제일 중요하다. 아래와 같이 설정해주도록 한다. (SSH Passphrase는 설정하지 않아도 된다)</h5><p><a href=\"https://user-images.githubusercontent.com/56995911/107320230-aa2b0a80-6ae3-11eb-9b83-150b7c98c41f.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107320230-aa2b0a80-6ae3-11eb-9b83-150b7c98c41f.png\" alt=\"image\"></a></p>\n<h5 id=\"vi-접속이-완료됨을-확인할-수-있다\"><a href=\"#vi-접속이-완료됨을-확인할-수-있다\" class=\"headerlink\" title=\"vi) 접속이 완료됨을 확인할 수 있다.\"></a>vi) 접속이 완료됨을 확인할 수 있다.</h5><p><a href=\"https://user-images.githubusercontent.com/56995911/107320268-b8792680-6ae3-11eb-94c9-df61de612654.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107320268-b8792680-6ae3-11eb-94c9-df61de612654.png\" alt=\"image\"></a></p>\n<h4 id=\"2-수동입력방법-Studio-3T-에서-URI의-지원을-받을-수-없을-경우-사용\"><a href=\"#2-수동입력방법-Studio-3T-에서-URI의-지원을-받을-수-없을-경우-사용\" class=\"headerlink\" title=\"2) 수동입력방법(Studio 3T 에서 URI의 지원을 받을 수 없을 경우 사용)\"></a>2) 수동입력방법(Studio 3T 에서 URI의 지원을 받을 수 없을 경우 사용)</h4><h5 id=\"i-host-정보-입력\"><a href=\"#i-host-정보-입력\" class=\"headerlink\" title=\"i) host 정보 입력\"></a>i) host 정보 입력</h5><p><a href=\"https://user-images.githubusercontent.com/56995911/107320338-d9da1280-6ae3-11eb-8004-bd9aa916a146.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107320338-d9da1280-6ae3-11eb-8004-bd9aa916a146.png\" alt=\"image\"></a></p>\n<h5 id=\"ii-추가옵션-선택\"><a href=\"#ii-추가옵션-선택\" class=\"headerlink\" title=\"ii) 추가옵션 선택\"></a>ii) 추가옵션 선택</h5><p><a href=\"https://user-images.githubusercontent.com/56995911/107320375-e9595b80-6ae3-11eb-8228-8500160bb361.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107320375-e9595b80-6ae3-11eb-8228-8500160bb361.png\" alt=\"image\"></a></p>\n<h3 id=\"3-Database-생성\"><a href=\"#3-Database-생성\" class=\"headerlink\" title=\"3. Database 생성\"></a>3. Database 생성</h3><h4 id=\"1-UI로-생성하는-방법\"><a href=\"#1-UI로-생성하는-방법\" class=\"headerlink\" title=\"1) UI로 생성하는 방법\"></a>1) UI로 생성하는 방법</h4><p><a href=\"https://user-images.githubusercontent.com/56995911/107320410-fe35ef00-6ae3-11eb-9056-0d7f0acf3a00.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107320410-fe35ef00-6ae3-11eb-9056-0d7f0acf3a00.png\" alt=\"image\"></a><br><a href=\"https://user-images.githubusercontent.com/56995911/107320436-0857ed80-6ae4-11eb-81ec-bc996b81a4d3.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107320436-0857ed80-6ae4-11eb-81ec-bc996b81a4d3.png\" alt=\"image\"></a></p>\n<h4 id=\"2-프로그램으로-생성\"><a href=\"#2-프로그램으로-생성\" class=\"headerlink\" title=\"2) 프로그램으로 생성\"></a>2) 프로그램으로 생성</h4><h5 id=\"i-https-docs-aws-amazon-com-ko-kr-documentdb-latest-developerguide-connect-programmatically-html\"><a href=\"#i-https-docs-aws-amazon-com-ko-kr-documentdb-latest-developerguide-connect-programmatically-html\" class=\"headerlink\" title=\"i) https://docs.aws.amazon.com/ko_kr/documentdb/latest/developerguide/connect_programmatically.html\"></a>i) <a href=\"https://docs.aws.amazon.com/ko_kr/documentdb/latest/developerguide/connect_programmatically.html\" target=\"_blank\" rel=\"noopener\">https://docs.aws.amazon.com/ko_kr/documentdb/latest/developerguide/connect_programmatically.html</a></h5><h3 id=\"4-Collection-생성\"><a href=\"#4-Collection-생성\" class=\"headerlink\" title=\"4. Collection 생성\"></a>4. Collection 생성</h3><h4 id=\"1-UI로-생성하는-방법-1\"><a href=\"#1-UI로-생성하는-방법-1\" class=\"headerlink\" title=\"1) UI로 생성하는 방법\"></a>1) UI로 생성하는 방법</h4><h5 id=\"i-Capped-Collection은-컬렉션에-크기제한을-두는것이므로-예제상에서는-따로-제한을-두지-않음\"><a href=\"#i-Capped-Collection은-컬렉션에-크기제한을-두는것이므로-예제상에서는-따로-제한을-두지-않음\" class=\"headerlink\" title=\"i) Capped Collection은 컬렉션에 크기제한을 두는것이므로 예제상에서는 따로 제한을 두지 않음.\"></a>i) Capped Collection은 컬렉션에 크기제한을 두는것이므로 예제상에서는 따로 제한을 두지 않음.</h5><ul>\n<li>Use Custom Collection은 컬렉션 내에 프로파일들에 대한 각 형을 정해주는것. 예→ varchar(45), datetime, boolean 등..<br><a href=\"https://user-images.githubusercontent.com/56995911/107320539-363d3200-6ae4-11eb-85ad-5222a7e039bc.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107320539-363d3200-6ae4-11eb-85ad-5222a7e039bc.png\" alt=\"image\"></a><br><a href=\"https://user-images.githubusercontent.com/56995911/107320548-3f2e0380-6ae4-11eb-843a-ee8c7bde20e6.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107320548-3f2e0380-6ae4-11eb-843a-ee8c7bde20e6.png\" alt=\"image\"></a></li>\n</ul>\n<h4 id=\"2-프로그램으로-생성-1\"><a href=\"#2-프로그램으로-생성-1\" class=\"headerlink\" title=\"2) 프로그램으로 생성\"></a>2) 프로그램으로 생성</h4><h5 id=\"i-https-docs-aws-amazon-com-ko-kr-documentdb-latest-developerguide-connect-programmatically-html-1\"><a href=\"#i-https-docs-aws-amazon-com-ko-kr-documentdb-latest-developerguide-connect-programmatically-html-1\" class=\"headerlink\" title=\"i) https://docs.aws.amazon.com/ko_kr/documentdb/latest/developerguide/connect_programmatically.html\"></a>i) <a href=\"https://docs.aws.amazon.com/ko_kr/documentdb/latest/developerguide/connect_programmatically.html\" target=\"_blank\" rel=\"noopener\">https://docs.aws.amazon.com/ko_kr/documentdb/latest/developerguide/connect_programmatically.html</a></h5><h3 id=\"5-Indexing-생성\"><a href=\"#5-Indexing-생성\" class=\"headerlink\" title=\"5. Indexing 생성\"></a>5. Indexing 생성</h3><ul>\n<li>우선, Collection을 생성하면 기본으로 _id 라는 키값이 자동으로 잡힌다. </li>\n<li>아마도 DocumentDB내에서 자체 인덱싱을 위해 쓰는 것으로 보여지며, 이걸 생성안한다고 하면 Collection이 아예 생성되지 않는다.</li>\n</ul>\n<h4 id=\"1-UI로-생성하는-방법-2\"><a href=\"#1-UI로-생성하는-방법-2\" class=\"headerlink\" title=\"1) UI로 생성하는 방법\"></a>1) UI로 생성하는 방법</h4><h5 id=\"i-생성하고자-하는-Collection-마우스우클릭-→-Add-Index-Drop-Index-는-삭제\"><a href=\"#i-생성하고자-하는-Collection-마우스우클릭-→-Add-Index-Drop-Index-는-삭제\" class=\"headerlink\" title=\"i) 생성하고자 하는 Collection (마우스우클릭)→ (Add Index..)  [Drop Index 는 삭제]\"></a>i) 생성하고자 하는 Collection (마우스우클릭)→ (Add Index..)  [Drop Index 는 삭제]</h5><h4 id=\"2-Linux에서-Cmd로-생성하는-방법\"><a href=\"#2-Linux에서-Cmd로-생성하는-방법\" class=\"headerlink\" title=\"2) Linux에서 Cmd로 생성하는 방법\"></a>2) Linux에서 Cmd로 생성하는 방법</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rs0:PRIMARY&gt;    </span><br><span class=\"line\"> </span><br><span class=\"line\">db.[COLLECTION_NAME].createIndex(&#123;[KEY]:-1&#125;, &#123;background: <span class=\"literal\">true</span>&#125;); //1은 ascending, -1은 descending / background는 아래 설명</span><br></pre></td></tr></table></figure></div>\n\n<p><a href=\"https://user-images.githubusercontent.com/56995911/107320639-743a5600-6ae4-11eb-8a50-60fd25e705eb.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107320639-743a5600-6ae4-11eb-8a50-60fd25e705eb.png\" alt=\"image\"></a></p>\n<h3 id=\"6-CRUD\"><a href=\"#6-CRUD\" class=\"headerlink\" title=\"6. CRUD\"></a>6. CRUD</h3><h4 id=\"1-SELECT\"><a href=\"#1-SELECT\" class=\"headerlink\" title=\"1) SELECT\"></a>1) SELECT</h4><h5 id=\"i-UI를-통한-Select\"><a href=\"#i-UI를-통한-Select\" class=\"headerlink\" title=\"i) UI를 통한 Select\"></a>i) UI를 통한 Select</h5><p><a href=\"https://user-images.githubusercontent.com/56995911/107320692-8ddb9d80-6ae4-11eb-89d4-888e5ab4f634.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107320692-8ddb9d80-6ae4-11eb-89d4-888e5ab4f634.png\" alt=\"image\"></a></p>\n<ul>\n<li><p>Filter : 조건검색, SQL의 WHERE절</p>\n</li>\n<li><p>Project : 표시항목, SQL의 * 이나 컬럼이름(1: 표시, 0:생략)</p>\n</li>\n<li><p>Sort : 순서정렬, SQL의 ORDER BY(1:오름차순, -1:내림차순)</p>\n</li>\n<li><p>Max Time MS : Millisecond이며 Default 5000이 맞음. 60초까지 넣을 필욘 없지만 쿼리복잡도에 따라 시간이 더 필요할 경우 늘려주면됨.</p>\n</li>\n<li><p>Skip : 페이징처리 할때 좋음. (갯수에 따라 pass되고 나머지 것이 표시됨)</p>\n</li>\n<li><p>LIMIT : 출력하고자 하는 한계를 설정, MySQL의 LIMIT / MSSQL의 TOP 과 비슷한 기능.</p>\n</li>\n</ul>\n<h4 id=\"2-UPDATE\"><a href=\"#2-UPDATE\" class=\"headerlink\" title=\"2) UPDATE\"></a>2) UPDATE</h4><h5 id=\"i-다수-Update\"><a href=\"#i-다수-Update\" class=\"headerlink\" title=\"i) 다수 Update\"></a>i) 다수 Update</h5><ul>\n<li>업데이트 예정</li>\n</ul>\n<h5 id=\"ii-일부-Update\"><a href=\"#ii-일부-Update\" class=\"headerlink\" title=\"ii) 일부 Update\"></a>ii) 일부 Update</h5><p><a href=\"https://user-images.githubusercontent.com/56995911/107320766-aea3f300-6ae4-11eb-9b88-913be1391b2d.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107320766-aea3f300-6ae4-11eb-9b88-913be1391b2d.png\" alt=\"image\"></a></p>\n<ul>\n<li>수정하고자 하는 행을 더블클릭만 하고 Update 버튼으로 적용하면 된다.</li>\n</ul>\n<h4 id=\"3-INSERT\"><a href=\"#3-INSERT\" class=\"headerlink\" title=\"3) INSERT\"></a>3) INSERT</h4><h5 id=\"i-다수-Insert\"><a href=\"#i-다수-Insert\" class=\"headerlink\" title=\"i) 다수 Insert\"></a>i) 다수 Insert</h5><p><a href=\"https://user-images.githubusercontent.com/56995911/107320816-c67b7700-6ae4-11eb-90fa-381795b739c2.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107320816-c67b7700-6ae4-11eb-90fa-381795b739c2.png\" alt=\"image\"></a></p>\n<ul>\n<li>JSON File을 만들어서 동시에 Insert 시킬 수 있음.(Json Array)</li>\n</ul>\n<h5 id=\"ii-단일-Insert\"><a href=\"#ii-단일-Insert\" class=\"headerlink\" title=\"ii) 단일 Insert\"></a>ii) 단일 Insert</h5><p><a href=\"https://user-images.githubusercontent.com/56995911/107320838-d7c48380-6ae4-11eb-8376-5ab019f2913a.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107320838-d7c48380-6ae4-11eb-8376-5ab019f2913a.png\" alt=\"image\"></a></p>\n<h4 id=\"4-DELETE\"><a href=\"#4-DELETE\" class=\"headerlink\" title=\"4) DELETE\"></a>4) DELETE</h4><h5 id=\"i-일부-Delete\"><a href=\"#i-일부-Delete\" class=\"headerlink\" title=\"i) 일부 Delete\"></a>i) 일부 Delete</h5><p><a href=\"https://user-images.githubusercontent.com/56995911/107320881-ee6ada80-6ae4-11eb-829a-26a9eaabaa32.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107320881-ee6ada80-6ae4-11eb-829a-26a9eaabaa32.png\" alt=\"image\"></a></p>\n","text":"서문Document DB 사용을 원활하게 하기 위하여 MongoDB Compass를 활용해보기로 한다.<br>Studio 3T와 달리 무료이며 MongoDB에서 기본적으로 제공하는 툴이다.(https://www.mongodb.com/try/downlo","link":"","raw":null,"photos":[],"categories":[{"name":"AWS","slug":"AWS","count":3,"path":"api/categories/AWS.json"}],"tags":[{"name":"Document DB","slug":"Document-DB","count":3,"path":"api/tags/Document-DB.json"},{"name":"Mongo","slug":"Mongo","count":3,"path":"api/tags/Mongo.json"}]},{"title":"Studio 3T Guide","slug":"Studio-3T-Guide","date":"2021-01-12T03:45:15.000Z","updated":"2021-02-09T05:52:37.650Z","comments":true,"pin":null,"path":"api/articles/Studio-3T-Guide.json","excerpt":"","keywords":null,"cover":"https://user-images.githubusercontent.com/56995911/107318394-09871b80-6ae0-11eb-854a-cad27c7a6b0e.png","content":"<h2 id=\"서문\"><a href=\"#서문\" class=\"headerlink\" title=\"서문\"></a>서문</h2><ul>\n<li>Document DB 사용을 원활하게 하기 위하여 Studio 3T를 활용해보기로 한다.</li>\n<li>우선, 해당 툴은 유료툴인데 돈이 아깝지 않은 성능을 보여준다.</li>\n<li>Collection을 생성하고 index 작업 및 CRUD 작업에 대하여 툴에서 사용하는 방법과 Back-End에서 사용하는 법을 정의한다.</li>\n</ul>\n<h2 id=\"본문\"><a href=\"#본문\" class=\"headerlink\" title=\"본문\"></a>본문</h2><h3 id=\"1-시작\"><a href=\"#1-시작\" class=\"headerlink\" title=\"1. 시작\"></a>1. 시작</h3><p><a href=\"https://user-images.githubusercontent.com/56995911/107318394-09871b80-6ae0-11eb-854a-cad27c7a6b0e.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107318394-09871b80-6ae0-11eb-854a-cad27c7a6b0e.png\" alt=\"image\"></a></p>\n<p><a href=\"https://user-images.githubusercontent.com/56995911/107318424-173ca100-6ae0-11eb-8645-27c3613ba3c7.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107318424-173ca100-6ae0-11eb-8645-27c3613ba3c7.png\" alt=\"image\"></a></p>\n<ul>\n<li>Connect 로 해당 DB접속</li>\n</ul>\n<h3 id=\"2-Database-생성\"><a href=\"#2-Database-생성\" class=\"headerlink\" title=\"2. Database 생성\"></a>2. Database 생성</h3><h4 id=\"1-UI로-생성하는-방법\"><a href=\"#1-UI로-생성하는-방법\" class=\"headerlink\" title=\"1) UI로 생성하는 방법\"></a>1) UI로 생성하는 방법</h4><ul>\n<li>i) replica set으로 보이는 전체 데이터베이스 (마우스우클릭)→ (Add Database)</li>\n</ul>\n<h4 id=\"2-Linux에서-Cmd로-생성하는-방법\"><a href=\"#2-Linux에서-Cmd로-생성하는-방법\" class=\"headerlink\" title=\"2) Linux에서 Cmd로 생성하는 방법\"></a>2) Linux에서 Cmd로 생성하는 방법</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rs0:PRIMARY&gt;    </span><br><span class=\"line\"> </span><br><span class=\"line\">show dbs                            //Database 목록 확인용</span><br><span class=\"line\">use [DATABASE_NAME]                 //데이터베이스 사용or생성</span><br><span class=\"line\">switched to db [DATABASE_NAME]      //데이터베이스를 상대로 변경</span><br><span class=\"line\">db.runCommand( &#123; serverStatus: 1 &#125;) //데이터베이스 상태확인</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"3-프로그램으로-생성\"><a href=\"#3-프로그램으로-생성\" class=\"headerlink\" title=\"3) 프로그램으로 생성\"></a>3) 프로그램으로 생성</h4><ul>\n<li>i) <a href=\"https://docs.aws.amazon.com/ko_kr/documentdb/latest/developerguide/connect_programmatically.html\" target=\"_blank\" rel=\"noopener\">https://docs.aws.amazon.com/ko_kr/documentdb/latest/developerguide/connect_programmatically.html</a></li>\n</ul>\n<h3 id=\"3-Collection-생성\"><a href=\"#3-Collection-생성\" class=\"headerlink\" title=\"3. Collection 생성\"></a>3. Collection 생성</h3><h4 id=\"1-UI로-생성하는-방법-1\"><a href=\"#1-UI로-생성하는-방법-1\" class=\"headerlink\" title=\"1) UI로 생성하는 방법\"></a>1) UI로 생성하는 방법</h4><ul>\n<li>i) 폴더모양의 Collections를 (마우스우클릭)→ (Add Collection)</li>\n</ul>\n<h4 id=\"2-Linux에서-Cmd로-생성하는-방법-1\"><a href=\"#2-Linux에서-Cmd로-생성하는-방법-1\" class=\"headerlink\" title=\"2) Linux에서 Cmd로 생성하는 방법\"></a>2) Linux에서 Cmd로 생성하는 방법</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rs0:PRIMARY&gt;    </span><br><span class=\"line\"> </span><br><span class=\"line\">db.[COLLECTION_NAME]</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"3-프로그램으로-생성-1\"><a href=\"#3-프로그램으로-생성-1\" class=\"headerlink\" title=\"3) 프로그램으로 생성\"></a>3) 프로그램으로 생성</h4><ul>\n<li>i) <a href=\"https://docs.aws.amazon.com/ko_kr/documentdb/latest/developerguide/connect_programmatically.html\" target=\"_blank\" rel=\"noopener\">https://docs.aws.amazon.com/ko_kr/documentdb/latest/developerguide/connect_programmatically.html</a></li>\n</ul>\n<h3 id=\"4-Indexing-생성\"><a href=\"#4-Indexing-생성\" class=\"headerlink\" title=\"4. Indexing 생성\"></a>4. Indexing 생성</h3><ul>\n<li>우선, Collection을 생성하면 기본으로 _id 라는 키값이 자동으로 잡힌다. </li>\n<li>아마도 DocumentDB내에서 자체 인덱싱을 위해 쓰는 것으로 보여지며, 이걸 생성안한다고 하면 Collection이 아예 생성되지 않는다.</li>\n</ul>\n<h4 id=\"1-UI로-생성하는-방법-2\"><a href=\"#1-UI로-생성하는-방법-2\" class=\"headerlink\" title=\"1) UI로 생성하는 방법\"></a>1) UI로 생성하는 방법</h4><ul>\n<li>i) 생성하고자 하는 Collection (마우스우클릭)→ (Add Index..)  [Drop Index 는 삭제]</li>\n</ul>\n<h4 id=\"2-Linux에서-Cmd로-생성하는-방법-2\"><a href=\"#2-Linux에서-Cmd로-생성하는-방법-2\" class=\"headerlink\" title=\"2) Linux에서 Cmd로 생성하는 방법\"></a>2) Linux에서 Cmd로 생성하는 방법</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rs0:PRIMARY&gt;    </span><br><span class=\"line\"> </span><br><span class=\"line\">db.[COLLECTION_NAME].createIndex(&#123;[KEY]:-1&#125;, &#123;background: <span class=\"literal\">true</span>&#125;); //1은 ascending, -1은 descending / background는 아래 설명</span><br></pre></td></tr></table></figure></div>\n\n<p><a href=\"(https://user-images.githubusercontent.com/56995911/107318654-97fb9d00-6ae0-11eb-8a56-6f2921e6a40d.png)\"><img src=\"https://user-images.githubusercontent.com/56995911/107318654-97fb9d00-6ae0-11eb-8a56-6f2921e6a40d.png\" alt=\"image\"></a></p>\n<h3 id=\"5-CRUD\"><a href=\"#5-CRUD\" class=\"headerlink\" title=\"5. CRUD\"></a>5. CRUD</h3><h4 id=\"1-SELECT\"><a href=\"#1-SELECT\" class=\"headerlink\" title=\"1) SELECT\"></a>1) SELECT</h4><h5 id=\"i-UI를-통한-Select\"><a href=\"#i-UI를-통한-Select\" class=\"headerlink\" title=\"i) UI를 통한 Select\"></a>i) UI를 통한 Select</h5><p><a href=\"https://user-images.githubusercontent.com/56995911/107318707-b2ce1180-6ae0-11eb-8ff8-d01453b8f7cb.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107318707-b2ce1180-6ae0-11eb-8ff8-d01453b8f7cb.png\" alt=\"image\"></a><br><a href=\"https://user-images.githubusercontent.com/56995911/107318732-c6797800-6ae0-11eb-88df-97fc6d6fe3dc.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107318732-c6797800-6ae0-11eb-88df-97fc6d6fe3dc.png\" alt=\"image\"></a></p>\n<ul>\n<li>MongoDB와 같은 Docuent성 NoSQL을 처음 쓴다면, UI로 자동완성 시켜주는 쿼리메이커가 유용히 쓰일 수 있다.</li>\n<li>또한, Query Code탭을 통해 각종언어에 따른 예제를 만들어낼 수 있다.(실제 구동이 된다)</li>\n<li>Function 기반 Call에 익숙치 않다면, SQL 탭에서 기존에 쓰던 Select 문을 통해 자동완성 된 코드를 받아볼 수 있다.</li>\n</ul>\n<p><a href=\"https://user-images.githubusercontent.com/56995911/107318761-d5f8c100-6ae0-11eb-9527-a57f7fd7b190.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107318761-d5f8c100-6ae0-11eb-9527-a57f7fd7b190.png\" alt=\"image\"></a></p>\n<h5 id=\"ii-쿼리Function을-통한-Select\"><a href=\"#ii-쿼리Function을-통한-Select\" class=\"headerlink\" title=\"ii) 쿼리Function을 통한 Select\"></a>ii) 쿼리Function을 통한 Select</h5><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rs0:PRIMARY&gt;    </span><br><span class=\"line\">// 전체 Select</span><br><span class=\"line\">db.[COLLECTION_NAME].find();</span><br><span class=\"line\"> </span><br><span class=\"line\">// 조건 Select</span><br><span class=\"line\">db.[COLLECTION_NAME].find(&#123;<span class=\"string\">'name'</span>:<span class=\"string\">'Frank'</span>&#125;);</span><br><span class=\"line\">db.[COLLECTION_NAME].find(&#123;<span class=\"string\">'status'</span>:&#123;<span class=\"variable\">$in</span>:[<span class=\"string\">'active'</span>]&#125;&#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">// 조건+옵션</span><br><span class=\"line\">// https://docs.mongodb.com/manual/reference/method/</span><br><span class=\"line\">db.getCollection(<span class=\"string\">\"profiles\"</span>).find(&#123;<span class=\"string\">\"status\"</span> : <span class=\"string\">\"active\"</span>&#125;).skip(1).<span class=\"built_in\">limit</span>(1).pretty();</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"2-UPDATE\"><a href=\"#2-UPDATE\" class=\"headerlink\" title=\"2) UPDATE\"></a>2) UPDATE</h4><h5 id=\"i-다수-Update\"><a href=\"#i-다수-Update\" class=\"headerlink\" title=\"i) 다수 Update\"></a>i) 다수 Update</h5><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rs0:PRIMARY&gt;    </span><br><span class=\"line\">// nice컬럼과 meet 컬럼에 to,you 인 값을 포함하고 있는 document는 전부 meet컬럼을 me로 수정.</span><br><span class=\"line\">db.[COLLECTION_NAME].findAndModify(&#123;query:&#123;nice:<span class=\"string\">\"to\"</span>,meet:<span class=\"string\">\"you\"</span>&#125;,update:&#123;<span class=\"variable\">$set</span>:&#123;meet:<span class=\"string\">\"me\"</span>&#125;&#125;, upsert:<span class=\"literal\">true</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">// 어떤컬럼이건 상관없이 meet컬럼을 모두 me로 업데이트</span><br><span class=\"line\">db.[COLLECTION_NAME].findAndModify(&#123;query:&#123;&#125;,update:&#123;<span class=\"variable\">$set</span>:&#123;meet:<span class=\"string\">\"me\"</span>&#125;&#125;, upsert:<span class=\"literal\">true</span>);</span><br></pre></td></tr></table></figure></div>\n\n<h5 id=\"ii-일부-Update\"><a href=\"#ii-일부-Update\" class=\"headerlink\" title=\"ii) 일부 Update\"></a>ii) 일부 Update</h5><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rs0:PRIMARY&gt;    </span><br><span class=\"line\">// nice컬럼과 meet 컬럼에 to,you 인 값을 포함하고 있는 document는 전부 meet컬럼을 me로 수정.</span><br><span class=\"line\">db.[COLLECTION_NAME].findAndModify(&#123;query:&#123;nice:<span class=\"string\">\"to\"</span>,meet:<span class=\"string\">\"you\"</span>&#125;,update:&#123;<span class=\"variable\">$set</span>:&#123;meet:<span class=\"string\">\"me\"</span>&#125;&#125;, upsert:<span class=\"literal\">true</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">// status 가 active이면서 name이 Karen일 경우 status를 inactive로 변경</span><br><span class=\"line\">db.[COLLECTION_NAME].findOneAndUpdate(&#123;status : <span class=\"string\">'active'</span>, name:<span class=\"string\">'Karen'</span>&#125;, &#123;<span class=\"variable\">$set</span>:&#123;status:<span class=\"string\">'inactive'</span>&#125;&#125;);</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"3-INSERT\"><a href=\"#3-INSERT\" class=\"headerlink\" title=\"3) INSERT\"></a>3) INSERT</h4><h5 id=\"i-단일-Insert\"><a href=\"#i-단일-Insert\" class=\"headerlink\" title=\"i) 단일 Insert\"></a>i) 단일 Insert</h5><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rs0:PRIMARY&gt;    </span><br><span class=\"line\"> </span><br><span class=\"line\">db.[COLLECTION_NAME].insert(&#123;<span class=\"string\">\"nice\"</span>:<span class=\"string\">\"to\"</span>,<span class=\"string\">\"meet\"</span>:<span class=\"string\">\"you\"</span>&#125;);</span><br></pre></td></tr></table></figure></div>\n\n<h5 id=\"ii-다수-Insert\"><a href=\"#ii-다수-Insert\" class=\"headerlink\" title=\"ii) 다수 Insert\"></a>ii) 다수 Insert</h5><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rs0:PRIMARY&gt;    </span><br><span class=\"line\"> </span><br><span class=\"line\">db.[COLLECTION_NAME].insert([&#123;<span class=\"string\">\"nice\"</span>:<span class=\"string\">\"to\"</span>,<span class=\"string\">\"meet\"</span>:<span class=\"string\">\"you\"</span>&#125;, &#123;..........&#125;]);</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"4-DELETE\"><a href=\"#4-DELETE\" class=\"headerlink\" title=\"4) DELETE\"></a>4) DELETE</h4><h5 id=\"i-전체-Delete\"><a href=\"#i-전체-Delete\" class=\"headerlink\" title=\"i) 전체 Delete\"></a>i) 전체 Delete</h5><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rs0:PRIMARY&gt;    </span><br><span class=\"line\"> </span><br><span class=\"line\">db.[COLLECTION_NAME].remove( &#123; &#125; )</span><br></pre></td></tr></table></figure></div>\n\n<h5 id=\"ii-조건-Delete\"><a href=\"#ii-조건-Delete\" class=\"headerlink\" title=\"ii) 조건 Delete\"></a>ii) 조건 Delete</h5><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rs0:PRIMARY&gt;    </span><br><span class=\"line\"> </span><br><span class=\"line\">//1개의 조건</span><br><span class=\"line\">db.[COLLECTION_NAME].remove( &#123; name: <span class=\"string\">\"Frank\"</span> &#125; );</span><br><span class=\"line\"> </span><br><span class=\"line\">//2개 이상 조건</span><br><span class=\"line\">db.[COLLECTION_NAME].remove( &#123; nice : <span class=\"string\">\"to\"</span>, meet : <span class=\"string\">\"you\"</span>&#125; );</span><br></pre></td></tr></table></figure></div>\n","text":"서문Document DB 사용을 원활하게 하기 위하여 Studio 3T를 활용해보기로 한다.우선, 해당 툴은 유료툴인데 돈이 아깝지 않은 성능을 보여준다.Collection을 생성하고 index 작업 및 CRUD 작업에 대하여 툴에서 사용하는 방법과 ","link":"","raw":null,"photos":[],"categories":[{"name":"AWS","slug":"AWS","count":3,"path":"api/categories/AWS.json"}],"tags":[{"name":"Document DB","slug":"Document-DB","count":3,"path":"api/tags/Document-DB.json"},{"name":"Mongo","slug":"Mongo","count":3,"path":"api/tags/Mongo.json"}]},{"title":"DocumentDB(MongoDB) Setting","slug":"DocumentDB-MongoDB-Setting","date":"2020-12-18T05:36:38.000Z","updated":"2021-02-09T03:51:34.842Z","comments":true,"pin":null,"path":"api/articles/DocumentDB-MongoDB-Setting.json","excerpt":"","keywords":null,"cover":"https://user-images.githubusercontent.com/56995911/107305217-e6e80900-6ac5-11eb-9b86-081655884a9a.png","content":"<h2 id=\"서문\"><a href=\"#서문\" class=\"headerlink\" title=\"서문\"></a>서문</h2><ul>\n<li>시작에 앞서 DocumentDB를 사용하게 된 사유는 MongoDB &amp; AWS DocumentDB 에 나와있듯이 1000만 Row 이하의 데이터의 경우 DocumentDB가 훨씬 이득이었다.</li>\n<li>이득인 사유<br>1) 1000만 row 이하로 사용하는 서비스가 대부분임.<br>2) 자동 백업, 복구 스토리지 제공(Snapshot)<br>3) 인스턴스 &amp; 클러스터 관리 거의 불필요(설정과 관리는 다른개념)</li>\n<li>툴은 AWS에서도 가이드로 제공해주는 툴 중에 요즘 뜨고 있는 툴이라고 생각되어 Studio 3T를 사용.</li>\n<li>최근 정정(2021-01-20) : Studio 3T는 무료가 아니라 유료 라이센스이며, 간단한 정도라면 MongoDB에서 무료로 제공중인 Compass를 사용하는 것이 좋음.<br><a href=\"https://user-images.githubusercontent.com/56995911/107305217-e6e80900-6ac5-11eb-9b86-081655884a9a.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107305217-e6e80900-6ac5-11eb-9b86-081655884a9a.png\" alt=\"image\"></a></li>\n</ul>\n<h2 id=\"본문\"><a href=\"#본문\" class=\"headerlink\" title=\"본문\"></a>본문</h2><h3 id=\"1-EC2-설정-설치\"><a href=\"#1-EC2-설정-설치\" class=\"headerlink\" title=\"1. EC2 설정(설치)\"></a>1. EC2 설정(설치)</h3><ul>\n<li>깔끔하게 Linux로 가보자.</li>\n<li>(제목은 DocumentDB면서 왜 갑자기 EC2를 설치하냐고 물어볼 수 있는데, Windows가 있어야 카카오톡을 깔 수 있듯이 OS가 있어야한다는 개념으로 생각하면 편하다.)</li>\n</ul>\n<h4 id=\"1-메인화면에서-EC2생성-클릭\"><a href=\"#1-메인화면에서-EC2생성-클릭\" class=\"headerlink\" title=\"1) 메인화면에서 EC2생성 클릭\"></a>1) 메인화면에서 EC2생성 클릭</h4><p><a href=\"https://user-images.githubusercontent.com/56995911/107311500-cd4cbe80-6ad1-11eb-8657-60dd6818a3f9.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107311500-cd4cbe80-6ad1-11eb-8657-60dd6818a3f9.png\" alt=\"image\"></a></p>\n<h4 id=\"2-EC2엔진-설정\"><a href=\"#2-EC2엔진-설정\" class=\"headerlink\" title=\"2) EC2엔진 설정\"></a>2) EC2엔진 설정</h4><p><a href=\"https://user-images.githubusercontent.com/56995911/107311634-0d13a600-6ad2-11eb-8d85-aefd481a5fb0.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107311634-0d13a600-6ad2-11eb-8d85-aefd481a5fb0.png\" alt=\"image\"></a></p>\n<ul>\n<li>EC2의 수많은 OS를 선택할 수 있었지만, 난 스펙은 사실 잘 모른다. 잘 돌아가기만 하면 된다고 생각하기에…</li>\n<li>따라서, 가이드와 동일하게 Linux 2 AMI를 사용하기로 한다.</li>\n<li>뒤로 t3.micro를 씀으로 일단은 저렴한 걸로 생성해보고자 한다.</li>\n<li>이후, [Review and Launch] 버튼 클릭해서 총 7단계인 복잡한놈을 빨리 끝내기로 한다.</li>\n</ul>\n<h4 id=\"3-EC2그룹설정\"><a href=\"#3-EC2그룹설정\" class=\"headerlink\" title=\"3) EC2그룹설정\"></a>3) EC2그룹설정</h4><p><a href=\"https://user-images.githubusercontent.com/56995911/107311743-38969080-6ad2-11eb-8ba1-42c26d3bf022.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107311743-38969080-6ad2-11eb-8ba1-42c26d3bf022.png\" alt=\"image\"></a></p>\n<ul>\n<li><p>다른건 모르겠고, 일단 7단계로 건너뛰어 왔다. </p>\n</li>\n<li><p>AWS에서 가장 중요하게 생각하는 권한과 보안중의 한 축을 담당하는 Security Group을 설정하자.(아래 사진처럼 이름넣고 Source만 수정해주면 끝난다)<br><a href=\"https://user-images.githubusercontent.com/56995911/107311775-4ba96080-6ad2-11eb-99f7-e888ad89c100.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107311775-4ba96080-6ad2-11eb-99f7-e888ad89c100.png\" alt=\"image\"></a></p>\n</li>\n<li><p>설정이 끝났으면 [Review and Launch]버튼을 가차없이 누른다.</p>\n</li>\n</ul>\n<h4 id=\"4-검토-및-설치\"><a href=\"#4-검토-및-설치\" class=\"headerlink\" title=\"4) 검토 및 설치\"></a>4) 검토 및 설치</h4><p><a href=\"https://user-images.githubusercontent.com/56995911/107311827-6c71b600-6ad2-11eb-8576-7d2551c1f053.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107311827-6c71b600-6ad2-11eb-8576-7d2551c1f053.png\" alt=\"image\"></a></p>\n<ul>\n<li>설정한 내용들을 확인한 후 [Launch]버튼을 클릭한다.<br><img src=\"https://user-images.githubusercontent.com/56995911/107311894-975c0a00-6ad2-11eb-8ad1-bb52fc3eecba.png\" alt=\"image\"></li>\n<li>시간이 좀 흐른 뒤에 위와 같이 하나의 Linux 서버가 만들어 진 것을 확인할 수 있다.</li>\n</ul>\n<h3 id=\"2-보안그룹-생성\"><a href=\"#2-보안그룹-생성\" class=\"headerlink\" title=\"2. 보안그룹 생성\"></a>2. 보안그룹 생성</h3><ul>\n<li>자, 이제 클러스터(DocumentDB)와 연결할 보안그룹을 만들어보자.</li>\n<li>참고로, 아까 EC2만들면서 만든 보안그룹은 EC2에서 사용하는 보안그룹이다. (착각하지말자)</li>\n</ul>\n<p><a href=\"https://user-images.githubusercontent.com/56995911/107311951-b78bc900-6ad2-11eb-91dd-f32bf4b6eaa1.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107311951-b78bc900-6ad2-11eb-91dd-f32bf4b6eaa1.png\" alt=\"image\"></a></p>\n<ul>\n<li>보안그룹은 별내용없다. </li>\n<li>[이름입력] → [Custom TCP : 27017] → source 설정 하면 끝난다. 그림으로 대체한다.<br><a href=\"https://user-images.githubusercontent.com/56995911/107311981-ca060280-6ad2-11eb-883d-0d92ec57f2bd.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107311981-ca060280-6ad2-11eb-883d-0d92ec57f2bd.png\" alt=\"image\"></a></li>\n</ul>\n<h3 id=\"3-Document-Cluster-생성\"><a href=\"#3-Document-Cluster-생성\" class=\"headerlink\" title=\"3. Document Cluster 생성\"></a>3. Document Cluster 생성</h3><ul>\n<li>EC2인지 뭔지를 지나 결국 목적지에 왔지만, 이제 본게임이라고 생각할 것이다.</li>\n<li>하지만, 걱정말자. 너무 쉽다.</li>\n</ul>\n<h4 id=\"1-클러스터-생성\"><a href=\"#1-클러스터-생성\" class=\"headerlink\" title=\"1) 클러스터 생성\"></a>1) 클러스터 생성</h4><p><a href=\"https://user-images.githubusercontent.com/56995911/107312022-e144f000-6ad2-11eb-8ea9-269406a851ed.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107312022-e144f000-6ad2-11eb-8ea9-269406a851ed.png\" alt=\"image\"></a></p>\n<ul>\n<li>가이드에 맞춰 검은색으로 칠해진 모든 곳을 입력하자.</li>\n<li>테스트용도라면 Instance class 와 Number of instance 는 가급적 가장 낮은 사양으로 했으면 한다. </li>\n</ul>\n<h4 id=\"2-추가설정\"><a href=\"#2-추가설정\" class=\"headerlink\" title=\"2) 추가설정\"></a>2) 추가설정</h4><p><img src=\"https://user-images.githubusercontent.com/56995911/107312076-f6ba1a00-6ad2-11eb-9c8c-629e249a503e.png\" alt=\"image\"></p>\n<ul>\n<li>버튼클릭하면 어마어마한 옵션설정이 나온다.</li>\n</ul>\n<h5 id=\"i-Network-Settings\"><a href=\"#i-Network-Settings\" class=\"headerlink\" title=\"i) Network Settings\"></a>i) Network Settings</h5><p><a href=\"https://user-images.githubusercontent.com/56995911/107312104-076a9000-6ad3-11eb-98f7-ab6722bccc2e.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107312104-076a9000-6ad3-11eb-98f7-ab6722bccc2e.png\" alt=\"image\"></a></p>\n<ul>\n<li>아까 2번에서 생성했던 보안그룹이 생각나는가? 그걸 여기 쓰면 된다. </li>\n<li>다시말하지만, 처음 EC2에서 보안그룹을 생성했던건 EC2에서 끝난다. 2번에서 생성한 것은 Cluster에서 사용하기 위한 용도이다.</li>\n</ul>\n<h5 id=\"ii-Cluster-Options\"><a href=\"#ii-Cluster-Options\" class=\"headerlink\" title=\"ii) Cluster Options\"></a>ii) Cluster Options</h5><p><a href=\"https://user-images.githubusercontent.com/56995911/107312141-1c472380-6ad3-11eb-923f-1b00dcfdb91f.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107312141-1c472380-6ad3-11eb-923f-1b00dcfdb91f.png\" alt=\"image\"></a></p>\n<ul>\n<li>이 Cluster Parameter Group 셋팅법은 따로 아래에서 설명하겠다.</li>\n<li>사용하는 이유는, 우린 툴을 쓸거니까…….툴에 맞춘 사양이 들어가야 하니까…..</li>\n</ul>\n<h5 id=\"iii-Etc\"><a href=\"#iii-Etc\" class=\"headerlink\" title=\"iii) Etc\"></a>iii) Etc</h5><p><a href=\"https://user-images.githubusercontent.com/56995911/107312202-3123b700-6ad3-11eb-98bb-4de25042a2f4.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107312202-3123b700-6ad3-11eb-98bb-4de25042a2f4.png\" alt=\"image\"></a><br><a href=\"https://user-images.githubusercontent.com/56995911/107312217-3a148880-6ad3-11eb-97d0-23789966611e.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107312217-3a148880-6ad3-11eb-97d0-23789966611e.png\" alt=\"image\"></a></p>\n<ul>\n<li>기타 등등이라고 명칭한 이유는, 기본값을 쓸거기때문에..</li>\n<li>태그는 설정해주면 검색하기 좋을 것이고, Protection은 클러스터를 보호해주는 역할이다.<br>나중에 체크를 풀어줄 수도 있지만, 인스턴스와 클러스터를 지우지 못하게 방어막을 한번 걸어주는 것이다. </li>\n<li>테스트이므로 풀어주어도 상관없다.</li>\n</ul>\n<h5 id=\"iv-클러스터-확인\"><a href=\"#iv-클러스터-확인\" class=\"headerlink\" title=\"iv) 클러스터 확인\"></a>iv) 클러스터 확인</h5><p><a href=\"https://user-images.githubusercontent.com/56995911/107312253-4c8ec200-6ad3-11eb-88a0-7978bd757975.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107312253-4c8ec200-6ad3-11eb-88a0-7978bd757975.png\" alt=\"image\"></a></p>\n<h3 id=\"4-EC2-내에서-클러스터-연결-및-설정\"><a href=\"#4-EC2-내에서-클러스터-연결-및-설정\" class=\"headerlink\" title=\"4. EC2 내에서 클러스터 연결 및 설정\"></a>4. EC2 내에서 클러스터 연결 및 설정</h3><p><a href=\"https://user-images.githubusercontent.com/56995911/107312284-5ca6a180-6ad3-11eb-8e9c-ede43d055fcb.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107312284-5ca6a180-6ad3-11eb-8e9c-ede43d055fcb.png\" alt=\"image\"></a></p>\n<ul>\n<li><p>인스턴스를 선택하고 Connect하면 웹페이지로 linux서버를 들어갈 수 있는 Terminal이 생긴다.<br><a href=\"https://user-images.githubusercontent.com/56995911/107312307-6c25ea80-6ad3-11eb-9d9e-a04e810fb022.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107312307-6c25ea80-6ad3-11eb-9d9e-a04e810fb022.png\" alt=\"image\"></a></p>\n</li>\n<li><p>To install the mongo shell on Amazon Linux</p>\n</li>\n<li><p>1)Create the repository file. At the command line of your EC2 instance, execute the follow command:</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"[mongodb-org-3.6] \\nname=MongoDB Repository\\nbaseurl=https://repo.mongodb.org/yum/amazon/2013.03/mongodb-org/3.6/x86_64/\\ngpgcheck=1 \\nenabled=1 \\ngpgkey=https://www.mongodb.org/static/pgp/server-3.6.asc\"</span> | sudo tee /etc/yum.repos.d/mongodb-org-3.6.repo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"[mongodb-org-4.0] \\nname=MongoDB Repository\\nbaseurl=https://repo.mongodb.org/yum/amazon/2013.03/mongodb-org/4.0/x86_64/\\ngpgcheck=1 \\nenabled=1 \\ngpgkey=https://www.mongodb.org/static/pgp/server-4.0.asc\"</span> | sudo tee /etc/yum.repos.d/mongodb-org-4.0.repo</span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p>2)When it is complete, install the mongo shell by executing the following command:</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install -y mongodb-org-shell</span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p>3)Download the CA certificate for Amazon DocumentDB</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://s3.amazonaws.com/rds-downloads/rds-combined-ca-bundle.pem</span><br></pre></td></tr></table></figure></div>\n\n\n</li>\n</ul>\n<ul>\n<li>아래 사진의 [Connect to this cluster with the mongo shell] 의 값을 Linux Terminal 환경에서 동작시키면 비밀번호 설정이 나온다<br><a href=\"https://user-images.githubusercontent.com/56995911/107312451-cc1c9100-6ad3-11eb-9781-23f81607c345.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107312451-cc1c9100-6ad3-11eb-9781-23f81607c345.png\" alt=\"image\"></a></li>\n<li>사용할 비밀번호를 입력하면  rs0:PRIMARY&gt; 라는Prompt가 나오면서 각종 명령어를 쳐볼 수 있다.</li>\n<li>[Connect to this cluster with an application] 값은 아래 5번에서 사용한다.</li>\n</ul>\n<h3 id=\"5-Studio-3T-에서-사용\"><a href=\"#5-Studio-3T-에서-사용\" class=\"headerlink\" title=\"5. Studio 3T 에서 사용\"></a>5. Studio 3T 에서 사용</h3><ul>\n<li><p>여기서 한참 헤멘거같다.</p>\n</li>\n<li><p>연결이 되지 않으니 EC2인스턴스를 생성했다 지웠다를 반복한듯.<br><a href=\"https://user-images.githubusercontent.com/56995911/107312498-eeaeaa00-6ad3-11eb-8587-ad2874b069a1.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107312498-eeaeaa00-6ad3-11eb-8587-ad2874b069a1.png\" alt=\"image\"></a></p>\n</li>\n<li><p>메인화면에서 Connect를 누르면 위와 같은 창이 나오는데 [From URI…] 를 선택하고 [Connect to this cluster with an application] 에 나와있는 값에서 비밀번호를 수정하고 확인을 누른다.</p>\n</li>\n<li><p>이후 화면들을 아래와 같이 동일하게 설정해주면 된다.<br><a href=\"https://user-images.githubusercontent.com/56995911/107312526-0128e380-6ad4-11eb-8f6e-be11ad2d7a2e.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107312526-0128e380-6ad4-11eb-8f6e-be11ad2d7a2e.png\" alt=\"image\"></a><br><a href=\"https://user-images.githubusercontent.com/56995911/107312540-04bc6a80-6ad4-11eb-8418-997a0a3b1ca2.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107312540-04bc6a80-6ad4-11eb-8418-997a0a3b1ca2.png\" alt=\"image\"></a><br><a href=\"https://user-images.githubusercontent.com/56995911/107312547-0a19b500-6ad4-11eb-8ccc-b3b216131a14.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107312547-0a19b500-6ad4-11eb-8ccc-b3b216131a14.png\" alt=\"image\"></a></p>\n</li>\n<li><p>3번째 사진의 값은 아래와 같다<br>1) SSH Address는 1번에서 생성한 EC2의 [Public IPv4 address]<br>2) SSH User name 도 1번에서 생성할 때 사용자 이름으로 넣었던 이름.<br>3) SSH Auth Mode는 EC2생성시 PK생성한 값이 있으므로 Private Key로 설정<br>4) Private Key는 해당 서버 *.pem 파일을 넣음.</p>\n</li>\n</ul>\n<h2 id=\"결론\"><a href=\"#결론\" class=\"headerlink\" title=\"결론\"></a>결론</h2><ul>\n<li>이로써, 구성을 끝냈다.<br><a href=\"https://user-images.githubusercontent.com/56995911/107312613-29184700-6ad4-11eb-9269-0916ed69f9b5.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107312613-29184700-6ad4-11eb-9269-0916ed69f9b5.png\" alt=\"image\"></a></li>\n<li>보안적으로 좀 아쉬운 부분은 있지만, 테스트 상으로는 크게 문제가 되지 않을 것으로 보인다.</li>\n</ul>\n<h2 id=\"별첨\"><a href=\"#별첨\" class=\"headerlink\" title=\"별첨\"></a>별첨</h2><h3 id=\"1-Parameter-Group-설정\"><a href=\"#1-Parameter-Group-설정\" class=\"headerlink\" title=\"1.Parameter Group 설정\"></a>1.Parameter Group 설정</h3><p><a href=\"https://user-images.githubusercontent.com/56995911/107312664-44835200-6ad4-11eb-98a6-7a8e5bb20709.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107312664-44835200-6ad4-11eb-98a6-7a8e5bb20709.png\" alt=\"image\"></a></p>\n<h4 id=\"1-Create\"><a href=\"#1-Create\" class=\"headerlink\" title=\"1) Create\"></a>1) Create</h4><p><a href=\"https://user-images.githubusercontent.com/56995911/107312695-536a0480-6ad4-11eb-934a-8d23d2c4ecca.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107312695-536a0480-6ad4-11eb-934a-8d23d2c4ecca.png\" alt=\"image\"></a></p>\n<h4 id=\"2-Setting\"><a href=\"#2-Setting\" class=\"headerlink\" title=\"2) Setting\"></a>2) Setting</h4><p><a href=\"https://user-images.githubusercontent.com/56995911/107312715-61b82080-6ad4-11eb-878e-a5bf796b1719.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107312715-61b82080-6ad4-11eb-878e-a5bf796b1719.png\" alt=\"image\"></a></p>\n<ul>\n<li>tls와 ttl_monitor를 Disable로 맞춰주어야 한다고 한다.</li>\n<li>이유는 나도 공부를 해서 찾아본 뒤 적도록 하겠다.(암호화 통신을 설정하면 어떻게되지?)</li>\n</ul>\n<h3 id=\"2-관련자료\"><a href=\"#2-관련자료\" class=\"headerlink\" title=\"2. 관련자료\"></a>2. 관련자료</h3><p><a href=\"https://docs.aws.amazon.com/documentdb/latest/developerguide/connect-ec2.html#connect-ec2.security-group\" target=\"_blank\" rel=\"noopener\">https://docs.aws.amazon.com/documentdb/latest/developerguide/connect-ec2.html#connect-ec2.security-group</a><br><a href=\"https://docs.aws.amazon.com/ko_kr/documentdb/latest/developerguide/studio3t.html\" target=\"_blank\" rel=\"noopener\">https://docs.aws.amazon.com/ko_kr/documentdb/latest/developerguide/studio3t.html</a><br><a href=\"https://stackoverflow.com/questions/54384253/aws-documentdb-with-robo-3t-robomongo\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/54384253/aws-documentdb-with-robo-3t-robomongo</a><br><a href=\"https://geekflare.com/nosql-client/\" target=\"_blank\" rel=\"noopener\">https://geekflare.com/nosql-client/</a><br><a href=\"https://aws.amazon.com/ko/blogs/database/part-1-getting-started-with-amazon-documentdb-using-amazon-ec2/\" target=\"_blank\" rel=\"noopener\">https://aws.amazon.com/ko/blogs/database/part-1-getting-started-with-amazon-documentdb-using-amazon-ec2/</a></p>\n","text":"서문시작에 앞서 DocumentDB를 사용하게 된 사유는 MongoDB &amp; AWS DocumentDB 에 나와있듯이 1000만 Row 이하의 데이터의 경우 DocumentDB가 훨씬 이득이었다.이득인 사유<br>1) 1000만 row 이하로 사","link":"","raw":null,"photos":[],"categories":[{"name":"AWS","slug":"AWS","count":3,"path":"api/categories/AWS.json"}],"tags":[{"name":"Document DB","slug":"Document-DB","count":3,"path":"api/tags/Document-DB.json"},{"name":"Mongo","slug":"Mongo","count":3,"path":"api/tags/Mongo.json"}]},{"title":"nest.js API Template","slug":"nest-js-API-Template","date":"2020-11-20T07:04:10.000Z","updated":"2020-11-23T01:31:25.294Z","comments":true,"pin":null,"path":"api/articles/nest-js-API-Template.json","excerpt":"","keywords":null,"cover":"https://user-images.githubusercontent.com/62123161/99770052-9dcd8c00-2b4a-11eb-9beb-f6922414758d.png","content":"<h2 id=\"API-Template-구조도\"><a href=\"#API-Template-구조도\" class=\"headerlink\" title=\"API Template 구조도\"></a>API Template 구조도</h2><p><a href=\"https://user-images.githubusercontent.com/62123161/99770052-9dcd8c00-2b4a-11eb-9beb-f6922414758d.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/99770052-9dcd8c00-2b4a-11eb-9beb-f6922414758d.png\" alt=\"image\"></a></p>\n<h2 id=\"Tree\"><a href=\"#Tree\" class=\"headerlink\" title=\"Tree\"></a>Tree</h2><p>project/<br>　　└─ src<br>　　　　├─ config<br>　　　　│　　├─ constant<br>　　　　│　　│　　├─ config<br>　　　　│　　│　　├─ implement<br>　　　　│　　│　　└─ interface<br>　　　　│　　├─ database<br>　　　　│　　│　　├─ config<br>　　　　│　　│　　├─ implement<br>　　　　│　　│　　├─ interface<br>　　　　│　　│　　├─ module<br>　　　　│　　│　　└─ pool<br>　　　　│　　├─ smtp<br>　　　　│　　│　　├─ config<br>　　　　│　　│　　├─ implement<br>　　　　│　　│　　└─ interface<br>　　　　│　　index.config.ts<br>　　　　├─ device<br>　　　　│　　├─ controller<br>　　　　│　　├─ module<br>　　　　│　　└─ service<br>　　　　├─ interceptors<br>　　　　│　　└─ basic.interceptor<br>　　　　├─ mappers<br>　　　　│　　├─ client.xml<br>　　　　│　　├─ code.xml<br>　　　　│　　├─ device.setting.xml<br>　　　　│　　├─ device.xml<br>　　　　│　　├─ email.xml<br>　　　　│　　├─ otp.xml<br>　　　　│　　├─ term.xml<br>　　　　│　　├─ user.dormancy.xml<br>　　　　│　　└─ user.xml<br>　　　　├─ packets<br>　　　　│　　├─ request<br>　　　　│　　│　　├─ login.user<br>　　　　│　　│　　├─ join.user<br>　　　　│　　│　　└─ …<br>　　　　│　　├─ response<br>　　　　│　　│　　├─ common.response.code.json<br>　　　　│　　│　　├─ common.response.code<br>　　　　│　　│　　└─ common.response<br>　　　　│　　└─ validator<br>　　　　│　　　　　├─ login.user.validation<br>　　　　│　　　　　├─ join.user.validation<br>　　　　│　　　　　└─ …<br>　　　　├─ public<br>　　　　│　　├─ confirm_member_account_mail.html<br>　　　　│　　├─ find_member_account_mail.html<br>　　　　│　　├─ find_member_password_mail.html<br>　　　　│　　└─ navien.png<br>　　　　├─ smtp<br>　　　　│　　└─ email.service<br>　　　　├─ user<br>　　　　│　　├─ controller<br>　　　　│　　├─ module<br>　　　　│　　└─ service<br>　　　　├─ utilities<br>　　　　│　　├─ common.util<br>　　　　│　　├─ crypto.util<br>　　　　│　　└─ database.util<br>　　　　├─ validate<br>　　　　│　　├─ module<br>　　　　│　　└─ service<br>　　　app.module<br>　　　main</p>\n<h4 id=\"Node-js를-도입함에-있어-당장-언어에-대해-공부하기보다는-기존-객체지향에-친숙한-언어를-써서-접근하길-원했음\"><a href=\"#Node-js를-도입함에-있어-당장-언어에-대해-공부하기보다는-기존-객체지향에-친숙한-언어를-써서-접근하길-원했음\" class=\"headerlink\" title=\"Node.js를 도입함에 있어 당장 언어에 대해 공부하기보다는 기존 객체지향에 친숙한 언어를 써서 접근하길 원했음.\"></a>Node.js를 도입함에 있어 당장 언어에 대해 공부하기보다는 기존 객체지향에 친숙한 언어를 써서 접근하길 원했음.</h4><h4 id=\"이에-필요한-템플릿을-찾기-시작했고-Nest-js를-발견하게-되었음\"><a href=\"#이에-필요한-템플릿을-찾기-시작했고-Nest-js를-발견하게-되었음\" class=\"headerlink\" title=\"이에 필요한 템플릿을 찾기 시작했고, Nest.js를 발견하게 되었음.\"></a>이에 필요한 템플릿을 찾기 시작했고, Nest.js를 발견하게 되었음.</h4><h4 id=\"annotation도-유사하게-활용이-가능하며-언어-스타일이-Java와-매우-비슷함\"><a href=\"#annotation도-유사하게-활용이-가능하며-언어-스타일이-Java와-매우-비슷함\" class=\"headerlink\" title=\"annotation도 유사하게 활용이 가능하며, 언어 스타일이 Java와 매우 비슷함.\"></a>annotation도 유사하게 활용이 가능하며, 언어 스타일이 Java와 매우 비슷함.</h4><hr>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JAVASCRIPT\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;Injectable&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"@nestjs/common\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;ConstantImplement&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"./constant.implement\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;Env&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"../index.config\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author                  <span class=\"variable\">jms</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since                   </span>2020-10-29</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description             </span>공통설정 환경별 분기</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">@Injectable()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConstantConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  public constConfig() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (Env) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'local'</span>:</span><br><span class=\"line\">        result = ConstantImplement.local;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'dev'</span>:</span><br><span class=\"line\">        result = ConstantImplement.dev;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'prod'</span>:</span><br><span class=\"line\">        result = ConstantImplement.prod;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        result = ConstantImplement.dev;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"위-bash처럼-만들어주면-Nest-js가-내용을-그대로-node-js-형태로-만들어줌\"><a href=\"#위-bash처럼-만들어주면-Nest-js가-내용을-그대로-node-js-형태로-만들어줌\" class=\"headerlink\" title=\"위 bash처럼 만들어주면, Nest.js가 내용을 그대로 node.js 형태로 만들어줌.\"></a>위 bash처럼 만들어주면, Nest.js가 내용을 그대로 node.js 형태로 만들어줌.</h4><h4 id=\"nest형태로-서버에-올리기-싫다면-dist폴더로-추출된-Export-파일들을-그대로-서버로-올려주면-된다\"><a href=\"#nest형태로-서버에-올리기-싫다면-dist폴더로-추출된-Export-파일들을-그대로-서버로-올려주면-된다\" class=\"headerlink\" title=\"nest형태로 서버에 올리기 싫다면, dist폴더로 추출된 Export 파일들을 그대로 서버로 올려주면 된다.\"></a>nest형태로 서버에 올리기 싫다면, dist폴더로 추출된 Export 파일들을 그대로 서버로 올려주면 된다.</h4><h4 id=\"개인적으로-언어의-장벽이-높다고-판단이-되거나-신규-언어에-대한-학습-시간이-없을-경우-빠르게-생산할-경우에-대해-nest는-좋은-선택지가-될-수-있다고-봄\"><a href=\"#개인적으로-언어의-장벽이-높다고-판단이-되거나-신규-언어에-대한-학습-시간이-없을-경우-빠르게-생산할-경우에-대해-nest는-좋은-선택지가-될-수-있다고-봄\" class=\"headerlink\" title=\"개인적으로 언어의 장벽이 높다고 판단이 되거나, 신규 언어에 대한 학습 시간이 없을 경우, 빠르게 생산할 경우에 대해 nest는 좋은 선택지가 될 수 있다고 봄.\"></a>개인적으로 언어의 장벽이 높다고 판단이 되거나, 신규 언어에 대한 학습 시간이 없을 경우, 빠르게 생산할 경우에 대해 nest는 좋은 선택지가 될 수 있다고 봄.</h4><hr>\n<h3 id=\"주요-기능\"><a href=\"#주요-기능\" class=\"headerlink\" title=\"주요 기능\"></a>주요 기능</h3><h4 id=\"1-사용자\"><a href=\"#1-사용자\" class=\"headerlink\" title=\"1. 사용자\"></a>1. 사용자</h4><h5 id=\"1-회원가입\"><a href=\"#1-회원가입\" class=\"headerlink\" title=\"　　1) 회원가입\"></a>　　1) 회원가입</h5><h5 id=\"2-로그인\"><a href=\"#2-로그인\" class=\"headerlink\" title=\"　　2) 로그인\"></a>　　2) 로그인</h5><h5 id=\"3-이메일-인증\"><a href=\"#3-이메일-인증\" class=\"headerlink\" title=\"　　3) 이메일 인증\"></a>　　3) 이메일 인증</h5><h5 id=\"4-인증정보-갱신\"><a href=\"#4-인증정보-갱신\" class=\"headerlink\" title=\"　　4) 인증정보 갱신\"></a>　　4) 인증정보 갱신</h5><h5 id=\"5-회원탈퇴\"><a href=\"#5-회원탈퇴\" class=\"headerlink\" title=\"　　5) 회원탈퇴\"></a>　　5) 회원탈퇴</h5><h5 id=\"6-사용자-정보-복구-휴면\"><a href=\"#6-사용자-정보-복구-휴면\" class=\"headerlink\" title=\"　　6) 사용자 정보 복구(휴면)\"></a>　　6) 사용자 정보 복구(휴면)</h5><h5 id=\"7-사용자-정보-조회\"><a href=\"#7-사용자-정보-조회\" class=\"headerlink\" title=\"　　7) 사용자 정보 조회\"></a>　　7) 사용자 정보 조회</h5><h5 id=\"8-사용자-정보-변경\"><a href=\"#8-사용자-정보-변경\" class=\"headerlink\" title=\"　　8) 사용자 정보 변경\"></a>　　8) 사용자 정보 변경</h5><h5 id=\"9-로그인-ID-찾기\"><a href=\"#9-로그인-ID-찾기\" class=\"headerlink\" title=\"　　9) 로그인 ID 찾기\"></a>　　9) 로그인 ID 찾기</h5><h5 id=\"10-사용자-비밀번호-초기화-찾기\"><a href=\"#10-사용자-비밀번호-초기화-찾기\" class=\"headerlink\" title=\"　　10) 사용자 비밀번호 초기화(찾기)\"></a>　　10) 사용자 비밀번호 초기화(찾기)</h5><h5 id=\"11-이용약관-동의\"><a href=\"#11-이용약관-동의\" class=\"headerlink\" title=\"　　11) 이용약관 동의\"></a>　　11) 이용약관 동의</h5><hr>\n<h4 id=\"2-디바이스\"><a href=\"#2-디바이스\" class=\"headerlink\" title=\"2. 디바이스\"></a>2. 디바이스</h4><h5 id=\"1-디바이스-리스트\"><a href=\"#1-디바이스-리스트\" class=\"headerlink\" title=\"　　1) 디바이스 리스트\"></a>　　1) 디바이스 리스트</h5><h5 id=\"2-디바이스-이름-수정\"><a href=\"#2-디바이스-이름-수정\" class=\"headerlink\" title=\"　　2) 디바이스 이름 수정\"></a>　　2) 디바이스 이름 수정</h5><h5 id=\"3-디바이스-푸시-설정정보-조회\"><a href=\"#3-디바이스-푸시-설정정보-조회\" class=\"headerlink\" title=\"　　3) 디바이스 푸시 설정정보 조회\"></a>　　3) 디바이스 푸시 설정정보 조회</h5><h5 id=\"4-디바이스-푸시-설정정보-변경\"><a href=\"#4-디바이스-푸시-설정정보-변경\" class=\"headerlink\" title=\"　　4) 디바이스 푸시 설정정보 변경\"></a>　　4) 디바이스 푸시 설정정보 변경</h5><h5 id=\"5-디바이스-등록\"><a href=\"#5-디바이스-등록\" class=\"headerlink\" title=\"　　5) 디바이스 등록\"></a>　　5) 디바이스 등록</h5><h5 id=\"6-디바이스-삭제\"><a href=\"#6-디바이스-삭제\" class=\"headerlink\" title=\"　　6) 디바이스 삭제\"></a>　　6) 디바이스 삭제</h5><hr>\n<h3 id=\"사용-Library\"><a href=\"#사용-Library\" class=\"headerlink\" title=\"사용 Library\"></a>사용 Library</h3><h5 id=\"1-로그-nest-winston\"><a href=\"#1-로그-nest-winston\" class=\"headerlink\" title=\"　　1) 로그 : nest-winston\"></a>　　1) 로그 : nest-winston</h5><h5 id=\"2-AWS-aws-sdk\"><a href=\"#2-AWS-aws-sdk\" class=\"headerlink\" title=\"　　2) AWS : aws-sdk\"></a>　　2) AWS : aws-sdk</h5><h5 id=\"3-parameter-검증-joi\"><a href=\"#3-parameter-검증-joi\" class=\"headerlink\" title=\"　　3) parameter 검증 : joi\"></a>　　3) parameter 검증 : joi</h5><h5 id=\"4-단방향Hash-bcryptjs\"><a href=\"#4-단방향Hash-bcryptjs\" class=\"headerlink\" title=\"　　4) 단방향Hash : bcryptjs\"></a>　　4) 단방향Hash : bcryptjs</h5><h5 id=\"5-시간-moment\"><a href=\"#5-시간-moment\" class=\"headerlink\" title=\"　　5) 시간 : moment\"></a>　　5) 시간 : moment</h5><h5 id=\"6-JWT-Token-jsonwebtoken\"><a href=\"#6-JWT-Token-jsonwebtoken\" class=\"headerlink\" title=\"　　6) JWT Token : jsonwebtoken\"></a>　　6) JWT Token : jsonwebtoken</h5><h5 id=\"7-이메일-발송-nestjs-modules-mailer\"><a href=\"#7-이메일-발송-nestjs-modules-mailer\" class=\"headerlink\" title=\"　　7) 이메일 발송 : @nestjs-modules/mailer\"></a>　　7) 이메일 발송 : @nestjs-modules/mailer</h5><h5 id=\"8-양방향-암호화-AES256-crypto\"><a href=\"#8-양방향-암호화-AES256-crypto\" class=\"headerlink\" title=\"　　8) 양방향 암호화 AES256 : crypto\"></a>　　8) 양방향 암호화 AES256 : crypto</h5><h5 id=\"9-Database-pool-mysql2\"><a href=\"#9-Database-pool-mysql2\" class=\"headerlink\" title=\"　　9) Database pool : mysql2\"></a>　　9) Database pool : mysql2</h5><h5 id=\"10-Database-mapper-mybatis-mapper\"><a href=\"#10-Database-mapper-mybatis-mapper\" class=\"headerlink\" title=\"　　10) Database mapper : mybatis-mapper\"></a>　　10) Database mapper : mybatis-mapper</h5><h5 id=\"11-파일시스템-fs\"><a href=\"#11-파일시스템-fs\" class=\"headerlink\" title=\"　　11) 파일시스템 : fs\"></a>　　11) 파일시스템 : fs</h5><h5 id=\"12-임의String생성-rand-token\"><a href=\"#12-임의String생성-rand-token\" class=\"headerlink\" title=\"　　12) 임의String생성 : rand-token\"></a>　　12) 임의String생성 : rand-token</h5><hr>\n<h5 id=\"결국은-2주만에-모든-기능을-만들었다-솔직히-Nest를-활용했기-때문에-빠르게-끝냈을-것으로-보이며-순수-Node-js를-사용했다면-최소-1달-이상은-걸렸을-것이라고-확신한다\"><a href=\"#결국은-2주만에-모든-기능을-만들었다-솔직히-Nest를-활용했기-때문에-빠르게-끝냈을-것으로-보이며-순수-Node-js를-사용했다면-최소-1달-이상은-걸렸을-것이라고-확신한다\" class=\"headerlink\" title=\"결국은 2주만에 모든 기능을 만들었다. 솔직히 Nest를 활용했기 때문에 빠르게 끝냈을 것으로 보이며, 순수 Node.js를 사용했다면 최소 1달 이상은 걸렸을 것이라고 확신한다.\"></a>결국은 2주만에 모든 기능을 만들었다. 솔직히 Nest를 활용했기 때문에 빠르게 끝냈을 것으로 보이며, 순수 Node.js를 사용했다면 최소 1달 이상은 걸렸을 것이라고 확신한다.</h5><h5 id=\"앱과-디바이스쪽-테스트에서도-좋은-성능을-기대한다\"><a href=\"#앱과-디바이스쪽-테스트에서도-좋은-성능을-기대한다\" class=\"headerlink\" title=\"앱과 디바이스쪽 테스트에서도 좋은 성능을 기대한다.\"></a>앱과 디바이스쪽 테스트에서도 좋은 성능을 기대한다.</h5>","text":"API Template 구조도 [Figure] 위 bash처럼 만들어주면, Nest.js가 내용을 그대로 node.js 형태로 만들어줌.nest형태로 서버에 올리기 싫다면, dist폴더로 추출된 Export 파일들을 그대로 서버로 올려주면 된다.개인적","link":"","raw":null,"photos":[],"categories":[{"name":"nodejs","slug":"nodejs","count":3,"path":"api/categories/nodejs.json"}],"tags":[{"name":"node","slug":"node","count":3,"path":"api/tags/node.json"},{"name":"api","slug":"api","count":2,"path":"api/tags/api.json"},{"name":"template","slug":"template","count":1,"path":"api/tags/template.json"}]},{"title":"node.js TypeORM, Sequelize Test","slug":"node-js-TypeORM-Sequelize-Test","date":"2020-11-18T23:32:52.000Z","updated":"2020-11-23T01:29:12.138Z","comments":true,"pin":null,"path":"api/articles/node-js-TypeORM-Sequelize-Test.json","excerpt":"","keywords":null,"cover":"https://user-images.githubusercontent.com/62123161/99920422-c16d1e00-2d66-11eb-8e89-c64081815bfe.png","content":"<h2 id=\"API에서-Sequelize-사용하기\"><a href=\"#API에서-Sequelize-사용하기\" class=\"headerlink\" title=\"API에서 Sequelize 사용하기\"></a>API에서 Sequelize 사용하기</h2><hr>\n<h4 id=\"1-Install\"><a href=\"#1-Install\" class=\"headerlink\" title=\"1. Install\"></a>1. Install</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g --save mysql2</span><br><span class=\"line\"></span><br><span class=\"line\">npm install -g --save sequelize</span><br><span class=\"line\">npm install -g --save sequelize-cli</span><br><span class=\"line\">npm install -g --save sequelize-auto</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"2-Sequelize-설정\"><a href=\"#2-Sequelize-설정\" class=\"headerlink\" title=\"2. Sequelize 설정\"></a>2. Sequelize 설정</h4> <div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequelize-auto -o [MODEL_PATH] -d [TABLE] -h [DATABASE_ADDRESS] -u [USERID] -x [PASSWORD] -p [DATABASE_PORT] -e [DATABASE_TYPE]</span><br></pre></td></tr></table></figure></div>\n<h5 id=\"1-o-mapper-model\"><a href=\"#1-o-mapper-model\" class=\"headerlink\" title=\"1) -o : mapper model\"></a>1) -o : mapper model</h5><h5 id=\"2-d-table\"><a href=\"#2-d-table\" class=\"headerlink\" title=\"2) -d : table\"></a>2) -d : table</h5><h5 id=\"3-h-database\"><a href=\"#3-h-database\" class=\"headerlink\" title=\"3) -h : database\"></a>3) -h : database</h5><h5 id=\"4-u-userId\"><a href=\"#4-u-userId\" class=\"headerlink\" title=\"4) -u : userId\"></a>4) -u : userId</h5><h5 id=\"5-x-password\"><a href=\"#5-x-password\" class=\"headerlink\" title=\"5) -x : password\"></a>5) -x : password</h5><h5 id=\"6-p-port\"><a href=\"#6-p-port\" class=\"headerlink\" title=\"6) -p : port\"></a>6) -p : port</h5><h5 id=\"7-e-database-type\"><a href=\"#7-e-database-type\" class=\"headerlink\" title=\"7) -e : database type\"></a>7) -e : database type</h5><h4 id=\"3-model-mapper\"><a href=\"#3-model-mapper\" class=\"headerlink\" title=\"3. model mapper\"></a>3. model mapper</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JAVASCRIPT\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* jshint indent: 2 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">sequelize, DataTypes</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sequelize.define(<span class=\"string\">'userInfo'</span>, &#123;</span><br><span class=\"line\">    seq: &#123;</span><br><span class=\"line\">      autoIncrement: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      type: DataTypes.INTEGER(<span class=\"number\">11</span>),</span><br><span class=\"line\">      allowNull: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      primaryKey: <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"comment\">/*get() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        const rawValue = this.getDataValue(seq);</span></span><br><span class=\"line\"><span class=\"comment\">        return rawValue ? rawValue.toUpperCase() : null;</span></span><br><span class=\"line\"><span class=\"comment\">      &#125;*/</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    id: &#123;</span><br><span class=\"line\">      type: DataTypes.STRING(<span class=\"number\">30</span>),</span><br><span class=\"line\">      allowNull: <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    password: &#123;</span><br><span class=\"line\">      type: DataTypes.STRING(<span class=\"number\">100</span>),</span><br><span class=\"line\">      allowNull: <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    email: &#123;</span><br><span class=\"line\">      type: DataTypes.STRING(<span class=\"number\">50</span>),</span><br><span class=\"line\">      allowNull: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    loginDate: &#123;</span><br><span class=\"line\">      type: DataTypes.DATEONLY,</span><br><span class=\"line\">      allowNull: <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    registDate: &#123;</span><br><span class=\"line\">      type: DataTypes.DATEONLY,</span><br><span class=\"line\">      allowNull: <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    sequelize,</span><br><span class=\"line\">    tableName: <span class=\"string\">'userInfo'</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"4-model-index-code\"><a href=\"#4-model-index-code\" class=\"headerlink\" title=\"4. model index code\"></a>4. model index code</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JAVASCRIPT\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"><span class=\"comment\">//프로젝트의 파일을 읽기위한 용도</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"><span class=\"comment\">//프로젝트 파일의 경로를 얻기 위한 용도</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> Sequelize = <span class=\"built_in\">require</span>(<span class=\"string\">'sequelize'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> basename = path.basename(__filename);</span><br><span class=\"line\"><span class=\"keyword\">const</span> env = process.env.NODE_ENV;</span><br><span class=\"line\"><span class=\"comment\">//DB 연결정보를 환경변수로 가변설정</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> config = <span class=\"built_in\">require</span>(__dirname + <span class=\"string\">'/../config/dbConfig.json'</span>)[env];</span><br><span class=\"line\"><span class=\"keyword\">const</span> db = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// nodejs에서 mysql 접근을 쉽게 할 수 있도록 하는 라이브러리 사용(ORM 맵핑을 위해 사용한 것으로 파악)</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> sequelize = <span class=\"keyword\">new</span> Sequelize(config.database, config.username, config.password, config);</span><br><span class=\"line\"><span class=\"comment\">// <span class=\"doctag\">TODO:</span> 1. 직접 선언형태의 방법을 사용하는 방법.</span></span><br><span class=\"line\">db.userInfo = <span class=\"built_in\">require</span>(<span class=\"string\">'../model/userInfo'</span>)(sequelize, Sequelize);</span><br><span class=\"line\">db.deviceInfo = <span class=\"built_in\">require</span>(<span class=\"string\">'../model/deviceInfo'</span>)(sequelize, Sequelize);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// <span class=\"doctag\">TODO:</span> 2. 자동으로 파일에서 로드하여 필요한 객체를 받아오는 방법.</span></span><br><span class=\"line\"><span class=\"comment\">//https://blog.csdn.net/weixin_34324081/article/details/91445015</span></span><br><span class=\"line\"><span class=\"comment\">//fs를 통해 자동으로 로드되서 실행되고(ORM) 생성된 모델 객체가 db객체 아래에 마운트됨..</span></span><br><span class=\"line\">fs</span><br><span class=\"line\">    .readdirSync(__dirname)</span><br><span class=\"line\">    .filter(<span class=\"function\"><span class=\"params\">file</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (file.indexOf(<span class=\"string\">'.'</span>) !== <span class=\"number\">0</span>) &amp;&amp; (file !== basename) &amp;&amp; (file.slice(<span class=\"number\">-3</span>) === <span class=\"string\">'.js'</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .forEach(<span class=\"function\"><span class=\"params\">file</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> model = <span class=\"built_in\">require</span>(path.join(__dirname, file))(sequelize, Sequelize.DataTypes);</span><br><span class=\"line\">        db[model.name] = model;</span><br><span class=\"line\">        <span class=\"comment\">//console.log(model.name);</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.keys(db).forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">modelName</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (db[modelName].associate) &#123;</span><br><span class=\"line\">        db[modelName].associate(db);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">db.sequelize = sequelize;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = db;</span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"API에서-TypeORM-사용하기\"><a href=\"#API에서-TypeORM-사용하기\" class=\"headerlink\" title=\"API에서 TypeORM 사용하기\"></a>API에서 TypeORM 사용하기</h2><h4 id=\"1-Install-1\"><a href=\"#1-Install-1\" class=\"headerlink\" title=\"1. Install\"></a>1. Install</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save @nestjs/typeorm</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"2-TypeORM-Repository-활용\"><a href=\"#2-TypeORM-Repository-활용\" class=\"headerlink\" title=\"2. TypeORM.Repository 활용\"></a>2. TypeORM.Repository 활용</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JAVASCRIPT\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Repository, EntityRepository &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"typeorm\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; User &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../user/entities/user.entity'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">@EntityRepository(User)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserRepository</span> <span class=\"keyword\">extends</span> <span class=\"title\">Repository</span>&lt;<span class=\"title\">User</span>&gt;</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"3-model-mapper-1\"><a href=\"#3-model-mapper-1\" class=\"headerlink\" title=\"3. model mapper\"></a>3. model mapper</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JAVASCRIPT\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Entity, Column, PrimaryColumn &#125; <span class=\"keyword\">from</span> <span class=\"string\">'typeorm'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapping &#125; <span class=\"keyword\">from</span> <span class=\"string\">'auto-mapping'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">@Entity(<span class=\"string\">'TBL_USERsss'</span>, &#123; <span class=\"attr\">synchronize</span>: <span class=\"literal\">false</span> &#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\">  @PrimaryColumn(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'user_id'</span>&#125;)</span><br><span class=\"line\">  @mapping(&#123; <span class=\"attr\">type</span>: <span class=\"built_in\">String</span> &#125;)</span><br><span class=\"line\">  id: string;</span><br><span class=\"line\"></span><br><span class=\"line\">  @Column(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'user_pwd'</span>, <span class=\"attr\">length</span>: <span class=\"number\">128</span>, <span class=\"attr\">nullable</span>: <span class=\"literal\">false</span>&#125;)</span><br><span class=\"line\">  @mapping(&#123; <span class=\"attr\">type</span>: <span class=\"built_in\">String</span> &#125;)</span><br><span class=\"line\">  password: string;</span><br><span class=\"line\">  <span class=\"comment\">//@ForeignKey(() =&gt; Profile)</span></span><br><span class=\"line\">  @Column(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'usergroup_id'</span>, <span class=\"attr\">default</span>: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"number\">1</span>, <span class=\"attr\">nullable</span>: <span class=\"literal\">false</span>&#125;)</span><br><span class=\"line\">  @mapping(&#123; <span class=\"attr\">type</span>: <span class=\"built_in\">Number</span> &#125;)</span><br><span class=\"line\">  userGroupId: number;</span><br><span class=\"line\"></span><br><span class=\"line\">  @Column(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'user_status'</span>, <span class=\"attr\">length</span>: <span class=\"number\">1</span>, <span class=\"attr\">nullable</span>: <span class=\"literal\">false</span>&#125;)</span><br><span class=\"line\">  @mapping(&#123; <span class=\"attr\">type</span>: <span class=\"built_in\">String</span> &#125;)</span><br><span class=\"line\">  userStatus: string;</span><br><span class=\"line\"></span><br><span class=\"line\">  @Column(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'user_name'</span>, <span class=\"attr\">length</span>: <span class=\"number\">50</span>, <span class=\"attr\">nullable</span>: <span class=\"literal\">false</span>&#125;)</span><br><span class=\"line\">  @mapping(&#123; <span class=\"attr\">type</span>: <span class=\"built_in\">String</span> &#125;)</span><br><span class=\"line\">  name: string;</span><br><span class=\"line\"></span><br><span class=\"line\">  @Column(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'user_mobileno'</span>, <span class=\"attr\">length</span>: <span class=\"number\">13</span>, <span class=\"attr\">nullable</span>: <span class=\"literal\">false</span>&#125;)</span><br><span class=\"line\">  @mapping(&#123; <span class=\"attr\">type</span>: <span class=\"built_in\">String</span> &#125;)</span><br><span class=\"line\">  mobile: string;</span><br><span class=\"line\"></span><br><span class=\"line\">  @Column(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'user_email'</span>, <span class=\"attr\">length</span>: <span class=\"number\">50</span>, <span class=\"attr\">nullable</span>: <span class=\"literal\">false</span>&#125;)</span><br><span class=\"line\">  @mapping(&#123; <span class=\"attr\">type</span>: <span class=\"built_in\">String</span> &#125;)</span><br><span class=\"line\">  email: string;</span><br><span class=\"line\"></span><br><span class=\"line\">  @Column(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'user_birthday'</span>, <span class=\"attr\">nullable</span>: <span class=\"literal\">false</span>&#125;)</span><br><span class=\"line\">  @mapping(&#123; <span class=\"attr\">type</span>: <span class=\"built_in\">String</span> &#125;)</span><br><span class=\"line\">  birthday: string;</span><br><span class=\"line\"></span><br><span class=\"line\">  @Column(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'mobile_model'</span>, <span class=\"attr\">length</span>: <span class=\"number\">30</span>, <span class=\"attr\">nullable</span>: <span class=\"literal\">false</span>&#125;)</span><br><span class=\"line\">  @mapping(&#123; <span class=\"attr\">type</span>: <span class=\"built_in\">String</span> &#125;)</span><br><span class=\"line\">  mobileModel: string;</span><br><span class=\"line\"></span><br><span class=\"line\">  @Column(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'os_type'</span>, <span class=\"attr\">length</span>: <span class=\"number\">1</span>, <span class=\"attr\">nullable</span>: <span class=\"literal\">false</span>&#125;)</span><br><span class=\"line\">  @mapping(&#123; <span class=\"attr\">type</span>: <span class=\"built_in\">String</span> &#125;)</span><br><span class=\"line\">  os: string;</span><br><span class=\"line\"></span><br><span class=\"line\">  @Column(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'os_ver'</span>, <span class=\"attr\">length</span>: <span class=\"number\">30</span>, <span class=\"attr\">nullable</span>: <span class=\"literal\">false</span>&#125;)</span><br><span class=\"line\">  @mapping(&#123; <span class=\"attr\">type</span>: <span class=\"built_in\">String</span> &#125;)</span><br><span class=\"line\">  osVer: string;</span><br><span class=\"line\"></span><br><span class=\"line\">  @Column(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'app_ver'</span>, <span class=\"attr\">length</span>: <span class=\"number\">8</span>, <span class=\"attr\">nullable</span>: <span class=\"literal\">false</span>&#125;)</span><br><span class=\"line\">  @mapping(&#123; <span class=\"attr\">type</span>: <span class=\"built_in\">String</span> &#125;)</span><br><span class=\"line\">  appVer: string;</span><br><span class=\"line\"></span><br><span class=\"line\">  @Column(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'user_logindt'</span>, <span class=\"attr\">default</span>: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"string\">`now()`</span>, <span class=\"attr\">nullable</span>: <span class=\"literal\">false</span>&#125;)</span><br><span class=\"line\">  @mapping(&#123; <span class=\"attr\">type</span>: <span class=\"built_in\">Date</span> &#125;)</span><br><span class=\"line\">  loginDate: <span class=\"built_in\">Date</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  @Column(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'user_loginip'</span>, <span class=\"attr\">length</span>: <span class=\"number\">45</span>, <span class=\"attr\">nullable</span>: <span class=\"literal\">false</span>&#125;)</span><br><span class=\"line\">  @mapping(&#123; <span class=\"attr\">type</span>: <span class=\"built_in\">String</span> &#125;)</span><br><span class=\"line\">  loginIp: string;</span><br><span class=\"line\"></span><br><span class=\"line\">  @Column(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'insert_dt'</span>, <span class=\"attr\">default</span>: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"string\">`now()`</span>, <span class=\"attr\">nullable</span>: <span class=\"literal\">false</span>&#125;)</span><br><span class=\"line\">  @mapping(&#123; <span class=\"attr\">type</span>: <span class=\"built_in\">Date</span> &#125;)</span><br><span class=\"line\">  insertDate: <span class=\"built_in\">Date</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  @Column(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'insert_ip'</span>, <span class=\"attr\">length</span>: <span class=\"number\">45</span>, <span class=\"attr\">nullable</span>: <span class=\"literal\">false</span>&#125;)</span><br><span class=\"line\">  @mapping(&#123; <span class=\"attr\">type</span>: <span class=\"built_in\">String</span> &#125;)</span><br><span class=\"line\">  insertIp: string;</span><br><span class=\"line\"></span><br><span class=\"line\">  @Column(&#123; <span class=\"attr\">name</span>: <span class=\"string\">'update_dt'</span>, <span class=\"attr\">default</span>: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"string\">`now()`</span>, <span class=\"attr\">nullable</span>: <span class=\"literal\">false</span> &#125;)</span><br><span class=\"line\">  @mapping(&#123; <span class=\"attr\">type</span>: <span class=\"built_in\">Date</span> &#125;)</span><br><span class=\"line\">  updateDate: <span class=\"built_in\">Date</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  @Column(&#123; <span class=\"attr\">name</span>: <span class=\"string\">'update_ip'</span>, <span class=\"attr\">length</span>: <span class=\"number\">45</span>, <span class=\"attr\">nullable</span>: <span class=\"literal\">false</span> &#125;)</span><br><span class=\"line\">  @mapping(&#123; <span class=\"attr\">type</span>: <span class=\"built_in\">String</span> &#125;)</span><br><span class=\"line\">  updateIp: string;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"4-Type-ORM-Method\"><a href=\"#4-Type-ORM-Method\" class=\"headerlink\" title=\"4. Type ORM Method\"></a>4. Type ORM Method</h4><p><a href=\"https://velog.io/@josworks27/typeORM-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0\" target=\"_blank\" rel=\"noopener\">https://velog.io/@josworks27/typeORM-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0</a></p>\n<ul>\n<li>save, findone등 여러 method들이 있다. 활용하면 간단한 SQL은 충분히 날려볼 수 있다.</li>\n</ul>\n<h2 id=\"성능비교\"><a href=\"#성능비교\" class=\"headerlink\" title=\"성능비교\"></a>성능비교</h2><p><a href=\"https://user-images.githubusercontent.com/62123161/99920422-c16d1e00-2d66-11eb-8e89-c64081815bfe.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/99920422-c16d1e00-2d66-11eb-8e89-c64081815bfe.png\" alt=\"image\"></a></p>\n<ul>\n<li>너무 차이가 나기에 편리함vs성능 둘 중 어느 것을 택할지는 비지니스 성격에 맞춰야 할 것으로 보임.</li>\n</ul>\n","text":"API에서 Sequelize 사용하기1. Install1<br>2<br>3<br>4<br>5<br>npm install -g --save mysql2<br><br>npm install -g --save sequelize<br>npm install -g","link":"","raw":null,"photos":[],"categories":[{"name":"nodejs","slug":"nodejs","count":3,"path":"api/categories/nodejs.json"}],"tags":[{"name":"node","slug":"node","count":3,"path":"api/tags/node.json"},{"name":"api","slug":"api","count":2,"path":"api/tags/api.json"},{"name":"ORM","slug":"ORM","count":1,"path":"api/tags/ORM.json"},{"name":"sequelize","slug":"sequelize","count":1,"path":"api/tags/sequelize.json"}]},{"title":"Node.js HTTP Flow","slug":"Node-js-HTTP-Flow","date":"2020-10-05T07:01:42.000Z","updated":"2020-11-23T01:29:16.594Z","comments":true,"pin":null,"path":"api/articles/Node-js-HTTP-Flow.json","excerpt":"","keywords":null,"cover":"https://user-images.githubusercontent.com/62123161/95049128-22dc1d80-0724-11eb-96fa-47644f63fcbe.png","content":"<h2 id=\"API-시스템-구성도\"><a href=\"#API-시스템-구성도\" class=\"headerlink\" title=\"API 시스템 구성도\"></a>API 시스템 구성도</h2><p><a href=\"https://user-images.githubusercontent.com/62123161/95049128-22dc1d80-0724-11eb-96fa-47644f63fcbe.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/95049128-22dc1d80-0724-11eb-96fa-47644f63fcbe.png\" alt=\"image\"></a></p>\n<ul>\n<li>(IP/Port) or(DNS) 를 통해서 API서버로 요청이 들어온걸로 가정하면,<br> 1) 최초 app.js내에서 Express내 application.js handler 로 진입.(Default Configuration은 기본적으로 수행되니 생략)<br> 2) 핸들러에서 라우터를 확인하고 HTTP Method를 확인한 뒤, Layer Stack을 수정해서 적용하고 Layer로 데이터를 보냄.<br> 3) Layer는 여러 MiddleWare를 사용하며, (proto.process_params)에서 Req, Res 데이터들을 각각 분류하여 저장 및 생성.<br> 4) Layer내에서 모두 셋팅이 끝나면 Router로 해당 데이터를 보냄.<br> 5) 사용자가 요청한 데이터를 req에 받을 수 있고, Method를 통해 res데이터를 주는 것을 미리 Layer에서 셋팅된 res로 셋팅하여 내보낼 수 있음.</li>\n</ul>\n","text":"API 시스템 구성도 [Figure]  5) 사용자가 요청한 데이터를 req에 받을 수 있고, Method를 통해 res데이터를 주는 것을 미리 Layer에서 셋팅된 res로 셋팅하여 내보낼 수 있음.","link":"","raw":null,"photos":[],"categories":[{"name":"nodejs","slug":"nodejs","count":3,"path":"api/categories/nodejs.json"}],"tags":[{"name":"flow","slug":"flow","count":2,"path":"api/tags/flow.json"},{"name":"node","slug":"node","count":3,"path":"api/tags/node.json"},{"name":"http","slug":"http","count":1,"path":"api/tags/http.json"}]},{"title":"JWT(AccessToken)","slug":"JWT-AccessToken","date":"2020-10-05T06:48:50.000Z","updated":"2020-11-23T01:31:25.287Z","comments":true,"pin":null,"path":"api/articles/JWT-AccessToken.json","excerpt":"","keywords":null,"cover":"https://user-images.githubusercontent.com/62123161/95048615-1acfae00-0723-11eb-8f8b-36a2cff3b14a.png","content":"<h1 id=\"구성-요소\"><a href=\"#구성-요소\" class=\"headerlink\" title=\"구성 요소\"></a>구성 요소</h1><ul>\n<li>Header : 암호화할 방식(alg), 타입(type) 등</li>\n<li>Payload : 서버에서 보낼 데이터가 들어갑니다. 일반적으로 유저의 고유 ID값, 유효기간이 들어갑니다.</li>\n<li>Verify Signature : Base64 방식으로 인코딩한 Header,payload 그리고 SECRET KEY를 더한 후 서명됩니다.</li>\n</ul>\n<h2 id=\"최종Return값\"><a href=\"#최종Return값\" class=\"headerlink\" title=\"최종Return값\"></a>최종Return값</h2><ul>\n<li>Encoded Header + “.” + Encoded Payload + “.” + Verify Signature</li>\n</ul>\n<h2 id=\"Flow-Chart\"><a href=\"#Flow-Chart\" class=\"headerlink\" title=\"Flow Chart\"></a>Flow Chart</h2><p><a href=\"https://user-images.githubusercontent.com/62123161/95048615-1acfae00-0723-11eb-8f8b-36a2cff3b14a.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/95048615-1acfae00-0723-11eb-8f8b-36a2cff3b14a.png\" alt=\"image\"></a><br>    1. 사용자가 로그인을 한다.<br>    2. 서버에서는 계정정보를 읽어 사용자를 확인 후, 사용자의 고유한 ID값을 부여한 후, 기타 정보와 함께 Payload에 넣습니다.<br>    3. JWT 토큰의 유효기간을 설정합니다.<br>    4. 암호화할 SECRET KEY를 이용해 ACCESS TOKEN을 발급합니다.<br>    5. 사용자는 Access Token을 받아 저장한 후, 인증이 필요한 요청마다 토큰을 헤더에 실어 보냅니다.<br>    6. 서버에서는 해당 토큰의 Verify Signature를 SECRET KEY로 복호화한 후, 조작 여부, 유효기간을 확인합니다.<br>    7. 검증이 완료된다면, Payload를 디코딩하여 사용자의 ID에 맞는 데이터를 가져옵니다.  </p>\n","text":"구성 요소Header : 암호화할 방식(alg), 타입(type) 등Payload : 서버에서 보낼 데이터가 들어갑니다. 일반적으로 유저의 고유 ID값, 유효기간이 들어갑니다.Verify Signature : Base64 방식으로 인코딩한 Header","link":"","raw":null,"photos":[],"categories":[{"name":"etc","slug":"etc","count":1,"path":"api/categories/etc.json"}],"tags":[{"name":"JWT","slug":"JWT","count":1,"path":"api/tags/JWT.json"},{"name":"Structure","slug":"Structure","count":1,"path":"api/tags/Structure.json"},{"name":"flow","slug":"flow","count":2,"path":"api/tags/flow.json"}]},{"title":"MQTT 비교","slug":"MQTT-Info","date":"2020-10-05T06:07:26.000Z","updated":"2020-11-23T01:31:25.288Z","comments":true,"pin":null,"path":"api/articles/MQTT-Info.json","excerpt":"","keywords":null,"cover":"https://user-images.githubusercontent.com/62123161/95045402-f2dd4c00-071c-11eb-9c49-2510fce691c3.png","content":"<h1 id=\"공통적인-MQTT-특성\"><a href=\"#공통적인-MQTT-특성\" class=\"headerlink\" title=\"공통적인 MQTT 특성\"></a>공통적인 MQTT 특성</h1><ul>\n<li><dl><dt>QOS (QUALITY OF SERVICE)</dt><dd>MQTT는 시스템에 참여하는 장치들의 처리 능력, 네트워크 대역폭, 메시지 오버헤드 등 주변상황에 맞게 시스템이 동작할 수 있도록 3단계 QoS(Quality of Service) 를 제공합니다.</dd></dl><ul>\n<li><p>0 : 메시지는 한번만 전달하며, 전달여부를 확인하지 않는다. Fire and Forget 타입이다.</p>\n</li>\n<li><p>1 : 메시지는 반드시 한번 이상 전달된다. 하지만 메시지의 핸드셰이킹 과정을 엄밀하게 추적하지 않기 때문에, 중복전송될 수도 있다.</p>\n</li>\n<li><p>2 : 메시지는 한번만 전달된다. 메시지의 핸드셰이킹 과정을 추적한다. 높은 품질을 보장하지만 성능의 희생이 따른다.</p>\n</li>\n<li><p>0에 가까울수록 메시지 처리에 대한 부하가 적은 대신 메시지 손실 위험이 높아집니다. 2에 가까울수록 메시지 손실 위험은 줄어들지만 메시지 처리 부하가 급격히 늘어납니다.<br>(보통 0~1 정도의 QoS를 사용하면서 메시지 손실등의 위험은 상위 어플리케이션 차원에서 관리하도록 하는듯 합니다.)</p>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Mosquitto-특성\"><a href=\"#Mosquitto-특성\" class=\"headerlink\" title=\"Mosquitto 특성\"></a>Mosquitto 특성</h1><p><a href=\"https://user-images.githubusercontent.com/62123161/95045402-f2dd4c00-071c-11eb-9c49-2510fce691c3.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/95045402-f2dd4c00-071c-11eb-9c49-2510fce691c3.png\" alt=\"image\"></a><br>    - 단일 스레드 방식로 구현 : poll() 메소드를 이용하여 루프를 계속해서 반복하며 데이터를 받고 처리.<br>    - MQTT의 기본 기능을 충실히 지원하는 가벼운 MQTT 브로커<br>    - will(유언)<br>        a. –will-topic : 연결이 끊어지면 메세지 보낼 토픽<br>        b. –will-qos : 연결이 끊어지면 어떤 qos level로 보낼지(0~2)<br>        c. –will-payload : 연결이 끊어지면 보낼 메세지<br>    - Topic<br>        a. +, # 등 wildcard 사용가능<br>    - Session<br>        a. cleanSession 명령어를 false로 두면 완전히 연결을 끊지 않고 대기로 전환.(연결되면 자동활성화)<br>        b. HeartBeat을 전송하고 응답없으면 끊어버림. (시간, 일, 주, 월, 연도로 변경가능)<br>    - QoS(Default 0)<br>    - Client Size<br>        a. Default : 512개<br>    - MySQL과 연동<br>    - Protocol Version : 3.1 / 3.1.1<br>    - WebSocket 사용가능<br>    - 명령어 Page(<a href=\"https://mosquitto.org/man/mosquitto-8.html\" target=\"_blank\" rel=\"noopener\">https://mosquitto.org/man/mosquitto-8.html</a>)<br>    - 라이센스 없음.</p>\n<h2 id=\"Mosquitto-테스트\"><a href=\"#Mosquitto-테스트\" class=\"headerlink\" title=\"Mosquitto 테스트\"></a>Mosquitto 테스트</h2><pre><code>- https://ddnemo.tistory.com/120\n    a. https://midnightcow.tistory.com/36\n- https://deneb21.tistory.com/416</code></pre><h1 id=\"RabitMQ-특성\"><a href=\"#RabitMQ-특성\" class=\"headerlink\" title=\"RabitMQ 특성\"></a>RabitMQ 특성</h1><p>1) 신뢰성<br>    - RabbitMQ는 성능과 맞바꿀 수 있는 다양한 특성들을 제공하는데, 안정성, 영속성 배달 확인, 발행자 보증, 그리고 고가용성등이 있다.</p>\n<p>2) 유연한 라우팅<br>    - 메시지는 큐에 도착하기 전에 exchange를 통해 라우트된다.<br>    - RabbitMQ는 전형적인 라우팅 로직을 위한 몇몇 내장된 exchange 타입을 가지고 있다.<br>    - 좀 더 복잡한 라우팅을 위해서 exchange들을 서로 연결하거나, 자신만의 exchange 타입을 플러그인으로 만들수도 있다.</p>\n<p>3) 클러스터링<br>    - 지역 네트워크상에서 여러개의 RabbitMQ 서버들이 함께 클러스터링되어 단일한 논리적 브로커를 형성할 수 있다.</p>\n<p>4) 연합체(Federation)<br>    - 클러스터링이 허용하는 것보다는 좀 더 느슨하고 신뢰할 필요가 없는 연결을 필요로 하는 서버들에 대해서, RabbitMQ는 연합모델(federation model)을 제공한다.</p>\n<p>5) 고가용적 큐<br>    - 큐는 클러스터내의 여러 머신들에 걸쳐 복제될 수 있는데, 이는 하드웨어 결함시에 여러분의 메시지의 안전을 보장한다.</p>\n<p>6) 다중 프로토콜<br>    - RabbitMQ는 다양한 형태의 메시징 프로토콜을 통해서 메시징을 제공한다.</p>\n<p>7) 많은 클라이언트<br>    - 여러분이 생각할 수 있는 거의 모든 언어에 대해 RabbitMQ 클라이언트가 있다.</p>\n<p>8) 관리 UI<br>    - RabbitMQ는 메시지 브로커의 모든 것들을 모니터하고 컨트롤할 수 있는 사용하기 쉬운 관리 UI를 함께 제공한다.</p>\n<p>9) 추적(Tracing)<br>    - 만약 여러분의 메시징 시스템이 잘못 동작한다면, RabbitMQ는 여러분이 무엇이 잘못되고 있는지를 밝혀낼 수 있도록 추적 기능을 제공한다.</p>\n<p>10) 플러그인 시스템<br>    - RabbitMQ는 다른 방법으로 RabbitMQ를 확장시킬 수 있는 다양한 플러그인을 제공하는데, 여러분 스스로 플러그인을 제작할 수도 있다.</p>\n<p>11) 용어정리<br>    - Vhost(virutal host)<br>        a. Virtual Host를 통해서 하나의 RabbitMQ 인스턴스 안에 사용하고 있는 Application을 분리할 수 있습니다.<br>    - Connection<br>        a. 물리적인 TCP Connection, HTTPS -&gt; TLS(SSL) Connection을 사용<br>    - Channel<br>        a. 하나의 물리적인 Connection 내에 생성되는 가상의 Connection<br>        b. Consumer의 process나 thread는 각자 Channel을 통해 Queue에 연결 될 수 있습니다.</p>\n<p>12) Message Queue 및 Message 보존방법<br>    - RabbitMQ server가 종료(어떤 이유에서든지)후 재기동하면, 기본적으로 Queue는 모두 제거됩니다.<br>    - 이를 막기 위해서는 Queue를 생성할 때, Durable 옵션에 true를 주고 생성해야 하며, Producer가 메세지를 발송할 때, PERSISTENT_TEXT_PLAIN 옵션을 주어야 메세지가 보존됩니다.<br>    a. Queue 생성<br>    <div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rabbitmqChannel.queueDeclare(rabbitmqQueueName, <span class=\"literal\">true</span>, <span class=\"literal\">false</span>, <span class=\"literal\">false</span>, null); //QueueName 다음의 <span class=\"literal\">true</span>가 durable option</span><br></pre></td></tr></table></figure></div></p>\n<pre><code>b. Message 발송\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rabbitmqChannel.basicPublish(exchangeName, routingKey, MessageProperties.PERSISTENT_TEXT_PLAIN, message.getBytes());</span><br></pre></td></tr></table></figure></div></code></pre><p>13) 라이센스 있음(<a href=\"https://ko.wikipedia.org/wiki/%EB%AA%A8%EC%A7%88%EB%9D%BC_%EA%B3%B5%EC%9A%A9_%ED%97%88%EA%B0%80%EC%84%9C\" target=\"_blank\" rel=\"noopener\">https://ko.wikipedia.org/wiki/%EB%AA%A8%EC%A7%88%EB%9D%BC_%EA%B3%B5%EC%9A%A9_%ED%97%88%EA%B0%80%EC%84%9C</a>)</p>\n<h1 id=\"RabitMQ-개념-5개\"><a href=\"#RabitMQ-개념-5개\" class=\"headerlink\" title=\"RabitMQ 개념(5개)\"></a>RabitMQ 개념(5개)</h1><p><a href=\"https://user-images.githubusercontent.com/62123161/95046057-48662880-071e-11eb-9d24-ae595f6a6042.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/95046057-48662880-071e-11eb-9d24-ae595f6a6042.png\" alt=\"image\"></a><br>    - Producer<br>        a. 메세지를 생성하고 발송하는 주체<br>        b.Producer는 Queue에 직접 접근하지 않고, 항상 Exchange를 통해 접근<br>    - Consumer<br>        a. 메세지를 수신하는 주체<br>        b. Consumer는 Queue에 직접 접근하여 메세지를 가져옴<br>    - Queue<br>        a. 메세지들이 Consumer가 소비하기 전까지 보관되는 장소<br>        b. 같은 이름과 같은 설정으로 Queue를 생성하면 에러 없이 기존 Queue에 연결되지만, 같은 이름과 다른 설정으로 Queue를 생성하려고 시도하면 에러<br>    - Exchange<br>        a. Producer들에게서 전달받은 메세지들을 어떤 Queue들에게 발송할지를 결정하는 객체<br>        b. 총 4개의 Type을 보유하며, Router 개념으로 생각하면 됨.<br>            i. Direct(default)<br>                1. Routing key가 정확히 일치하는 Queue에 메세지 전송(Unicast)<br>                2. 예시<br>                <a href=\"https://user-images.githubusercontent.com/62123161/95046159-8cf1c400-071e-11eb-8106-45aace9bedc2.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/95046159-8cf1c400-071e-11eb-8106-45aace9bedc2.png\" alt=\"image\"></a><br>                (error 메세지만 저장소에 기록하고, info와 warning을 포함한 모든 정보를 디스플레이에 출력할 때를 나타내는 모식도)<br>            ii. Topic<br>                1. Routing key 패턴이 일치하는 Queue에 메세지 전송(Multicast)<br>                2. 예시<br>                <a href=\"https://user-images.githubusercontent.com/62123161/95046205-b14da080-071e-11eb-901a-b31040e5ed16.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/95046205-b14da080-071e-11eb-901a-b31040e5ed16.png\" alt=\"image\"></a><br>                (라우팅 키가 example.orange.rabbit 인 경우 메세지가 Q1, Q2에 모두 전달되고, 라우팅 키가 example.orange.turtle 인 경우 메세지가 Q1에만 전달. 라우팅 키가 lazy.grape.rabbit인 경우엔 메세지가 Q2에 한 번만 전달이 됩니다.)<br>            iii. Headers<br>                1. [key:value]로 이루어진 header 값을 기준으로 일치하는 Queue에 메세지 전송(Multicast)<br>                2. 예시<br>                <a href=\"https://user-images.githubusercontent.com/62123161/95046280-d8a46d80-071e-11eb-9236-aed3b3cb2760.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/95046280-d8a46d80-071e-11eb-9236-aed3b3cb2760.png\" alt=\"image\"></a><br>            iv. Fanout<br>                1. 해당 Exchange에 등록된 모든 Queue에 메세지 전송(Broadcast)<br>                2. 예시<br>                <a href=\"https://user-images.githubusercontent.com/62123161/95046342-f83b9600-071e-11eb-8f27-e5352204a36e.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/95046342-f83b9600-071e-11eb-8f27-e5352204a36e.png\" alt=\"image\"></a></p>\n<pre><code>- Binding\n    a. Exchange에게 메세지를 라우팅 할 규칙을 지정하는 행위</code></pre><h1 id=\"HiveMQ-특성\"><a href=\"#HiveMQ-특성\" class=\"headerlink\" title=\"HiveMQ 특성\"></a>HiveMQ 특성</h1><pre><code>- 자세한 정보가 너무 없음.\n- 샘플소스코드에 대한 링크는 아래와 같음\n    a. https://www.hivemq.com/blog/how-to-get-started-with-mqtt/\n- 다른MQTT Message Broker과 다른점\n    a. WebSockets native support for all common WebSocket versions\n        i. 웹소켓을 지원함은 물론이고, 클라이언트 인증서를 통한 통신이 가능함.\n    b. PROXY protocol for advanced load balancer integrations\n        i. TCP 프로토콜(로드밸런서) 뒤에 위치하는 것이 효율이 가장 좋다고 함.\n    c. Open-source extension SDK an extension framework to extend HiveMQ with custom business logic or integrate practically any system into HiveMQ\n    d. HiveMQ Enterprise Extensions for Kafka to seamlessly integrate MQTT messages with one or more Kafka clusters\n        i. HiveMQ MQTT 브로커에서 메시지를 버퍼링하여 Kafka 클러스터를 일시적으로 사용할 수 없을 때마다 고가용성 및 장애 허용성을 보장\n        [![image](https://user-images.githubusercontent.com/62123161/95046590-6c763980-071f-11eb-97aa-41faad3acc20.png)](https://user-images.githubusercontent.com/62123161/95046590-6c763980-071f-11eb-97aa-41faad3acc20.png)\n    e. HiveMQ Enterprise Security Extension to secure your MQTT deployment\n        i. SQL 데이터베이스 를 통한 인증 및 권한 부여에 대한 완전한 지원\n        ii. JSON 웹 토큰을 통한 인증에 대한 완전한 지원\n        iii. 클라이언트별로 주제 권한을 개별화하는 동적 권한 자리 표시 자\n        iv. 데이터를 모니터링하고 잠재적 인 보안 위반을 추적하는 데 도움이되는 자세한 액세스 로그\n        v. 액세스 제어 에 대한 역할 기반 액세스 제어 (RBAC)를 포함 HiveMQ 제어 센터 (ESE 버전 1.2.0 이상)\n- 라이센스 있음(https://www.hivemq.com/hivemq/editions/)</code></pre><h1 id=\"Mosca-MQTT\"><a href=\"#Mosca-MQTT\" class=\"headerlink\" title=\"Mosca MQTT\"></a>Mosca MQTT</h1><pre><code>- 특성(https://github.com/moscajs/mosca)\n    a. 구조가 단순\n    b. 사용 환경에 따라 customizing 하기도 용이\n        i. REDIS나 MongoDB를 활용한 storage option도 지원\n    c. 무료 사용이 가능한 license\n    d. MQTT 3.1, 3.1.1 호환.\n    e. QoS 0 또는 QoS 1 지원.\n    f. 클라이언트 인증(토픽을 제한하는데 사용)\n        i. #authenticate\n        ii. #authorizePublish\n        iii. #authorizeSubscribe\n    g. MIT License</code></pre>","text":"공통적인 MQTT 특성QOS (QUALITY OF SERVICE)MQTT는 시스템에 참여하는 장치들의 처리 능력, 네트워크 대역폭, 메시지 오버헤드 등 주변상황에 맞게 시스템이 동작할 수 있도록 3단계 QoS(Quality of Service) 를 제","link":"","raw":null,"photos":[],"categories":[{"name":"mqtt","slug":"mqtt","count":1,"path":"api/categories/mqtt.json"}],"tags":[{"name":"MQTT","slug":"MQTT","count":1,"path":"api/tags/MQTT.json"},{"name":"Message","slug":"Message","count":1,"path":"api/tags/Message.json"},{"name":"Broker","slug":"Broker","count":1,"path":"api/tags/Broker.json"}]}]}