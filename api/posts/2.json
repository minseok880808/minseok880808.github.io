{"total":17,"pageSize":10,"pageCount":2,"data":[{"title":"DynamoDB","slug":"DynamoDB","date":"2020-05-06T02:26:44.000Z","updated":"2020-05-11T01:12:35.496Z","comments":true,"pin":null,"path":"api/articles/DynamoDB.json","excerpt":"","keywords":null,"cover":"https://user-images.githubusercontent.com/62123161/81145311-fd01ef80-8fb0-11ea-9fe7-e2455a219030.png","content":"<h2 id=\"개발환경-구축\"><a href=\"#개발환경-구축\" class=\"headerlink\" title=\"개발환경 구축\"></a>개발환경 구축</h2><p>※ 기본 개발환경</p>\n<ul>\n<li>IntelliJ</li>\n<li>Java, Spring</li>\n<li>AWS Console</li>\n</ul>\n<h2 id=\"DynamoDB-설명\"><a href=\"#DynamoDB-설명\" class=\"headerlink\" title=\"DynamoDB 설명\"></a>DynamoDB 설명</h2><ol>\n<li>다 필요없다. 서버쪽 공부한 사람이라면 No SQL이라는 단어 하나만으로도 설명이 된다.</li>\n<li>RDB보다 아주 상당히 비싸다. 요금 기준이 읽기, 쓰기니까 그냥 한번 Access에도 요금이 발생한다.</li>\n<li>현재는 DynamoDB를 사용하기보다는 RDB를 사용하거나 Kinesis, SQS등 대체자원들을 검토중이다.</li>\n<li>솔직히 NoSQL의 특징을 여기에 쓰기에는 구글에 너무 많고 좋은 내용이 많으니 검색해보기 바란다.(검색의 생활화)</li>\n</ol>\n<h3 id=\"1-테이블-만들기\"><a href=\"#1-테이블-만들기\" class=\"headerlink\" title=\"1) 테이블 만들기\"></a>1) 테이블 만들기</h3><p><a href=\"https://user-images.githubusercontent.com/62123161/81145311-fd01ef80-8fb0-11ea-9fe7-e2455a219030.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/81145311-fd01ef80-8fb0-11ea-9fe7-e2455a219030.png\" alt=\"dynamodb_01\"></a></p>\n<ul>\n<li>별내용 없다. Table Name과 PK(PrimaryKey), SK(SortKey)를 지정해주면 된다.</li>\n<li>주의할 점은, Sort키를 잘 지정해야 한다는 것이다. 테이블이 로그성 테이블이 될지, 최신정보를 가질지 여부는 SK에 달려있으며, 조회에도 사용이 된다.(조회를 원활하게 하기 위해서는 SortKey를 지정 안해도된다.)</li>\n</ul>\n<h3 id=\"2-테이블-리스트-화면\"><a href=\"#2-테이블-리스트-화면\" class=\"headerlink\" title=\"2. 테이블 리스트 화면\"></a>2. 테이블 리스트 화면</h3><p><a href=\"https://user-images.githubusercontent.com/62123161/81145375-1f940880-8fb1-11ea-927c-1181dffbf9a1.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/81145375-1f940880-8fb1-11ea-927c-1181dffbf9a1.png\" alt=\"dynamodb_02\"></a></p>\n<ul>\n<li>테이블 생성은 완료되었으며, 기본 설정 외에 Ondemand 설정, 백업설정, 글로벌테이블, 인덱싱 등 자질구레한 설정들이 있다.</li>\n<li>테이블 성격에 맞게 해당 기능을 설정하면 되고, 기본적으로 Matrix는 제공을 해주니 CloudWatch정도만 추가설정 해주면 Table에 문제가 생겼을 경우 알람을 받을 수 있다.</li>\n</ul>\n<h3 id=\"2-소스\"><a href=\"#2-소스\" class=\"headerlink\" title=\"2) 소스\"></a>2) 소스</h3><h4 id=\"Gradle\"><a href=\"#Gradle\" class=\"headerlink\" title=\"Gradle\"></a>Gradle</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><figcaption><span>Dependency</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    implementation <span class=\"string\">'com.amazonaws:aws-lambda-java-core:1.2.0'</span></span><br><span class=\"line\">    implementation <span class=\"string\">'com.amazonaws:aws-lambda-java-events:2.2.6'</span></span><br><span class=\"line\">    compile group: <span class=\"string\">'com.amazonaws'</span>, name: <span class=\"string\">'aws-java-sdk-dynamodb'</span>, version: <span class=\"string\">'1.11.584'</span></span><br><span class=\"line\">    compile group: <span class=\"string\">'org.projectlombok'</span>, name: <span class=\"string\">'lombok'</span>, version: <span class=\"string\">'1.16.20'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"Define\"><a href=\"#Define\" class=\"headerlink\" title=\"Define\"></a>Define</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><figcaption><span>기본 Static 설정(사실 Static으로 두지 않아도 된다... 그냥 난 편의상..)</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static AmazonDynamoDB client = AmazonDynamoDBClientBuilder.standard().withRegion(Regions.US_EAST_1).build();</span><br><span class=\"line\">static DynamoDB dynamoDB = new DynamoDB(client);</span><br><span class=\"line\"> </span><br><span class=\"line\">static String tableName = <span class=\"string\">\"(TABLENAME)\"</span>;</span><br><span class=\"line\">static Map&lt;String, String&gt; mapAttribute = new HashMap&lt;String, String&gt;();</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"GET-Table-Information\"><a href=\"#GET-Table-Information\" class=\"headerlink\" title=\"GET Table Information\"></a>GET Table Information</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><figcaption><span>Table 정보 획득</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AmazonDynamoDB client = AmazonDynamoDBClientBuilder.standard().withRegion(Regions.US_EAST_1).build();</span><br><span class=\"line\">DescribeTableRequest request = new DescribeTableRequest().withTableName(tableName);</span><br><span class=\"line\">DescribeTableResult response = client.describeTable(request);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">for</span>(int i= 0; i&lt; response.getTable().getAttributeDefinitions().size();i++)&#123;</span><br><span class=\"line\">    mapAttribute.put(response.getTable().getAttributeDefinitions().get(i).getAttributeName(), response.getTable().getAttributeDefinitions().get(i).getAttributeType());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"Items-Insert\"><a href=\"#Items-Insert\" class=\"headerlink\" title=\"Items Insert\"></a>Items Insert</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><figcaption><span>Insert [Table] into (KEY) VALUES (VALUE)</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    private static String createItems(DynamoDB dynamoDB, String tableName, String primaryKey, String primaryValue, String rangeKey, String rangeValue, String createKeyValue) &#123;</span><br><span class=\"line\">        Table table = dynamoDB.getTable(tableName);</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            String[] createArr;</span><br><span class=\"line\">            UpdateItemOutcome outcome=null;</span><br><span class=\"line\">            createArr = createKeyValue.split(<span class=\"string\">\",\"</span>);</span><br><span class=\"line\">            Map&lt;String, AttributeValue&gt; values = new HashMap&lt;String, AttributeValue&gt;();</span><br><span class=\"line\"> </span><br><span class=\"line\">            <span class=\"keyword\">if</span>((createArr.length &amp; 1) == 0) &#123;</span><br><span class=\"line\">                //Even(정상)</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(int i=0; i&lt;createArr.length;i++)&#123;</span><br><span class=\"line\">                    values.put(createArr[i], new AttributeValue().withS(createArr[i+1]));</span><br><span class=\"line\"> </span><br><span class=\"line\">                    i++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                values.put(primaryKey,new AttributeValue().withN(primaryValue));</span><br><span class=\"line\">                values.put(rangeKey, new AttributeValue().withS(rangeValue));</span><br><span class=\"line\"> </span><br><span class=\"line\">                PutItemResult result = client.putItem(new PutItemRequest(tableName, values));</span><br><span class=\"line\">                String str = result.getSdkResponseMetadata().toString();</span><br><span class=\"line\">//                Item item = new Item()</span><br><span class=\"line\">//                        .withPrimaryKey(primaryKey, primaryValue)</span><br><span class=\"line\">//                        .withString(rangeKey, rangeValue);</span><br><span class=\"line\">//</span><br><span class=\"line\">//                table.putItem(item);</span><br><span class=\"line\">                // Confirm</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"Displaying updated item...\"</span>);</span><br><span class=\"line\">                System.out.println(str);</span><br><span class=\"line\">                <span class=\"built_in\">return</span> str;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                //Odd(비정상)</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"UpdateArr Odd...\"</span>);</span><br><span class=\"line\">                <span class=\"built_in\">return</span> <span class=\"string\">\"UpdateArr Odd...\"</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            System.err.println(<span class=\"string\">\"Cannot create items.\"</span>);</span><br><span class=\"line\">            System.err.println(e.getMessage());</span><br><span class=\"line\">            <span class=\"built_in\">return</span> e.getMessage();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"Items-Update\"><a href=\"#Items-Update\" class=\"headerlink\" title=\"Items Update\"></a>Items Update</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><figcaption><span>UPDATE [TABLE] SET (KEY_VALUE)</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//업데이트</span><br><span class=\"line\">private static String updateItem(DynamoDB dynamoDB, String tableName, String primaryKey, String primaryValue, String rangeKey, String rangeValue, String updateKeyValue) &#123;</span><br><span class=\"line\">    Table table = dynamoDB.getTable(tableName);</span><br><span class=\"line\"> </span><br><span class=\"line\">    long time3 = (new Date()).getTime();</span><br><span class=\"line\">    Date date3 = new Date();</span><br><span class=\"line\">    date3.setTime(time3);</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        //2개 이상 업데이트를 진행할 때</span><br><span class=\"line\">        UpdateItemSpec updateItemSpec = new UpdateItemSpec()</span><br><span class=\"line\">                .withPrimaryKey(primaryKey, Integer.parseInt(primaryValue), rangeKey, rangeValue)</span><br><span class=\"line\">                .withReturnValues(ReturnValue.ALL_NEW);</span><br><span class=\"line\">        //split</span><br><span class=\"line\">        String[] updateArr;</span><br><span class=\"line\">        UpdateItemOutcome outcome=null;</span><br><span class=\"line\">        updateArr = updateKeyValue.split(<span class=\"string\">\",\"</span>);</span><br><span class=\"line\">        HashMap&lt;String, String&gt; nameMap = new HashMap&lt;String, String&gt;();</span><br><span class=\"line\">        HashMap&lt;String, Object&gt; valueMap = new HashMap&lt;String, Object&gt;();</span><br><span class=\"line\">        String expressionMessage = <span class=\"string\">\"set \"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>((updateArr.length &amp; 1) == 0) &#123;</span><br><span class=\"line\">            //Even(정상)</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(int i=0; i&lt;updateArr.length;i++)&#123;</span><br><span class=\"line\">                nameMap.put(<span class=\"string\">\"#\"</span>+updateArr[i], updateArr[i]);</span><br><span class=\"line\">                valueMap.put(<span class=\"string\">\":val\"</span>+updateArr[i],updateArr[i+1]);</span><br><span class=\"line\"> </span><br><span class=\"line\">                expressionMessage += <span class=\"string\">\"#\"</span>+updateArr[i] + <span class=\"string\">\"=\"</span>+<span class=\"string\">\":val\"</span>+updateArr[i];</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i/2&lt;updateArr.length/2 -1)&#123;</span><br><span class=\"line\">                    expressionMessage += <span class=\"string\">\" , \"</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            updateItemSpec.withUpdateExpression(expressionMessage)</span><br><span class=\"line\">                        .withNameMap(nameMap)</span><br><span class=\"line\">                        .withValueMap(valueMap);</span><br><span class=\"line\"> </span><br><span class=\"line\">            outcome =  table.updateItem(updateItemSpec);</span><br><span class=\"line\">            // Confirm</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"Displaying updated item...\"</span>);</span><br><span class=\"line\">            System.out.println(outcome.getItem().toJSONPretty());</span><br><span class=\"line\">            <span class=\"built_in\">return</span> outcome.getItem().toJSONPretty();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            //Odd(비정상)</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"UpdateArr Odd...\"</span>);</span><br><span class=\"line\">            <span class=\"built_in\">return</span> <span class=\"string\">\"UpdateArr Odd...\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; catch (Exception e) &#123;</span><br><span class=\"line\">        System.err.println(<span class=\"string\">\"Cannot add an attribute in \"</span> + tableName);</span><br><span class=\"line\">        System.err.println(e.getMessage());</span><br><span class=\"line\">        <span class=\"built_in\">return</span> e.getMessage();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"Items-Select-WHERE\"><a href=\"#Items-Select-WHERE\" class=\"headerlink\" title=\"Items Select(WHERE)\"></a>Items Select(WHERE)</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><figcaption><span>SELECT * FROM [TABLE] WHERE <String></span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Select(조건)</span><br><span class=\"line\">private static String selectWhereItem(DynamoDB dynamoDB, String tableName, String primaryKey, String primaryValue, String rangeKey, String rangeValue, String <span class=\"built_in\">where</span>) &#123;</span><br><span class=\"line\">    Table table = dynamoDB.getTable(tableName);</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        Item item = table.getItem(primaryKey,Integer.parseInt(primaryValue),rangeKey,rangeValue,<span class=\"built_in\">where</span>,null);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Displaying retrieved items...\"</span>);</span><br><span class=\"line\">        System.out.println(item.toJSONPretty());</span><br><span class=\"line\">        <span class=\"built_in\">return</span> item.toString();</span><br><span class=\"line\">    &#125; catch (Exception e) &#123;</span><br><span class=\"line\">        System.err.println(<span class=\"string\">\"Cannot retrieve items.\"</span>);</span><br><span class=\"line\">        System.err.println(e.getMessage());</span><br><span class=\"line\">        <span class=\"built_in\">return</span> e.getMessage();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"Items-Select\"><a href=\"#Items-Select\" class=\"headerlink\" title=\"Items Select\"></a>Items Select</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><figcaption><span>SELECT * FROM [TABLE] </span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Select(전체)</span><br><span class=\"line\">private static String selectItem(DynamoDB dynamoDB, String tableName, String primaryKey, String primaryValue, String rangeKey, String rangeValue) &#123;</span><br><span class=\"line\">    Table table = dynamoDB.getTable(tableName);</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        Item item = table.getItem(primaryKey,Integer.parseInt(primaryValue),rangeKey,rangeValue);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Displaying retrieved items...\"</span>);</span><br><span class=\"line\">        System.out.println(item.toJSONPretty());</span><br><span class=\"line\">        <span class=\"built_in\">return</span> item.toString();</span><br><span class=\"line\">    &#125; catch (Exception e) &#123;</span><br><span class=\"line\">        System.err.println(<span class=\"string\">\"Cannot retrieve items.\"</span>);</span><br><span class=\"line\">        System.err.println(e.getMessage());</span><br><span class=\"line\">        <span class=\"built_in\">return</span> e.getMessage();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"Items-Delete-당연히-조건-전체삭제는-테이블-Drop-Create-하는게-훨씬낫다\"><a href=\"#Items-Delete-당연히-조건-전체삭제는-테이블-Drop-Create-하는게-훨씬낫다\" class=\"headerlink\" title=\"Items Delete(당연히 조건- 전체삭제는 테이블 Drop/Create 하는게 훨씬낫다)\"></a>Items Delete(당연히 조건- 전체삭제는 테이블 Drop/Create 하는게 훨씬낫다)</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><figcaption><span>DELETE FROM [TABLE] WHERE <String></span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//삭제</span><br><span class=\"line\">    public static String deleteItem(DynamoDB dynamoDB, String tableName, String primaryKey, String primaryValue, String rangeKey, String rangeValue) &#123;</span><br><span class=\"line\">        Table table = dynamoDB.getTable(tableName);</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            DeleteItemSpec deleteItemSpec = new DeleteItemSpec()</span><br><span class=\"line\">                    .withPrimaryKey(primaryKey, Integer.parseInt(primaryValue), rangeKey, rangeValue)</span><br><span class=\"line\">//                    .withConditionExpression(<span class=\"string\">\"#ip = :val\"</span>)</span><br><span class=\"line\">//                    .withNameMap(new NameMap().with(<span class=\"string\">\"#ip\"</span>, <span class=\"string\">\"InProduction\"</span>))</span><br><span class=\"line\">//                    .withValueMap(new ValueMap().withBoolean(<span class=\"string\">\":val\"</span>, <span class=\"literal\">false</span>))</span><br><span class=\"line\">                    .withReturnValues(ReturnValue.ALL_OLD);</span><br><span class=\"line\">            DeleteItemOutcome outcome = table.deleteItem(deleteItemSpec);</span><br><span class=\"line\"> </span><br><span class=\"line\">            // Confirm</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"Displaying deleted item...\"</span>);</span><br><span class=\"line\">            System.out.println(outcome.getItem().toJSONPretty());</span><br><span class=\"line\">            <span class=\"built_in\">return</span> outcome.getItem().toJSONPretty();</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            System.err.println(<span class=\"string\">\"Cannot delete item in \"</span> + tableName);</span><br><span class=\"line\">            System.err.println(e.getMessage());</span><br><span class=\"line\">            <span class=\"built_in\">return</span> e.getMessage();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"3-결론\"><a href=\"#3-결론\" class=\"headerlink\" title=\"3) 결론\"></a>3) 결론</h3><ul>\n<li>솔직히, 비용만 아니면 이보다 더 좋을수 없다고 느낄정도로 퍼포먼스가 최상이다.</li>\n<li>원가절감을 최우선 과제중 하나로 생각하는 경동에서는 원가절감하자 그냥 ㅡㅡ… 개발자가 고생해서 퍼포먼스를 비슷한 수준까지 끌어올려야지 어떻게하겠나.</li>\n</ul>\n","text":"개발환경 구축※ 기본 개발환경IntelliJJava, SpringAWS ConsoleDynamoDB 설명다 필요없다. 서버쪽 공부한 사람이라면 No SQL이라는 단어 하나만으로도 설명이 된다.RDB보다 아주 상당히 비싸다. 요금 기준이 읽기, 쓰기니까","link":"","raw":null,"photos":[],"categories":[{"name":"tip","slug":"tip","count":17,"path":"api/categories/tip.json"}],"tags":[{"name":"AWS","slug":"AWS","count":14,"path":"api/tags/AWS.json"},{"name":"dynamo","slug":"dynamo","count":1,"path":"api/tags/dynamo.json"},{"name":"noSQL","slug":"noSQL","count":1,"path":"api/tags/noSQL.json"}]},{"title":"iotCore","slug":"iotCore","date":"2020-05-05T23:47:30.000Z","updated":"2020-05-11T01:14:12.653Z","comments":true,"pin":null,"path":"api/articles/iotCore.json","excerpt":"","keywords":null,"cover":"https://user-images.githubusercontent.com/62123161/81146079-8d8cff80-8fb2-11ea-9c70-659a95ce13a1.png","content":"<h2 id=\"개발환경-구축\"><a href=\"#개발환경-구축\" class=\"headerlink\" title=\"개발환경 구축\"></a>개발환경 구축</h2><p>※ 기본 개발환경</p>\n<ul>\n<li>IntelliJ</li>\n<li>Java, Spring</li>\n<li>AWS Console</li>\n</ul>\n<h2 id=\"IoT-Core-설명\"><a href=\"#IoT-Core-설명\" class=\"headerlink\" title=\"IoT Core 설명\"></a>IoT Core 설명</h2><ol>\n<li>AWS IoT Core는 커넥티드 디바이스가 쉽고 안전하게 클라우드 애플리케이션 및 다른 디바이스와 상호 작용할 수 있게 해주는 관리형 클라우드 서비스입니다. AWS IoT Core는 수십억 개의 디바이스와 수조 건의 메시지를 지원하며, 안전하고 안정적으로 이러한 메시지를 처리하여 AWS 엔드포인트 및 다른 디바이스로 라우팅할 수 있습니다. AWS IoT Core의 경우, 디바이스가 연결되어 있지 않더라도 언제나 애플리케이션에서 모든 디바이스를 추적하고 디바이스와 통신할 수 있습니다.</li>\n<li>또한 AWS IoT Core를 사용하면 인프라를 관리할 필요 없이, AWS Lambda, Amazon Kinesis, Amazon S3, Amazon SageMaker, Amazon DynamoDB, Amazon CloudWatch, AWS CloudTrail, Amazon QuickSight 및 Alexa Voice Service와 같은 AWS 및 Amazon 서비스를 사용하여, 커넥티드 디바이스에서 생성한 데이터를 수집, 처리 및 분석하고 이를 기반으로 운영하는 IoT 애플리케이션을 손쉽게 구축할 수 있습니다.</li>\n<li>현재 경동에서는 AWS IoT Core 플랫폼을 Converter쪽에서 주로 컨트롤 하고 있다.(자세한 설명은 생략한다..) </li>\n</ol>\n<p><a href=\"https://user-images.githubusercontent.com/62123161/81146079-8d8cff80-8fb2-11ea-9c70-659a95ce13a1.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/81146079-8d8cff80-8fb2-11ea-9c70-659a95ce13a1.png\" alt=\"iotcore_01\"></a><br><em>초기화면 - 전체 디바이스에 대한 현황을 보여준다.</em></p>\n<ul>\n<li>기존 다른 서비스와 다른 점으로는 하나의 플랫폼이 모든 서비스의 디바이스를 관리한다는 점. (서비스별로 그룹화 불가능 / 물론, Additional Value로 값을 지정할 수는 있음.)</li>\n<li>경동은 Manage, Secure, Act, Test 네가지 속성만을 사용한다. (Setting은 무시 ㅡㅡ;)</li>\n</ul>\n<h3 id=\"1-Manage\"><a href=\"#1-Manage\" class=\"headerlink\" title=\"1) Manage\"></a>1) Manage</h3><h4 id=\"Things\"><a href=\"#Things\" class=\"headerlink\" title=\"Things\"></a>Things</h4><p><a href=\"https://user-images.githubusercontent.com/62123161/81146081-8e259600-8fb2-11ea-91dc-6815331e657f.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/81146081-8e259600-8fb2-11ea-91dc-6815331e657f.png\" alt=\"iotcore_02\"></a></p>\n<ul>\n<li>Things는 디바이스 전체가 나오는 화면 / 검색을 통하여 특정 디바이스를 찾을 수 있으며, 연결이 됬는지 안됬는지 확인할 수 있다.(명령어 예-  connectivity.connected:true)</li>\n</ul>\n<h4 id=\"Type\"><a href=\"#Type\" class=\"headerlink\" title=\"Type\"></a>Type</h4><p><a href=\"https://user-images.githubusercontent.com/62123161/81146082-8e259600-8fb2-11ea-9f1f-1b7b523a9f28.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/81146082-8e259600-8fb2-11ea-9f1f-1b7b523a9f28.png\" alt=\"iotcore_03\"></a></p>\n<ul>\n<li>디바이스 별로 Section을 구분할 수 없기에 Type으로 지정할 수 있다.</li>\n</ul>\n<h4 id=\"Thing-groups\"><a href=\"#Thing-groups\" class=\"headerlink\" title=\"Thing groups\"></a>Thing groups</h4><p><a href=\"https://user-images.githubusercontent.com/62123161/81146071-8b2aa580-8fb2-11ea-9dee-0fff15dabd08.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/81146071-8b2aa580-8fb2-11ea-9dee-0fff15dabd08.png\" alt=\"iotcore_04\"></a></p>\n<ul>\n<li>현재는 스마트톡 밖에 없지만, 향후 서비스별로 추가가 될 예정이다.</li>\n</ul>\n<h4 id=\"Secure\"><a href=\"#Secure\" class=\"headerlink\" title=\"Secure\"></a>Secure</h4><h5 id=\"Certificates\"><a href=\"#Certificates\" class=\"headerlink\" title=\"Certificates\"></a>Certificates</h5><p><a href=\"https://user-images.githubusercontent.com/62123161/81146073-8c5bd280-8fb2-11ea-992d-b30143ac216c.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/81146073-8c5bd280-8fb2-11ea-992d-b30143ac216c.png\" alt=\"iotcore_05\"></a></p>\n<ul>\n<li>IoT Core의 꽃이다. 인증서는 각 디바이스별로 갖고있으며, 인증서가 있어야만 Things에 등록될 수 있다.</li>\n<li>반대로 얘기하면 인증서가 없이는 어떤 디바이스라도(실제 우리제품이라고 하더라도) 등록이 안된다는 소리이며</li>\n<li>이 얘기를 조금 더 풀어 해석한다면, 관리가 철저해야 한다는 것이다. 인증서 잃어버리는 순간 모든 디바이스가 접속불가 상태가 발생할 수 있다.</li>\n</ul>\n<h5 id=\"Policies\"><a href=\"#Policies\" class=\"headerlink\" title=\"Policies\"></a>Policies</h5><p><a href=\"https://user-images.githubusercontent.com/62123161/81146074-8c5bd280-8fb2-11ea-8f0c-f8c31f10cd69.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/81146074-8c5bd280-8fb2-11ea-8f0c-f8c31f10cd69.png\" alt=\"iotcore_06\"></a></p>\n<ul>\n<li>정책이다. 화면 하단의 Json처럼 접근에 대한 권한을 지정할 수 있다. 아직 IAM 권한에 대해 완벽하게 공부하지 않아서, 연습때문에 모든 권한을 풀어둔 상태다. 나중에는 수정해야한다.</li>\n<li>정책에서 연결된 인증서 관리도 가능하다. </li>\n<li>(인증서-정책)은 하나의 쌍이다. 둘 중 하나라도 없으면 서비스가 돌아가지 않는다.</li>\n</ul>\n<h4 id=\"Act\"><a href=\"#Act\" class=\"headerlink\" title=\"Act\"></a>Act</h4><h5 id=\"Rules\"><a href=\"#Rules\" class=\"headerlink\" title=\"Rules\"></a>Rules</h5><p><a href=\"https://user-images.githubusercontent.com/62123161/81146075-8cf46900-8fb2-11ea-89a0-1b77f260ecba.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/81146075-8cf46900-8fb2-11ea-89a0-1b77f260ecba.png\" alt=\"iotcore_07\"></a></p>\n<ul>\n<li>위에서 디바이스쪽의 꽃이 인증서였다면, 서버쪽의 꽃은 바로 이 Rule Engine이다.</li>\n<li>기본 Rule은 쿼리 시스템으로 움직인다. MQTT 기준 Topic주제를 통해서 들어오는 데이터는 모두 Rule Engine을 거친다고 보면된다.</li>\n<li>따라서, 디바이스에서 보내는 신호를 어떻게 처리할지 마음대로 정해줄 수 있다. (INPUT / OUTPUT 데이터 모두 컨트롤이 가능하다.)</li>\n</ul>\n<h4 id=\"Test\"><a href=\"#Test\" class=\"headerlink\" title=\"Test\"></a>Test</h4><p><a href=\"https://user-images.githubusercontent.com/62123161/81146077-8cf46900-8fb2-11ea-87f0-60331ea24adb.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/81146077-8cf46900-8fb2-11ea-87f0-60331ea24adb.png\" alt=\"iotcore_08\"></a></p>\n<ul>\n<li>직접 써보기 바란다. 더 이상의 설명은 생략함.</li>\n<li>힌트 : MQTT라고 써져있듯이 Topic을 통한 Pub/Sub 구조임. Topic을 Sub한 상태로 아래 Pub에 데이터를 싣어서 보내면 수신함.(뭔가 다 알려준거같은데…. 그래도모르면 질문….)</li>\n</ul>\n<h3 id=\"2-소스\"><a href=\"#2-소스\" class=\"headerlink\" title=\"2) 소스\"></a>2) 소스</h3><ul>\n<li>100줄도 안된다. (기타 자체 참조가 좀 들어가있지만, 그냥 보고 쓰기엔 나쁘지 않을 것이다.)</li>\n<li>그리고, 당연한 얘기지만 IoT Core는 Full Managing System이다. 따라서, Create Things만 있다.<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LambdaLogger logger = context.getLogger();</span><br><span class=\"line\">ResponseCreateThings responseCreateThings = new ResponseCreateThings();</span><br><span class=\"line\">try&#123;</span><br><span class=\"line\">    logger.log(<span class=\"string\">\"Start CreateThings\"</span>);</span><br><span class=\"line\">    SecretManagerHelper.getInstance();</span><br><span class=\"line\"> </span><br><span class=\"line\">    String queryString = String.format(<span class=\"string\">\"thingName:roomcon-%s\"</span>, request.macAddress);</span><br><span class=\"line\">    GetStatisticsRequest getStatisticsRequest = new GetStatisticsRequest().withQueryString(queryString);</span><br><span class=\"line\">    GetStatisticsResult result = AWSIoTHelper.getInstance().getAWSIot().getStatistics(getStatisticsRequest);</span><br><span class=\"line\"> </span><br><span class=\"line\">    Map&lt;String, String&gt; attributes = new HashMap&lt;String, String&gt;();</span><br><span class=\"line\">    attributes.put(<span class=\"string\">\"ADDITIONAL_VALUE\"</span>, request.additionalValue);</span><br><span class=\"line\">    attributes.put(<span class=\"string\">\"THINGS_TYPE\"</span>, request.thingsType);</span><br><span class=\"line\">    AttributePayload attributePayload = new AttributePayload().withAttributes(attributes);//.addAttributesEntry(<span class=\"string\">\"ADDITIONAL_VALUE\"</span>, request.additionalValue);</span><br><span class=\"line\"> </span><br><span class=\"line\">    String thingName = String.format(<span class=\"string\">\"roomcon-%s\"</span>, request.macAddress);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(result.getStatistics().getCount() == 0)&#123;</span><br><span class=\"line\">        String groupName = <span class=\"string\">\"etc\"</span>;</span><br><span class=\"line\">        String secureArn = Config.IOT_CORE_NODE.path(<span class=\"string\">\"IOT_CORE_SECURE_1ST_ARN\"</span>).asText();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(request.thingsType.equals(<span class=\"string\">\"001\"</span>))&#123;</span><br><span class=\"line\">            groupName = <span class=\"string\">\"nr-30d\"</span>;</span><br><span class=\"line\">            secureArn = Config.IOT_CORE_NODE.path(<span class=\"string\">\"IOT_CORE_SECURE_1ST_ARN\"</span>).asText();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(request.thingsType.equals(<span class=\"string\">\"002\"</span>))&#123;</span><br><span class=\"line\">            groupName = <span class=\"string\">\"nr-35d\"</span>;</span><br><span class=\"line\">            secureArn = Config.IOT_CORE_NODE.path(<span class=\"string\">\"IOT_CORE_SECURE_2ND_ARN\"</span>).asText();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(request.thingsType.equals(<span class=\"string\">\"003\"</span>))&#123;</span><br><span class=\"line\">            groupName = <span class=\"string\">\"nr-40d\"</span>;</span><br><span class=\"line\">            secureArn = Config.IOT_CORE_NODE.path(<span class=\"string\">\"IOT_CORE_SECURE_2ND_ARN\"</span>).asText();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(request.thingsType.equals(<span class=\"string\">\"011\"</span>))&#123;</span><br><span class=\"line\">            groupName = <span class=\"string\">\"nrm-35d\"</span>;</span><br><span class=\"line\">            secureArn = Config.IOT_CORE_NODE.path(<span class=\"string\">\"IOT_CORE_SECURE_2ND_ARN\"</span>).asText();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        CreateThingRequest createThingRequest = new CreateThingRequest()</span><br><span class=\"line\">                .withThingName(thingName)</span><br><span class=\"line\">                .withAttributePayload(attributePayload)</span><br><span class=\"line\">                .withThingTypeName(<span class=\"string\">\"RoomController\"</span>);</span><br><span class=\"line\">        CreateThingResult createThingResult = AWSIoTHelper.getInstance().getAWSIot().createThing(createThingRequest);</span><br><span class=\"line\"> </span><br><span class=\"line\">        AddThingToThingGroupRequest addThingToThingGroupRequest = new AddThingToThingGroupRequest()</span><br><span class=\"line\">                .withThingArn(Config.IOT_CORE_NODE.path(<span class=\"string\">\"IOT_CORE_THINGS_ARN\"</span>).asText() + thingName)</span><br><span class=\"line\">                .withThingGroupArn(Config.IOT_CORE_NODE.path(<span class=\"string\">\"IOT_CORE_GROUP_ARN\"</span>).asText() + groupName)</span><br><span class=\"line\">                .withThingGroupName(groupName)</span><br><span class=\"line\">                .withThingName(thingName);</span><br><span class=\"line\">        AddThingToThingGroupResult addThingToThingGroupResult = AWSIoTHelper.getInstance().getAWSIot().addThingToThingGroup(addThingToThingGroupRequest);</span><br><span class=\"line\"> </span><br><span class=\"line\">        AttachThingPrincipalRequest attachThingPrincipalRequest = new AttachThingPrincipalRequest()</span><br><span class=\"line\">                .withThingName(thingName)</span><br><span class=\"line\">                .withPrincipal(secureArn);</span><br><span class=\"line\">        AttachThingPrincipalResult attachThingPrincipalResult = AWSIoTHelper.getInstance().getAWSIot().attachThingPrincipal(attachThingPrincipalRequest);</span><br><span class=\"line\"> </span><br><span class=\"line\">        responseCreateThings.isSuccess = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        responseCreateThings.successCode = 201;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        UpdateThingRequest updateThingRequest = new UpdateThingRequest()</span><br><span class=\"line\">                .withThingName(thingName)</span><br><span class=\"line\">                .withAttributePayload(attributePayload);</span><br><span class=\"line\">        UpdateThingResult updateThingResult = AWSIoTHelper.getInstance().getAWSIot().updateThing(updateThingRequest);</span><br><span class=\"line\"> </span><br><span class=\"line\">        responseCreateThings.isSuccess = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        responseCreateThings.successCode = 200;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; catch(Throwable e) &#123;</span><br><span class=\"line\">    logger.log(<span class=\"string\">\"Error CreateThings\"</span>);</span><br><span class=\"line\">    responseCreateThings.isSuccess = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    responseCreateThings.successCode = 500;</span><br><span class=\"line\">&#125; finally &#123;</span><br><span class=\"line\">    logger.log(<span class=\"string\">\"End CreateThings\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">return</span> responseCreateThings;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n</li>\n</ul>\n","text":"개발환경 구축※ 기본 개발환경IntelliJJava, SpringAWS ConsoleIoT Core 설명AWS IoT Core는 커넥티드 디바이스가 쉽고 안전하게 클라우드 애플리케이션 및 다른 디바이스와 상호 작용할 수 있게 해주는 관리형 클라우드 서","link":"","raw":null,"photos":[],"categories":[{"name":"tip","slug":"tip","count":17,"path":"api/categories/tip.json"}],"tags":[{"name":"AWS","slug":"AWS","count":14,"path":"api/tags/AWS.json"},{"name":"iot","slug":"iot","count":1,"path":"api/tags/iot.json"},{"name":"IoT Core","slug":"IoT-Core","count":1,"path":"api/tags/IoT-Core.json"}]},{"title":"SQS(Simple Queue Service)","slug":"SQS","date":"2020-05-02T04:54:16.000Z","updated":"2020-05-11T04:01:04.585Z","comments":true,"pin":null,"path":"api/articles/SQS.json","excerpt":"","keywords":null,"cover":"https://user-images.githubusercontent.com/62123161/80855560-14716d80-8c7d-11ea-9a58-fa748f417da0.png","content":"<ol>\n<li><p>Kinesis가 있으니 SQS를 쓸 일이 없겠다. 이걸 뭐하러 쓰나?</p>\n</li>\n<li><p>라고 생각했다면, 한참 더 공부해야한다. </p>\n</li>\n<li><p>우선 Kinesis와 SQS의 큰 차이점을 비교한다.</p>\n</li>\n</ol>\n<h3 id=\"Kinesis-vs-SQS\"><a href=\"#Kinesis-vs-SQS\" class=\"headerlink\" title=\"Kinesis vs SQS\"></a>Kinesis vs SQS</h3><ul>\n<li>Kinesis는 스트리밍 데이터 수집 서비스이고 SQS는 메시지 대기열이다.</li>\n<li>Kinesis는 대량의 스트리밍 데이터를 수집하도록 설계되었으며 SQS는 메시지 브로커, 디커플링 메커니즘으로 설계되었으며 이벤트 중심 아키텍처다.</li>\n<li>SQS를 사용하면 큐에서 메시지를 가져 와서 처리 중에 보이지 않는 것으로 표시 할 수 있습니다. 해당 소비자가 메시지를 큐에서 삭제하지 않으면 가시성 시간 초과가 만료 된 후에 메시지가 큐로 돌아가서 다른 소비자가 메시지를 처리 ​​할 수 ​​있습니다. SQS에는 데드 레터 큐가 내장되어 있습니다. 이러한 기능을 통해 다른 소비자가 대기열로 돌아갈 때 실패한 메시지 처리를 자동으로 재 시도 할 수 있습니다. SQS는 또한 많은 소비자가 대기열에서 메시지를 가져 와서 병렬로 처리 할 수 ​​있도록함으로써 병렬 또는 팬 아웃 처리 아키텍처를 지원합니다.</li>\n<li>Kinesis 및 Kinesis Firehose는 Elasticsearch, DynamoDB, S3 등과 같은 서비스 (데이터의 지속성 저장소)와 통합되는 반면 SQS는 Lambda, S3, SNS 등과 같은 서비스 (메시징 및 이벤트 중심 구성 요소)와 통합됩니다.</li>\n<li>이외에도 엄청나게 많은 차이점이 있지만, 링크 참고하면 더 큰 차이를 느낄 수 있음.</li>\n</ul>\n<h2 id=\"SQS는-최초의-AWS-서비스\"><a href=\"#SQS는-최초의-AWS-서비스\" class=\"headerlink\" title=\"SQS는 최초의 AWS 서비스!!!\"></a>SQS는 최초의 AWS 서비스!!!</h2><h3 id=\"1-SQS-서비스-만들기\"><a href=\"#1-SQS-서비스-만들기\" class=\"headerlink\" title=\"1) SQS 서비스 만들기.\"></a>1) SQS 서비스 만들기.</h3><p><a href=\"https://user-images.githubusercontent.com/62123161/80855560-14716d80-8c7d-11ea-9a58-fa748f417da0.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/80855560-14716d80-8c7d-11ea-9a58-fa748f417da0.png\" alt=\"sqs_01\"></a><br>끝.</p>\n<ul>\n<li>허무하지만 이게 끝 맞다. 소스로는 아래와 같이 추가해주면 된다.</li>\n</ul>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><figcaption><span>Standard Queue vs FIFO Queue</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Standard QUEUE의 경우</span><br><span class=\"line\">    //2-1. Standard Create Queue</span><br><span class=\"line\">    CreateQueueRequest create_request = new CreateQueueRequest(<span class=\"string\">\"minseoktestQueue\"</span>)</span><br><span class=\"line\">            .addAttributesEntry(<span class=\"string\">\"DelaySeconds\"</span>, <span class=\"string\">\"0\"</span>) //An <span class=\"built_in\">integer</span> from 0 to 900 seconds (15 minutes). Default: 0.</span><br><span class=\"line\">            .addAttributesEntry(<span class=\"string\">\"VisibilityTimeout\"</span>, <span class=\"string\">\"30\"</span>) // An <span class=\"built_in\">integer</span> from 0 to 43,200 (12 hours). Default: 30.</span><br><span class=\"line\">            .addAttributesEntry(<span class=\"string\">\"MessageRetentionPeriod\"</span>, <span class=\"string\">\"345600\"</span>) // An <span class=\"built_in\">integer</span> from 60 seconds (1 minute) to 1,209,600 seconds (14 days). Default: 345,600 (4 days).</span><br><span class=\"line\">            .addAttributesEntry(<span class=\"string\">\"MaximumMessageSize\"</span>, <span class=\"string\">\"262144\"</span>); //An <span class=\"built_in\">integer</span> from 1,024 bytes (1 KiB) to 262,144 bytes (256 KiB). Default: 262,144 (256 KiB).</span><br><span class=\"line\">    String standardQueueUrl = sqs.createQueue(create_request).getQueueUrl();</span><br><span class=\"line\"> </span><br><span class=\"line\">//FIFO QUEUE의 경우</span><br><span class=\"line\">    //1-1. FIFO Create Queue</span><br><span class=\"line\">    Map&lt;String, String&gt; queueAttributes = new HashMap&lt;&gt;();</span><br><span class=\"line\">    queueAttributes.put(<span class=\"string\">\"FifoQueue\"</span>, <span class=\"string\">\"true\"</span>);</span><br><span class=\"line\">    queueAttributes.put(<span class=\"string\">\"ContentBasedDeduplication\"</span>, <span class=\"string\">\"true\"</span>);</span><br><span class=\"line\">    queueAttributes.put(<span class=\"string\">\"VisibilityTimeout\"</span>, <span class=\"string\">\"1\"</span>);</span><br><span class=\"line\">    CreateQueueRequest createFifoQueueRequest = new CreateQueueRequest(</span><br><span class=\"line\">            <span class=\"string\">\"minseok1.fifo\"</span>).withAttributes(queueAttributes);</span><br><span class=\"line\">    String fifoQueueUrl = sqs.createQueue(createFifoQueueRequest)</span><br><span class=\"line\">            .getQueueUrl();</span><br></pre></td></tr></table></figure></div>\n<ul>\n<li>하지만, 이렇게 끝나면 정말 별거 없는 서비스가 될 우려가 있기에 많은 소스코드와 함께 지원되는 API를 검토하고 활용해보자.</li>\n<li>SQS도 Kinesis와 마찬가지로 큐에 데이터를 쌓는것이지만, SQS는 Console화면에서 데이터가 어떤것이 들어있는지 아주 매우 많이 쉽게 볼 수 있다.</li>\n<li>예제는 현재 Alive데이터를 담아두도록 설계해둔 SQS(2020-01-30 기준으로 폐쇄) alive-sqs-event 큐이다.<br><a href=\"https://user-images.githubusercontent.com/62123161/80855561-15a29a80-8c7d-11ea-99fe-dd9d95635b7e.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/80855561-15a29a80-8c7d-11ea-99fe-dd9d95635b7e.png\" alt=\"sqs_02\"></a> </li>\n<li>화면보면 알겠지만, 페이지별로 몇개의 Row를 볼 수 있는지와 Polling 주기를 선택할 수 있다.</li>\n</ul>\n<h3 id=\"2-기능\"><a href=\"#2-기능\" class=\"headerlink\" title=\"2) 기능\"></a>2) 기능</h3><h4 id=\"전체-큐-리스트\"><a href=\"#전체-큐-리스트\" class=\"headerlink\" title=\"전체 큐 리스트\"></a>전체 큐 리스트</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><figcaption><span>Queue List</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Standard QUEUE의 경우</span><br><span class=\"line\">    //1-2. Standard Queue List(All)</span><br><span class=\"line\">    ListQueuesResult lq_result = sqs.listQueues();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Your SQS Queue URLs:\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (String url : lq_result.getQueueUrls()) &#123;</span><br><span class=\"line\">        System.out.println(url);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">//FIFO QUEUE의 경우</span><br><span class=\"line\">    //1-2. FIFO Queue List(All)</span><br><span class=\"line\">    ListQueuesResult lq_result = sqs.listQueues();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Your SQS Queue URLs:\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (String url : lq_result.getQueueUrls()) &#123;</span><br><span class=\"line\">        System.out.println(url);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"특정키워드로-큐-찾기-여러개-검색해도-가능-→-Queue-이름이다-Queue의-데이터가-아니고\"><a href=\"#특정키워드로-큐-찾기-여러개-검색해도-가능-→-Queue-이름이다-Queue의-데이터가-아니고\" class=\"headerlink\" title=\"특정키워드로 큐 찾기(여러개 검색해도 가능) → Queue 이름이다. Queue의 데이터가 아니고!!\"></a>특정키워드로 큐 찾기(여러개 검색해도 가능) → Queue 이름이다. Queue의 데이터가 아니고!!</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><figcaption><span>Find Queue</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Standard QUEUE의 경우</span><br><span class=\"line\">    //1-3. Standard Queue Search(KEY_WORD)</span><br><span class=\"line\">    String name_prefix = <span class=\"string\">\"KEY_WORD_ENTER\"</span>;</span><br><span class=\"line\">    lq_result = sqs.listQueues(new ListQueuesRequest(name_prefix));</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Queue URLs with prefix: \"</span> + name_prefix);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (String url : lq_result.getQueueUrls()) &#123;</span><br><span class=\"line\">        System.out.println(url);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">//FIFO QUEUE의 경우</span><br><span class=\"line\">    //1-3. FIFO Queue Search(KEY_WORD)</span><br><span class=\"line\">    String name_prefix = <span class=\"string\">\"KEY_WORD_ENTER\"</span>;</span><br><span class=\"line\">    lq_result = sqs.listQueues(new ListQueuesRequest(name_prefix));</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Queue URLs with prefix: \"</span> + name_prefix);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (String url : lq_result.getQueueUrls()) &#123;</span><br><span class=\"line\">        System.out.println(url);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"큐-삭제\"><a href=\"#큐-삭제\" class=\"headerlink\" title=\"큐 삭제\"></a>큐 삭제</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><figcaption><span>Delete Queue</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Standard QUEUE의 경우</span><br><span class=\"line\">    //1-4. Standard Queue Delete(URL)</span><br><span class=\"line\">    sqs.deleteQueue(fifoQueueUrl);</span><br><span class=\"line\"> </span><br><span class=\"line\">//FIFO QUEUE의 경우</span><br><span class=\"line\">    //1-4. FIFO Queue Delete(URL)</span><br><span class=\"line\">    sqs.deleteQueue(fifoQueueUrl);</span><br></pre></td></tr></table></figure></div>\n<h4 id=\"단일-데이터-삽입\"><a href=\"#단일-데이터-삽입\" class=\"headerlink\" title=\"단일 데이터 삽입\"></a>단일 데이터 삽입</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><figcaption><span>Insert Single Message</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Standard QUEUE의 경우</span><br><span class=\"line\">    //1-5. Standard Posting a Message to a Queue</span><br><span class=\"line\">    SendMessageRequest send_msg_request = new SendMessageRequest()</span><br><span class=\"line\">            .withQueueUrl(fifoQueueUrl)</span><br><span class=\"line\">            .withMessageBody(<span class=\"string\">\"hello world\"</span>)</span><br><span class=\"line\">            .withDelaySeconds(0);</span><br><span class=\"line\">    sqs.sendMessage(send_msg_request);</span><br><span class=\"line\"> </span><br><span class=\"line\">//FIFO QUEUE의 경우</span><br><span class=\"line\">    //1-5. FIFO Posting a Message to a FIFO Queue</span><br><span class=\"line\">    SendMessageRequest send_msg_request = new SendMessageRequest()</span><br><span class=\"line\">            .withQueueUrl(fifoQueueUrl)</span><br><span class=\"line\">            .withMessageBody(<span class=\"string\">\"hello world\"</span>)</span><br><span class=\"line\">            .withMessageGroupId(<span class=\"string\">\"minseok-group-1\"</span>)</span><br><span class=\"line\">            .withDelaySeconds(0);</span><br><span class=\"line\">    sqs.sendMessage(send_msg_request);</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"여러-데이터-삽입\"><a href=\"#여러-데이터-삽입\" class=\"headerlink\" title=\"여러 데이터 삽입\"></a>여러 데이터 삽입</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><figcaption><span>Insert Multiple Data </span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Standard QUEUE의 경우</span><br><span class=\"line\">    //1-6. Standard Posting Multiple Messages to a Queue</span><br><span class=\"line\">    List&lt;SendMessageBatchRequestEntry&gt; messageEntries = new ArrayList&lt;&gt;();</span><br><span class=\"line\">    messageEntries.add(new SendMessageBatchRequestEntry()</span><br><span class=\"line\">            .withId(<span class=\"string\">\"id-1\"</span>)</span><br><span class=\"line\">            .withMessageBody(<span class=\"string\">\"batch-1\"</span>));</span><br><span class=\"line\">    messageEntries.add(new SendMessageBatchRequestEntry()</span><br><span class=\"line\">            .withId(<span class=\"string\">\"id-2\"</span>)</span><br><span class=\"line\">            .withMessageBody(<span class=\"string\">\"batch-2\"</span>));</span><br><span class=\"line\"> </span><br><span class=\"line\">    SendMessageBatchRequest sendMessageBatchRequest</span><br><span class=\"line\">            = new SendMessageBatchRequest(fifoQueueUrl, messageEntries);</span><br><span class=\"line\">    sqs.sendMessageBatch(sendMessageBatchRequest);</span><br><span class=\"line\"> </span><br><span class=\"line\">//FIFO QUEUE의 경우</span><br><span class=\"line\">    //1-6. FIFO Posting Multiple Messages to a Queue</span><br><span class=\"line\">    List&lt;SendMessageBatchRequestEntry&gt; messageEntries = new ArrayList&lt;&gt;();</span><br><span class=\"line\">    messageEntries.add(new SendMessageBatchRequestEntry()</span><br><span class=\"line\">            .withId(<span class=\"string\">\"id-1\"</span>)</span><br><span class=\"line\">            .withMessageBody(<span class=\"string\">\"batch-1\"</span>)</span><br><span class=\"line\">            .withMessageGroupId(<span class=\"string\">\"minseok-group-1\"</span>));</span><br><span class=\"line\">    messageEntries.add(new SendMessageBatchRequestEntry()</span><br><span class=\"line\">            .withId(<span class=\"string\">\"id-2\"</span>)</span><br><span class=\"line\">            .withMessageBody(<span class=\"string\">\"batch-2\"</span>)</span><br><span class=\"line\">            .withMessageGroupId(<span class=\"string\">\"minseok-group-1\"</span>));</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"큐-내의-데이터-읽기\"><a href=\"#큐-내의-데이터-읽기\" class=\"headerlink\" title=\"큐 내의 데이터 읽기\"></a>큐 내의 데이터 읽기</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><figcaption><span>Read Data In Queue</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Standard QUEUE / FIFO QUEUE의 경우</span><br><span class=\"line\">    //1-7. Reading Messages from Queues</span><br><span class=\"line\">    ReceiveMessageRequest receiveMessageRequest = new ReceiveMessageRequest(fifoQueueUrl)</span><br><span class=\"line\">            .withWaitTimeSeconds(10)</span><br><span class=\"line\">            .withMaxNumberOfMessages(10);</span><br><span class=\"line\"> </span><br><span class=\"line\">    List&lt;Message&gt; sqsMessages = sqs.receiveMessage(receiveMessageRequest).getMessages();</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"큐-내의-데이터-삭제\"><a href=\"#큐-내의-데이터-삭제\" class=\"headerlink\" title=\"큐 내의 데이터 삭제\"></a>큐 내의 데이터 삭제</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><figcaption><span>Delete Data In Queue</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Standard QUEUE / FIFO QUEUE의 경우</span><br><span class=\"line\">    //1-8. Deleting a Message from a Queue</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Message m : sqsMessages) &#123;</span><br><span class=\"line\">        sqs.deleteMessage(fifoQueueUrl, m.getReceiptHandle());</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"전달못한-Queue\"><a href=\"#전달못한-Queue\" class=\"headerlink\" title=\"전달못한 Queue\"></a>전달못한 Queue</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><figcaption><span>Dead Letter Queues</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Standard QUEUE / FIFO QUEUE의 경우</span><br><span class=\"line\">    //1-9. FIFO Dead Letter Queues1(TODO:배달못한 편지 대기열을 생성하고,</span><br><span class=\"line\">    /*String deadLetterQueueUrl = sqs.createQueue(<span class=\"string\">\"aws-sqs://notification_queue?amazonSQSClient=#sqsClient\"</span>).getQueueUrl();*/</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        // Create dead-letter queue</span><br><span class=\"line\">        Map&lt;String, String&gt; queueAttributes = new HashMap&lt;&gt;();</span><br><span class=\"line\">        queueAttributes.put(<span class=\"string\">\"FifoQueue\"</span>, <span class=\"string\">\"true\"</span>);</span><br><span class=\"line\">        queueAttributes.put(<span class=\"string\">\"ContentBasedDeduplication\"</span>, <span class=\"string\">\"true\"</span>);</span><br><span class=\"line\">        queueAttributes.put(<span class=\"string\">\"VisibilityTimeout\"</span>, <span class=\"string\">\"1\"</span>);</span><br><span class=\"line\">        CreateQueueRequest createFifoQueueRequest = new CreateQueueRequest(</span><br><span class=\"line\">                <span class=\"string\">\"deadletterminseok.fifo\"</span>).withAttributes(queueAttributes);</span><br><span class=\"line\">        String fifoQueueUrls = sqs.createQueue(createFifoQueueRequest)</span><br><span class=\"line\">                .getQueueUrl();</span><br><span class=\"line\">    &#125; catch (AmazonSQSException e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!e.getErrorCode().equals(<span class=\"string\">\"QueueAlreadyExists\"</span>)) &#123;</span><br><span class=\"line\">            throw e;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //TODO:minseok.fifo 로 통신하다가 부하가 걸리면 deadletterminseok.fifo로 보내도록 설정하는 아래 코드</span><br><span class=\"line\">    String dl_queue_url = sqs.getQueueUrl(<span class=\"string\">\"deadletterminseok.fifo\"</span>)</span><br><span class=\"line\">            .getQueueUrl();</span><br><span class=\"line\">    GetQueueAttributesResult queue_attrs = sqs.getQueueAttributes(</span><br><span class=\"line\">            new GetQueueAttributesRequest(dl_queue_url)</span><br><span class=\"line\">                    .withAttributeNames(<span class=\"string\">\"QueueArn\"</span>));</span><br><span class=\"line\">    String dl_queue_arn = queue_attrs.getAttributes().get(<span class=\"string\">\"QueueArn\"</span>);</span><br><span class=\"line\">    // Set dead letter queue with redrive policy on <span class=\"built_in\">source</span> queue.</span><br><span class=\"line\">    String src_queue_url = sqs.getQueueUrl(<span class=\"string\">\"minseok.fifo\"</span>)</span><br><span class=\"line\">            .getQueueUrl();</span><br><span class=\"line\">    SetQueueAttributesRequest request = new SetQueueAttributesRequest()</span><br><span class=\"line\">            .withQueueUrl(src_queue_url)</span><br><span class=\"line\">            .addAttributesEntry(<span class=\"string\">\"RedrivePolicy\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"&#123;\\\"maxReceiveCount\\\":\\\"5\\\", \\\"deadLetterTargetArn\\\":\\\"\"</span></span><br><span class=\"line\">                            + dl_queue_arn + <span class=\"string\">\"\\\"&#125;\"</span>);</span><br><span class=\"line\">    sqs.setQueueAttributes(request);</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">//또다른 방법(샘플)</span><br><span class=\"line\">    //1-10. FIFO Dead Letter Queues</span><br><span class=\"line\">    GetQueueAttributesResult deadLetterQueueAttributes = sqs.getQueueAttributes(</span><br><span class=\"line\">            new GetQueueAttributesRequest(dl_queue_url)</span><br><span class=\"line\">                    .withAttributeNames(<span class=\"string\">\"QueueArn\"</span>));</span><br><span class=\"line\"> </span><br><span class=\"line\">    String deadLetterQueueARN = deadLetterQueueAttributes.getAttributes()</span><br><span class=\"line\">            .get(<span class=\"string\">\"QueueArn\"</span>);</span><br><span class=\"line\">    SetQueueAttributesRequest queueAttributesRequest = new SetQueueAttributesRequest()</span><br><span class=\"line\">            //.withQueueUrl(standardQueueUrl)</span><br><span class=\"line\">            .withQueueUrl(<span class=\"string\">\"https://sqs.ap-northeast-2.amazonaws.com/[ALLIAS]/[FIFO_NAME]\"</span>)</span><br><span class=\"line\">            .addAttributesEntry(<span class=\"string\">\"RedrivePolicy\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"&#123;\\\"maxReceiveCount\\\":\\\"2\\\", \"</span></span><br><span class=\"line\">                            + <span class=\"string\">\"\\\"deadLetterTargetArn\\\":\\\"\"</span> + deadLetterQueueARN + <span class=\"string\">\"\\\"&#125;\"</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">    sqs.setQueueAttributes(queueAttributesRequest);</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"Monitoring\"><a href=\"#Monitoring\" class=\"headerlink\" title=\"Monitoring\"></a>Monitoring</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Standard QUEUE / FIFO QUEUE의 경우</span><br><span class=\"line\">    //1-11. FIFO Monitoring</span><br><span class=\"line\">    GetQueueAttributesRequest getQueueAttributesRequest</span><br><span class=\"line\">            //= new GetQueueAttributesRequest(standardQueueUrl) </span><br><span class=\"line\">            = new GetQueueAttributesRequest(<span class=\"string\">\"https://sqs.ap-northeast-2.amazonaws.com/[ALLIAS]/[FIFO_NAME]\"</span>)</span><br><span class=\"line\">            .withAttributeNames(<span class=\"string\">\"All\"</span>);</span><br><span class=\"line\">    GetQueueAttributesResult getQueueAttributesResult</span><br><span class=\"line\">            = sqs.getQueueAttributes(getQueueAttributesRequest);</span><br><span class=\"line\">    System.out.println(String.format(<span class=\"string\">\"The number of messages on the queue: %s\"</span>,</span><br><span class=\"line\">            getQueueAttributesResult.getAttributes()</span><br><span class=\"line\">                    .get(<span class=\"string\">\"ApproximateNumberOfMessages\"</span>)));</span><br><span class=\"line\">    System.out.println(String.format(<span class=\"string\">\"The number of messages in flight: %s\"</span>,</span><br><span class=\"line\">            getQueueAttributesResult.getAttributes()</span><br><span class=\"line\">                    .get(<span class=\"string\">\"ApproximateNumberOfMessagesNotVisible\"</span>)));</span><br></pre></td></tr></table></figure></div>\n\n\n<h3 id=\"전체-Full-소스\"><a href=\"#전체-Full-소스\" class=\"headerlink\" title=\"[전체 Full 소스]\"></a>[전체 Full 소스]</h3><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><figcaption><span>full source</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package helloworld;</span><br><span class=\"line\"> </span><br><span class=\"line\">import java.io.BufferedReader;</span><br><span class=\"line\">import java.io.InputStreamReader;</span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\">import java.net.URL;</span><br><span class=\"line\">import java.util.ArrayList;</span><br><span class=\"line\">import java.util.HashMap;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\">import java.util.stream.Collectors;</span><br><span class=\"line\"> </span><br><span class=\"line\">import com.amazonaws.auth.AWSStaticCredentialsProvider;</span><br><span class=\"line\">import com.amazonaws.auth.BasicAWSCredentials;</span><br><span class=\"line\">import com.amazonaws.regions.Regions;</span><br><span class=\"line\">import com.amazonaws.services.lambda.runtime.Context;</span><br><span class=\"line\">import com.amazonaws.services.lambda.runtime.RequestHandler;</span><br><span class=\"line\">import com.amazonaws.services.sqs.AmazonSQS;</span><br><span class=\"line\">import com.amazonaws.services.sqs.AmazonSQSClientBuilder;</span><br><span class=\"line\">import com.amazonaws.services.sqs.model.*;</span><br><span class=\"line\">import com.amazonaws.services.sqs.model.ListQueuesResult;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Handler <span class=\"keyword\">for</span> requests to Lambda <span class=\"keyword\">function</span>.</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class App implements RequestHandler&lt;Object, Object&gt; &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    public Object handleRequest(final Object input, final Context context) &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">        BasicAWSCredentials credentials = new BasicAWSCredentials(<span class=\"string\">\"ACCESS_KEY\"</span>, <span class=\"string\">\"SECRET_KEY\"</span>);</span><br><span class=\"line\">        AmazonSQS sqs = AmazonSQSClientBuilder.standard()</span><br><span class=\"line\">                .withCredentials(new AWSStaticCredentialsProvider(credentials))</span><br><span class=\"line\">                .withRegion(Regions.AP_NORTHEAST_2)</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">        ///////Create, Delete 는 있거나 삭제할게 없으면 바로 에러 떨어짐..</span><br><span class=\"line\">//        //1-1. FIFO Create Queue</span><br><span class=\"line\">//        Map&lt;String, String&gt; queueAttributes = new HashMap&lt;&gt;();</span><br><span class=\"line\">//        queueAttributes.put(<span class=\"string\">\"FifoQueue\"</span>, <span class=\"string\">\"true\"</span>);</span><br><span class=\"line\">//        queueAttributes.put(<span class=\"string\">\"ContentBasedDeduplication\"</span>, <span class=\"string\">\"true\"</span>);</span><br><span class=\"line\">//        queueAttributes.put(<span class=\"string\">\"VisibilityTimeout\"</span>, <span class=\"string\">\"1\"</span>);</span><br><span class=\"line\">//        CreateQueueRequest createFifoQueueRequest = new CreateQueueRequest(</span><br><span class=\"line\">//                <span class=\"string\">\"[FIFO_NAME]\"</span>).withAttributes(queueAttributes);</span><br><span class=\"line\">//        String fifoQueueUrl = sqs.createQueue(createFifoQueueRequest)</span><br><span class=\"line\">//                .getQueueUrl();</span><br><span class=\"line\"> </span><br><span class=\"line\">//        //1-2. FIFO Queue List(All)</span><br><span class=\"line\">//        ListQueuesResult lq_result = sqs.listQueues();</span><br><span class=\"line\">//        System.out.println(<span class=\"string\">\"Your SQS Queue URLs:\"</span>);</span><br><span class=\"line\">//        <span class=\"keyword\">for</span> (String url : lq_result.getQueueUrls()) &#123;</span><br><span class=\"line\">//            System.out.println(url);</span><br><span class=\"line\">//        &#125;</span><br><span class=\"line\">//        //1-3. FIFO Queue Search(KEY_WORD)</span><br><span class=\"line\">//        String name_prefix = <span class=\"string\">\"KEY_WORD_ENTER\"</span>;</span><br><span class=\"line\">//        lq_result = sqs.listQueues(new ListQueuesRequest(name_prefix));</span><br><span class=\"line\">//        System.out.println(<span class=\"string\">\"Queue URLs with prefix: \"</span> + name_prefix);</span><br><span class=\"line\">//        <span class=\"keyword\">for</span> (String url : lq_result.getQueueUrls()) &#123;</span><br><span class=\"line\">//            System.out.println(url);</span><br><span class=\"line\">//        &#125;</span><br><span class=\"line\">//        //1-4. FIFO Queue Delete(URL)</span><br><span class=\"line\">//        sqs.deleteQueue(fifoQueueUrl);</span><br><span class=\"line\"> </span><br><span class=\"line\">//        //1-5. FIFO Posting a Message to a FIFO Queue</span><br><span class=\"line\">//        SendMessageRequest send_msg_request = new SendMessageRequest()</span><br><span class=\"line\">//                .withQueueUrl(fifoQueueUrl)</span><br><span class=\"line\">//                .withMessageBody(<span class=\"string\">\"hello world\"</span>)</span><br><span class=\"line\">//                .withMessageGroupId(<span class=\"string\">\"minseok-group-1\"</span>)</span><br><span class=\"line\">//                .withDelaySeconds(0);</span><br><span class=\"line\">//        sqs.sendMessage(send_msg_request);</span><br><span class=\"line\"> </span><br><span class=\"line\">//        //1-6. FIFO Posting Multiple Messages to a Queue</span><br><span class=\"line\">//        List&lt;SendMessageBatchRequestEntry&gt; messageEntries = new ArrayList&lt;&gt;();</span><br><span class=\"line\">//        messageEntries.add(new SendMessageBatchRequestEntry()</span><br><span class=\"line\">//                .withId(<span class=\"string\">\"id-1\"</span>)</span><br><span class=\"line\">//                .withMessageBody(<span class=\"string\">\"batch-1\"</span>)</span><br><span class=\"line\">//                .withMessageGroupId(<span class=\"string\">\"minseok-group-1\"</span>));</span><br><span class=\"line\">//        messageEntries.add(new SendMessageBatchRequestEntry()</span><br><span class=\"line\">//                .withId(<span class=\"string\">\"id-2\"</span>)</span><br><span class=\"line\">//                .withMessageBody(<span class=\"string\">\"batch-2\"</span>)</span><br><span class=\"line\">//                .withMessageGroupId(<span class=\"string\">\"minseok-group-1\"</span>));</span><br><span class=\"line\">//</span><br><span class=\"line\">//        SendMessageBatchRequest sendMessageBatchRequest</span><br><span class=\"line\">//                = new SendMessageBatchRequest(fifoQueueUrl, messageEntries);</span><br><span class=\"line\">//        sqs.sendMessageBatch(sendMessageBatchRequest);</span><br><span class=\"line\"> </span><br><span class=\"line\">//        //1-7. FIFO Reading Messages from Queues</span><br><span class=\"line\">//        ReceiveMessageRequest receiveMessageRequest = new ReceiveMessageRequest(fifoQueueUrl)</span><br><span class=\"line\">//                .withWaitTimeSeconds(10)</span><br><span class=\"line\">//                .withMaxNumberOfMessages(10);</span><br><span class=\"line\">//</span><br><span class=\"line\">//        List&lt;Message&gt; sqsMessages = sqs.receiveMessage(receiveMessageRequest).getMessages();</span><br><span class=\"line\">//</span><br><span class=\"line\">//        //1-8. FIFO Deleting a Message from a Queue</span><br><span class=\"line\">//        <span class=\"keyword\">for</span> (Message m : sqsMessages) &#123;</span><br><span class=\"line\">//            sqs.deleteMessage(fifoQueueUrl, m.getReceiptHandle());</span><br><span class=\"line\">//        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">//        //1-9. FIFO Dead Letter Queues1(배달못한 편지 대기열을 생성하고,</span><br><span class=\"line\">//        /*String deadLetterQueueUrl = sqs.createQueue(<span class=\"string\">\"aws-sqs://notification_queue?amazonSQSClient=#sqsClient\"</span>).getQueueUrl();*/</span><br><span class=\"line\">//        try &#123;</span><br><span class=\"line\">//            // Create dead-letter queue</span><br><span class=\"line\">//            Map&lt;String, String&gt; queueAttributes = new HashMap&lt;&gt;();</span><br><span class=\"line\">//            queueAttributes.put(<span class=\"string\">\"FifoQueue\"</span>, <span class=\"string\">\"true\"</span>);</span><br><span class=\"line\">//            queueAttributes.put(<span class=\"string\">\"ContentBasedDeduplication\"</span>, <span class=\"string\">\"true\"</span>);</span><br><span class=\"line\">//            queueAttributes.put(<span class=\"string\">\"VisibilityTimeout\"</span>, <span class=\"string\">\"1\"</span>);</span><br><span class=\"line\">//            CreateQueueRequest createFifoQueueRequest = new CreateQueueRequest(</span><br><span class=\"line\">//                    <span class=\"string\">\"[DEADLETTER_FIFO_NAME]\"</span>).withAttributes(queueAttributes);</span><br><span class=\"line\">//            String fifoQueueUrls = sqs.createQueue(createFifoQueueRequest)</span><br><span class=\"line\">//                    .getQueueUrl();</span><br><span class=\"line\">//        &#125; catch (AmazonSQSException e) &#123;</span><br><span class=\"line\">//            <span class=\"keyword\">if</span> (!e.getErrorCode().equals(<span class=\"string\">\"QueueAlreadyExists\"</span>)) &#123;</span><br><span class=\"line\">//                throw e;</span><br><span class=\"line\">//            &#125;</span><br><span class=\"line\">//        &#125;</span><br><span class=\"line\">//        //[FIFO_NAME] 로 통신하다가 부하가 걸리면 [DEADLETTER_FIFO_NAME]로 보내도록 설정하는 아래 코드</span><br><span class=\"line\">//        String dl_queue_url = sqs.getQueueUrl(<span class=\"string\">\"[DEADLETTER_FIFO_NAME]\"</span>)</span><br><span class=\"line\">//                .getQueueUrl();</span><br><span class=\"line\">//        GetQueueAttributesResult queue_attrs = sqs.getQueueAttributes(</span><br><span class=\"line\">//                new GetQueueAttributesRequest(dl_queue_url)</span><br><span class=\"line\">//                        .withAttributeNames(<span class=\"string\">\"QueueArn\"</span>));</span><br><span class=\"line\">//        String dl_queue_arn = queue_attrs.getAttributes().get(<span class=\"string\">\"QueueArn\"</span>);</span><br><span class=\"line\">//        // Set dead letter queue with redrive policy on <span class=\"built_in\">source</span> queue.</span><br><span class=\"line\">//        String src_queue_url = sqs.getQueueUrl(<span class=\"string\">\"[FIFO_NAME]\"</span>)</span><br><span class=\"line\">//                .getQueueUrl();</span><br><span class=\"line\">//        SetQueueAttributesRequest request = new SetQueueAttributesRequest()</span><br><span class=\"line\">//                .withQueueUrl(src_queue_url)</span><br><span class=\"line\">//                .addAttributesEntry(<span class=\"string\">\"RedrivePolicy\"</span>,</span><br><span class=\"line\">//                        <span class=\"string\">\"&#123;\\\"maxReceiveCount\\\":\\\"5\\\", \\\"deadLetterTargetArn\\\":\\\"\"</span></span><br><span class=\"line\">//                                + dl_queue_arn + <span class=\"string\">\"\\\"&#125;\"</span>);</span><br><span class=\"line\">//        sqs.setQueueAttributes(request);</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">//        //1-10. FIFO Dead Letter Queues</span><br><span class=\"line\">//        GetQueueAttributesResult deadLetterQueueAttributes = sqs.getQueueAttributes(</span><br><span class=\"line\">//                new GetQueueAttributesRequest(dl_queue_url)</span><br><span class=\"line\">//                        .withAttributeNames(<span class=\"string\">\"QueueArn\"</span>));</span><br><span class=\"line\">//</span><br><span class=\"line\">//        String deadLetterQueueARN = deadLetterQueueAttributes.getAttributes()</span><br><span class=\"line\">//                .get(<span class=\"string\">\"QueueArn\"</span>);</span><br><span class=\"line\">//        SetQueueAttributesRequest queueAttributesRequest = new SetQueueAttributesRequest()</span><br><span class=\"line\">//                //.withQueueUrl(standardQueueUrl)</span><br><span class=\"line\">//                .withQueueUrl(<span class=\"string\">\"https://sqs.ap-northeast-2.amazonaws.com/[ALLIAS]/[FIFO_NAME]\"</span>)</span><br><span class=\"line\">//                .addAttributesEntry(<span class=\"string\">\"RedrivePolicy\"</span>,</span><br><span class=\"line\">//                        <span class=\"string\">\"&#123;\\\"maxReceiveCount\\\":\\\"2\\\", \"</span></span><br><span class=\"line\">//                                + <span class=\"string\">\"\\\"deadLetterTargetArn\\\":\\\"\"</span> + deadLetterQueueARN + <span class=\"string\">\"\\\"&#125;\"</span>);</span><br><span class=\"line\">//</span><br><span class=\"line\">//        sqs.setQueueAttributes(queueAttributesRequest);</span><br><span class=\"line\"> </span><br><span class=\"line\">//        //1-11. FIFO Monitoring</span><br><span class=\"line\">//        GetQueueAttributesRequest getQueueAttributesRequest</span><br><span class=\"line\">//                //= new GetQueueAttributesRequest(standardQueueUrl) //https://sqs.ap-northeast-2.amazonaws.com/491870877159/minseok.fifo</span><br><span class=\"line\">//                = new GetQueueAttributesRequest(<span class=\"string\">\"https://sqs.ap-northeast-2.amazonaws.com/[ALLIAS]/[FIFO_NAME]\"</span>)</span><br><span class=\"line\">//                .withAttributeNames(<span class=\"string\">\"All\"</span>);</span><br><span class=\"line\">//        GetQueueAttributesResult getQueueAttributesResult</span><br><span class=\"line\">//                = sqs.getQueueAttributes(getQueueAttributesRequest);</span><br><span class=\"line\">//        System.out.println(String.format(<span class=\"string\">\"The number of messages on the queue: %s\"</span>,</span><br><span class=\"line\">//                getQueueAttributesResult.getAttributes()</span><br><span class=\"line\">//                        .get(<span class=\"string\">\"ApproximateNumberOfMessages\"</span>)));</span><br><span class=\"line\">//        System.out.println(String.format(<span class=\"string\">\"The number of messages in flight: %s\"</span>,</span><br><span class=\"line\">//                getQueueAttributesResult.getAttributes()</span><br><span class=\"line\">//                        .get(<span class=\"string\">\"ApproximateNumberOfMessagesNotVisible\"</span>)));</span><br><span class=\"line\">//</span><br><span class=\"line\">/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</span><br><span class=\"line\">//</span><br><span class=\"line\">//        //2-1. Standard Create Queue</span><br><span class=\"line\">//        CreateQueueRequest create_request = new CreateQueueRequest(<span class=\"string\">\"[STANDARD_QUEUE_NAME]\"</span>)</span><br><span class=\"line\">//                .addAttributesEntry(<span class=\"string\">\"DelaySeconds\"</span>, <span class=\"string\">\"0\"</span>) //An <span class=\"built_in\">integer</span> from 0 to 900 seconds (15 minutes). Default: 0.</span><br><span class=\"line\">//                .addAttributesEntry(<span class=\"string\">\"VisibilityTimeout\"</span>, <span class=\"string\">\"30\"</span>) // An <span class=\"built_in\">integer</span> from 0 to 43,200 (12 hours). Default: 30.</span><br><span class=\"line\">//                .addAttributesEntry(<span class=\"string\">\"MessageRetentionPeriod\"</span>, <span class=\"string\">\"345600\"</span>) // An <span class=\"built_in\">integer</span> from 60 seconds (1 minute) to 1,209,600 seconds (14 days). Default: 345,600 (4 days).</span><br><span class=\"line\">//                .addAttributesEntry(<span class=\"string\">\"MaximumMessageSize\"</span>, <span class=\"string\">\"262144\"</span>); //An <span class=\"built_in\">integer</span> from 1,024 bytes (1 KiB) to 262,144 bytes (256 KiB). Default: 262,144 (256 KiB).</span><br><span class=\"line\">//        String standardQueueUrl = sqs.createQueue(create_request).getQueueUrl();</span><br><span class=\"line\"> </span><br><span class=\"line\">//        //1-2. Standard Queue List(All)</span><br><span class=\"line\">//        ListQueuesResult lq_result = sqs.listQueues();</span><br><span class=\"line\">//        System.out.println(<span class=\"string\">\"Your SQS Queue URLs:\"</span>);</span><br><span class=\"line\">//        <span class=\"keyword\">for</span> (String url : lq_result.getQueueUrls()) &#123;</span><br><span class=\"line\">//            System.out.println(url);</span><br><span class=\"line\">//        &#125;</span><br><span class=\"line\">//        //1-3. Standard Queue Search(KEY_WORD)</span><br><span class=\"line\">//        String name_prefix = <span class=\"string\">\"KEY_WORD_ENTER\"</span>;</span><br><span class=\"line\">//        lq_result = sqs.listQueues(new ListQueuesRequest(name_prefix));</span><br><span class=\"line\">//        System.out.println(<span class=\"string\">\"Queue URLs with prefix: \"</span> + name_prefix);</span><br><span class=\"line\">//        <span class=\"keyword\">for</span> (String url : lq_result.getQueueUrls()) &#123;</span><br><span class=\"line\">//            System.out.println(url);</span><br><span class=\"line\">//        &#125;</span><br><span class=\"line\">//        //1-4. Standard Queue Delete(URL)</span><br><span class=\"line\">//        sqs.deleteQueue(fifoQueueUrl);</span><br><span class=\"line\"> </span><br><span class=\"line\">//        //1-5. Standard Posting a Message to a Queue</span><br><span class=\"line\">//        SendMessageRequest send_msg_request = new SendMessageRequest()</span><br><span class=\"line\">//                .withQueueUrl(fifoQueueUrl)</span><br><span class=\"line\">//                .withMessageBody(<span class=\"string\">\"hello world\"</span>)</span><br><span class=\"line\">//                .withDelaySeconds(0);</span><br><span class=\"line\">//        sqs.sendMessage(send_msg_request);</span><br><span class=\"line\"> </span><br><span class=\"line\">//        //1-6. Standard Posting Multiple Messages to a Queue</span><br><span class=\"line\">//        List&lt;SendMessageBatchRequestEntry&gt; messageEntries = new ArrayList&lt;&gt;();</span><br><span class=\"line\">//        messageEntries.add(new SendMessageBatchRequestEntry()</span><br><span class=\"line\">//                .withId(<span class=\"string\">\"id-1\"</span>)</span><br><span class=\"line\">//                .withMessageBody(<span class=\"string\">\"batch-1\"</span>));</span><br><span class=\"line\">//        messageEntries.add(new SendMessageBatchRequestEntry()</span><br><span class=\"line\">//                .withId(<span class=\"string\">\"id-2\"</span>)</span><br><span class=\"line\">//                .withMessageBody(<span class=\"string\">\"batch-2\"</span>));</span><br><span class=\"line\">//</span><br><span class=\"line\">//        SendMessageBatchRequest sendMessageBatchRequest</span><br><span class=\"line\">//                = new SendMessageBatchRequest(fifoQueueUrl, messageEntries);</span><br><span class=\"line\">//        sqs.sendMessageBatch(sendMessageBatchRequest);</span><br><span class=\"line\"> </span><br><span class=\"line\">//        //1-7. Standard Reading Messages from Queues</span><br><span class=\"line\">//        ReceiveMessageRequest receiveMessageRequest = new ReceiveMessageRequest(fifoQueueUrl)</span><br><span class=\"line\">//                .withWaitTimeSeconds(10)</span><br><span class=\"line\">//                .withMaxNumberOfMessages(10);</span><br><span class=\"line\">//</span><br><span class=\"line\">//        List&lt;Message&gt; sqsMessages = sqs.receiveMessage(receiveMessageRequest).getMessages();</span><br><span class=\"line\">//</span><br><span class=\"line\">//        //1-8. FIFO Deleting a Message from a Queue</span><br><span class=\"line\">//        <span class=\"keyword\">for</span> (Message m : sqsMessages) &#123;</span><br><span class=\"line\">//            sqs.deleteMessage(fifoQueueUrl, m.getReceiptHandle());</span><br><span class=\"line\">//        &#125;</span><br><span class=\"line\">//</span><br><span class=\"line\">/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</span><br><span class=\"line\"> </span><br><span class=\"line\">        Map&lt;String, String&gt; headers = new HashMap&lt;&gt;();</span><br><span class=\"line\">        headers.put(<span class=\"string\">\"Content-Type\"</span>, <span class=\"string\">\"application/json\"</span>);</span><br><span class=\"line\">        headers.put(<span class=\"string\">\"X-Custom-Header\"</span>, <span class=\"string\">\"application/json\"</span>);</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            final String pageContents = this.getPageContents(<span class=\"string\">\"https://checkip.amazonaws.com\"</span>);</span><br><span class=\"line\">            String output = String.format(<span class=\"string\">\"&#123; \\\"message\\\": \\\"hello world\\\", \\\"location\\\": \\\"%s\\\" &#125;\"</span>, pageContents);</span><br><span class=\"line\">            <span class=\"built_in\">return</span> new GatewayResponse(output, headers, 200);</span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">return</span> new GatewayResponse(<span class=\"string\">\"&#123;&#125;\"</span>, headers, 500);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    private String getPageContents(String address) throws IOException&#123;</span><br><span class=\"line\">        URL url = new URL(address);</span><br><span class=\"line\">        try(BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()))) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">return</span> br.lines().collect(Collectors.joining(System.lineSeparator()));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"3-결론\"><a href=\"#3-결론\" class=\"headerlink\" title=\"3) 결론\"></a>3) 결론</h3><ol>\n<li>한개의 큐 관리만 잘 해주면 열 Dynamo 안부럽다.</li>\n<li>람다에서 돌아가는 소스로 작성되었지만, 얼마든지 다른 서비스에 쓰일 수 있다.</li>\n<li>이유 : 아까 위에서 말한대로 AWS 최초의 서비스였기 때문(거의 화석급….)</li>\n</ol>\n","text":"Kinesis가 있으니 SQS를 쓸 일이 없겠다. 이걸 뭐하러 쓰나?라고 생각했다면, 한참 더 공부해야한다. 우선 Kinesis와 SQS의 큰 차이점을 비교한다.Kinesis vs SQSKinesis는 스트리밍 데이터 수집 서비스이고 SQS는 메시지 ","link":"","raw":null,"photos":[],"categories":[{"name":"tip","slug":"tip","count":17,"path":"api/categories/tip.json"}],"tags":[{"name":"AWS","slug":"AWS","count":14,"path":"api/tags/AWS.json"},{"name":"sqs","slug":"sqs","count":1,"path":"api/tags/sqs.json"},{"name":"fifo","slug":"fifo","count":1,"path":"api/tags/fifo.json"},{"name":"standard","slug":"standard","count":1,"path":"api/tags/standard.json"}]},{"title":"Kinesis Data Analytics","slug":"kinesisDataAnalytics","date":"2020-05-02T04:36:44.000Z","updated":"2020-05-11T01:16:48.234Z","comments":true,"pin":null,"path":"api/articles/kinesisDataAnalytics.json","excerpt":"","keywords":null,"cover":"https://user-images.githubusercontent.com/62123161/80855331-3f5ac200-8c7b-11ea-87f4-3176b8b70682.png","content":"<h2 id=\"개발환경-구축\"><a href=\"#개발환경-구축\" class=\"headerlink\" title=\"개발환경 구축\"></a>개발환경 구축</h2><p>※ 기본 개발환경</p>\n<ul>\n<li>IntelliJ</li>\n<li>Java, Spring</li>\n<li>AWS Console</li>\n</ul>\n<h2 id=\"Kinesis-Data-Analytics-기초설명\"><a href=\"#Kinesis-Data-Analytics-기초설명\" class=\"headerlink\" title=\"Kinesis Data Analytics 기초설명\"></a>Kinesis Data Analytics 기초설명</h2><ol>\n<li>Kinesis Data Analytics을(를) 시작하려면 스트리밍 데이터를 지속적으로 읽고 처리하는 Kinesis 데이터 분석 애플리케이션을 생성합니다. 이 서비스는 Amazon Kinesis Data Streams 및 Amazon Kinesis Data Firehose 스트리밍 소스로부터의 데이터 수집을 지원합니다. 그런 다음 대화형 편집기를 사용하여 SQL 코드를 작성하고 라이브 스트리밍 데이터로 테스트합니다. Kinesis Data Analytics이(가) 결과를 전송하려는 대상을 구성할 수도 있습니다.</li>\n<li>Kinesis Data Analytics은(는) Amazon Kinesis Data Firehose(Amazon S3, Amazon Redshift, Amazon Elasticsearch Service 및 Splunk), AWS Lambda 및 Amazon Kinesis Data Streams을(를) 대상으로 지원합니다.</li>\n<li>Analytics의 경우 코딩이 전~~혀 없음.(굳이 있다면, 콘솔 내 SQL 문 작성해야 하는 정도?)</li>\n<li>코딩이 없는 만큼, Console화면에 대해 익숙해져야 함. </li>\n</ol>\n<h3 id=\"1-Create-application\"><a href=\"#1-Create-application\" class=\"headerlink\" title=\"1. Create application\"></a>1. Create application</h3><p><a href=\"https://user-images.githubusercontent.com/62123161/80855331-3f5ac200-8c7b-11ea-87f4-3176b8b70682.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/80855331-3f5ac200-8c7b-11ea-87f4-3176b8b70682.png\" alt=\"kinesisAnalytics_01\"></a></p>\n<ul>\n<li>[Create Application] 선택</li>\n</ul>\n<p><a href=\"https://user-images.githubusercontent.com/62123161/80855330-3ec22b80-8c7b-11ea-988e-fca08da5ea36.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/80855330-3ec22b80-8c7b-11ea-988e-fca08da5ea36.png\" alt=\"kinesisAnalytics_02\"></a></p>\n<ul>\n<li>생성을 누르면 Analytics 생성이 완료되었습니다. 축하합니다. 끝…. 이면 좋겠지만, 이 뒤가 실제 분석단계고 겨우 겉의 껍데기 하나 만든것이다.</li>\n</ul>\n<p><a href=\"https://user-images.githubusercontent.com/62123161/80855329-3e299500-8c7b-11ea-8c0e-423c69e40641.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/80855329-3e299500-8c7b-11ea-8c0e-423c69e40641.png\" alt=\"kinesisAnalytics_03\"></a></p>\n<ul>\n<li>Streaming 할 데이터, 실시간 분석(확인용), 보낼곳 설정 등 과정을 거친다.</li>\n<li>해당 과정을 거치면서 상당히 많은 오류를 맞닥트리게 될 것이다. 보통은 형변환에서 에러가 난다. (예-Varchar형인데 int형으로 분류됬을 경우.)</li>\n<li>실제 컬럼양이 많아서 귀찮더라도, 하나하나 전부 체크해 주어야 향후 Analytics를 원활하게 쓸 수 있다.</li>\n</ul>\n<p><a href=\"https://user-images.githubusercontent.com/62123161/80855328-3d90fe80-8c7b-11ea-95fa-6377adcd65e9.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/80855328-3d90fe80-8c7b-11ea-95fa-6377adcd65e9.png\" alt=\"kinesisAnalytics_04\"></a></p>\n<ul>\n<li>Source : 위에서 생성한 test-kinesis 선택</li>\n<li>Record pre-processing : 위의 firehose에서처럼 람다 함수를 이용하여 스트림 데이터 가공 가능</li>\n<li>Access permissions : IAM 롤 생성</li>\n<li>Discover schema 버튼을 클릭하여 스키마 확인 및 설정</li>\n</ul>\n<p><a href=\"https://user-images.githubusercontent.com/62123161/80855327-3cf86800-8c7b-11ea-8063-351e853d8e13.PNG\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/80855327-3cf86800-8c7b-11ea-8063-351e853d8e13.PNG\" alt=\"kinesisAnalytics_05\"></a></p>\n<ul>\n<li>자동으로 설정된 스키마 확인 후 필요에 따라 Edit schema 버튼을 통하여 스키마 수정</li>\n</ul>\n<p><a href=\"https://user-images.githubusercontent.com/62123161/80855326-3cf86800-8c7b-11ea-8901-cdbfe521e1db.PNG\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/80855326-3cf86800-8c7b-11ea-8901-cdbfe521e1db.PNG\" alt=\"kinesisAnalytics_06\"></a></p>\n<ul>\n<li>적절하게 스키마 변경 후 Save schema and update stream samples 버튼을 클릭하여 확인</li>\n</ul>\n<p><a href=\"https://user-images.githubusercontent.com/62123161/80855325-3bc73b00-8c7b-11ea-9896-fe3958db0c75.PNG\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/80855325-3bc73b00-8c7b-11ea-9896-fe3958db0c75.PNG\" alt=\"kinesisAnalytics_07\"></a></p>\n<ul>\n<li>소스를 선택하면 Real time analytics 영역이 활성화됨. Go to SQL editor 클릭</li>\n</ul>\n<p><a href=\"https://user-images.githubusercontent.com/62123161/80855324-3b2ea480-8c7b-11ea-84ba-bcbbea1d6efa.PNG\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/80855324-3b2ea480-8c7b-11ea-84ba-bcbbea1d6efa.PNG\" alt=\"kinesisAnalytics_08\"></a></p>\n<ul>\n<li>스크림 SQL을 작성 후 Save and run SQL 버튼 클릭</li>\n<li>하단의 Real-time analytics 탭에서 결과 데이터 실시간 확인</li>\n</ul>\n<p><a href=\"https://user-images.githubusercontent.com/62123161/80855323-3a960e00-8c7b-11ea-93f0-67c18f83d4d3.PNG\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/80855323-3a960e00-8c7b-11ea-93f0-67c18f83d4d3.PNG\" alt=\"kinesisAnalytics_09\"></a></p>\n<ul>\n<li>Real time analytics를 선택하면 Destination 영역이 활성화됨</li>\n</ul>\n<p><a href=\"https://user-images.githubusercontent.com/62123161/80855322-3a960e00-8c7b-11ea-9d44-becb19a625c9.PNG\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/80855322-3a960e00-8c7b-11ea-9d44-becb19a625c9.PNG\" alt=\"kinesisAnalytics_10\"></a></p>\n<ul>\n<li>Kinesis Analytics 데이터를 전달할 Firehose 생성 (test-firehose-destination)</li>\n</ul>\n<p><a href=\"https://user-images.githubusercontent.com/62123161/80855321-39fd7780-8c7b-11ea-8645-8ae033de86f2.PNG\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/80855321-39fd7780-8c7b-11ea-8645-8ae033de86f2.PNG\" alt=\"kinesisAnalytics_11\"></a></p>\n<ul>\n<li>다시 Analytics로 돌아와서 Destination 버튼 클릭</li>\n<li>Destination 서비스는 Kinesis Firehose 선택 후 위에서 생성한 test-firehose-destination 선택</li>\n<li>In-application stream으로 위에서 생성한 DESTINATION_SQL_STREAM 선택 후 저장</li>\n</ul>\n<p><a href=\"https://user-images.githubusercontent.com/62123161/80855320-3964e100-8c7b-11ea-8d38-df4f865408fa.PNG\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/80855320-3964e100-8c7b-11ea-8d38-df4f865408fa.PNG\" alt=\"kinesisAnalytics_12\"></a><br><a href=\"https://user-images.githubusercontent.com/62123161/80855318-38cc4a80-8c7b-11ea-9561-dae174bc37a3.PNG\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/80855318-38cc4a80-8c7b-11ea-9561-dae174bc37a3.PNG\" alt=\"kinesisAnalytics_13\"></a></p>\n<ul>\n<li>전체 설정 확인 후 목록에서 Running 상태 확인</li>\n</ul>\n<p><a href=\"https://user-images.githubusercontent.com/62123161/80855316-3833b400-8c7b-11ea-8125-157f380587ca.PNG\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/80855316-3833b400-8c7b-11ea-8125-157f380587ca.PNG\" alt=\"kinesisAnalytics_14\"></a></p>\n<ul>\n<li>test-firehose에 연결한 Kinesis Streams 데이터 S3 저장 확인</li>\n</ul>\n<p><a href=\"https://user-images.githubusercontent.com/62123161/80855314-37028700-8c7b-11ea-9b6f-1c2bb17198b0.PNG\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/80855314-37028700-8c7b-11ea-9b6f-1c2bb17198b0.PNG\" alt=\"kinesisAnalytics_15\"></a></p>\n<ul>\n<li>test-firehose-destination에 연결한 Kinesis Analytics 데이터 S3 저장 확인</li>\n</ul>\n","text":"개발환경 구축※ 기본 개발환경IntelliJJava, SpringAWS ConsoleKinesis Data Analytics 기초설명Kinesis Data Analytics을(를) 시작하려면 스트리밍 데이터를 지속적으로 읽고 처리하는 Kinesis 데","link":"","raw":null,"photos":[],"categories":[{"name":"tip","slug":"tip","count":17,"path":"api/categories/tip.json"}],"tags":[{"name":"AWS","slug":"AWS","count":14,"path":"api/tags/AWS.json"},{"name":"Kinesis","slug":"Kinesis","count":3,"path":"api/tags/Kinesis.json"},{"name":"Analytics","slug":"Analytics","count":1,"path":"api/tags/Analytics.json"}]},{"title":"Kinesis Data Firehose","slug":"kinesisDataFirehose","date":"2020-05-01T01:21:23.000Z","updated":"2020-05-11T01:19:16.018Z","comments":true,"pin":null,"path":"api/articles/kinesisDataFirehose.json","excerpt":"","keywords":null,"cover":"https://user-images.githubusercontent.com/62123161/80773866-2b896000-8b96-11ea-9292-4988675db895.png","content":"<h2 id=\"개발환경-구축\"><a href=\"#개발환경-구축\" class=\"headerlink\" title=\"개발환경 구축\"></a>개발환경 구축</h2><p>※ 기본 개발환경</p>\n<ul>\n<li>IntelliJ</li>\n<li>Java, Spring</li>\n<li>AWS Console</li>\n</ul>\n<h2 id=\"Data-Firehose와-Data-Stream과-다른점\"><a href=\"#Data-Firehose와-Data-Stream과-다른점\" class=\"headerlink\" title=\"Data Firehose와 Data Stream과 다른점\"></a>Data Firehose와 Data Stream과 다른점</h2><ol>\n<li>Kinesis Stream은 기본 수준 서비스로, 각 파티션이 내부적으로 주문 된 여러 리더를 지원하는 파티션 된 데이터 스트림. 병합 / 분할 샤드를 관리하여 운영해야 함.</li>\n<li>커스터마이징이 가능하며 맞춤형 애플리케이션을 구축하거나 특수한 요구에 맞게 데이터를 스트리밍하는 개발자에게 가장 적합합니다. 그러나 수동 조정 및 프로비저닝이 필요합니다. 데이터는 일반적으로 24 시간 동안 스트림으로 제공되지만 추가 비용을 지불하면 최대 7 일 동안 데이터 가용성을 얻을 수 있습니다.</li>\n<li>Firehose는 매우 많은 Kinesis 사용 사례를 위해 구축 된 Kinesis 스트림 위에 구축 된 서비스로, 많은 데이터를 수집하고 이를 S3 / Redshift / ElasticSearch와 같은 스토리지 솔루션으로 파이핑 함. 파티션을 관리.</li>\n<li>스케일링은 초당 최대 기가 바이트까지 자동으로 처리되며 배치, 암호화 및 압축이 가능합니다.<br><a href=\"https://user-images.githubusercontent.com/62123161/80773866-2b896000-8b96-11ea-9292-4988675db895.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/80773866-2b896000-8b96-11ea-9292-4988675db895.png\" alt=\"kinesisfirehose_01\"></a></li>\n</ol>\n<h3 id=\"1-Firehose-생성\"><a href=\"#1-Firehose-생성\" class=\"headerlink\" title=\"1) Firehose 생성\"></a>1) Firehose 생성</h3><p><a href=\"https://user-images.githubusercontent.com/62123161/80773864-2b896000-8b96-11ea-863b-97cf308afdc9.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/80773864-2b896000-8b96-11ea-863b-97cf308afdc9.png\" alt=\"kinesisfirehose_02\"></a><br>① Firehose Name 입력<br>② 자동으로 Put되는 방식인지, DataStream에서 받아서 전달하는 방식인지 선택.<br>    현재 우리 서비스에서는 Direct Put 해도 상관없음. Data를 특정 Stream에서 컨트롤해야한다면 Stream을 선택해주면 됨.<br>③ CMK를 활용하여 Stream의 평문데이터를 Firehose로 가져오면서 암호화 진행여부<br><a href=\"https://user-images.githubusercontent.com/62123161/80773863-2af0c980-8b96-11ea-9b59-4bcd47295594.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/80773863-2af0c980-8b96-11ea-9b59-4bcd47295594.png\" alt=\"kinesisfirehose_03\"></a><br>④ Lambda를 통해 저장할 데이터를 손볼건지 결정하는 부분.<br>⑤ AWS Glue를 통해 전처리 작업을 진행할지 선택하는 부분.</p>\n<p> *Glue 란?<br>AWS Glue는 완전 관리형 ETL(추출, 변환, 로드) 서비스로, 효율적인 비용으로 간단하게 여러 데이터 스토어 간에 원하는 데이터를 분류, 정리, 보강, 이동합니다. AWS Glue는 AWS Glue 데이터 카탈로그으로 알려진 중앙 메타데이터 리포지토리, 자동적으로 Python 및 Scala 코드를 생성하는 ETL 엔진 및 종속적 해결 방안, 작업 모니터링 및 재시도를 관리하는 유연성 스케줄러로 구성됩니다. AWS Glue는 서버리스이므로 설정하거나 관리할 인프라가 없습니다.<br><a href=\"https://user-images.githubusercontent.com/62123161/80773862-2a583300-8b96-11ea-8f42-d5299b504504.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/80773862-2a583300-8b96-11ea-8f42-d5299b504504.png\" alt=\"kinesisfirehose_04\"></a><br>⑥ S3 / Redshift / Elasticsearch Service / Splunk 등 AWS의 목적지로 보낼 곳 선택<br>     (우리 서비스에서는 우선 S3를 사용함. 추후 ES, Splunk 등 검토)<br>⑦ prefix / error prefix (저장되는 파일의 S3 디렉토리 지정)<br>     kd/year-!{timestamp:YYYY}/month-!{timestamp:MM}/day-!{timestamp:dd}/<br>     kderror/!{firehose:random-string}/!{firehose:error-output-type}/!{timestamp:yyyy/MM/dd}/<br><a href=\"https://user-images.githubusercontent.com/62123161/80773857-288e6f80-8b96-11ea-87e2-9efc8190f38c.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/80773857-288e6f80-8b96-11ea-87e2-9efc8190f38c.png\" alt=\"kinesisfirehose_05\"></a><br>⑧ Buffer사이즈와 주기를 정해주어야 함.<br>    SmartTok 기준 40000대 15분동안 45MB가 쌓이고 있음. 용량이 부족하면 꽉 찬 데이터까지만 보내므로 조절이 필요함.(매우중요)<br>⑨ Compression(압축방식지정.. 비용문제만 아니면 안해도됨)<br>⑩ S3 Encryption<br>    KMS를 통한 암호화. 3번의 CMK를 통한 암호화를 지정해도되고 저장할때 KMS를 통해 지정해도 됨. 암호화는 나중에 반영.<br>⑪ Logging<br>    로깅은 항상 Enable함.<br>    본인이 코딩의 신이거나 AWS의 지배자가 아니라면 로깅 및 디버깅은 생활화 하자.<br>⑫ Permission(권한)<br>    권한은 기본권한으로..(AWS 사상 중 가장 중요시되는 최소권한의 원칙)</p>\n<h3 id=\"2-Data-직접-넣기\"><a href=\"#2-Data-직접-넣기\" class=\"headerlink\" title=\"2) Data 직접 넣기?\"></a>2) Data 직접 넣기?</h3><ul>\n<li><p>코딩이 없어서 아쉬우셨다면, 잠시 코딩을 갖는 시간을 갖겠음.</p>\n</li>\n<li><p>솔직히 Firehose는 AWS 완전관리형이기에 크게 손볼게 없다.</p>\n</li>\n<li><p>단순히 데이터 넣는 API정도뿐이라 간단히 소개함.</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><figcaption><span>basic AWS Credential</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BasicAWSCredentials awsCreds = new BasicAWSCredentials(<span class=\"string\">\"ACCESS_KEY\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"SECRET_KEY\"</span>);</span><br><span class=\"line\">    AmazonKinesisFirehoseClientBuilder clientBuilder = AmazonKinesisFirehoseClientBuilder.standard();</span><br><span class=\"line\">    clientBuilder.setRegion(<span class=\"string\">\"ap-northeast-2\"</span>); // 서울 region</span><br><span class=\"line\">    clientBuilder.setCredentials(new AWSStaticCredentialsProvider(awsCreds));</span><br><span class=\"line\">    AmazonKinesisFirehose kinesisClient = clientBuilder.build();</span><br></pre></td></tr></table></figure></div>\n\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><figcaption><span>single write</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//단일 쓰기 작업</span><br><span class=\"line\">static void sendData(AmazonKinesisFirehose kinesisClient, int count) &#123;</span><br><span class=\"line\">    String myData = <span class=\"string\">\"&#123;\\\"no\\\":\"</span> + count + <span class=\"string\">\"&#125;\\n\"</span>; // 보내려는 데이터</span><br><span class=\"line\">    PutRecordRequest putRecordsRequest = new PutRecordRequest();</span><br><span class=\"line\">    putRecordsRequest.setDeliveryStreamName(STREAM_NAME);</span><br><span class=\"line\">    Record rc = new Record();</span><br><span class=\"line\">    rc.setData(ByteBuffer.wrap(myData.getBytes()));</span><br><span class=\"line\">    putRecordsRequest.setRecord(rc);</span><br><span class=\"line\">    PutRecordResult putRecordsResult = kinesisClient.putRecord(putRecordsRequest);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Put Result\"</span> + putRecordsResult);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><figcaption><span>multiple write</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//////////////////////////////////////////</span><br><span class=\"line\"> // 10번 반복해서 전송(일괄전송)</span><br><span class=\"line\">        HashSet&lt;Record&gt; recordList = new HashSet&lt;Record&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int i = 0; i &lt; 10 ; i++) &#123;</span><br><span class=\"line\">            recordList.add(createData());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        multiSendData(kinesisClient, recordList);</span><br><span class=\"line\">//////////////////////////////////////////</span><br><span class=\"line\"> </span><br><span class=\"line\">    //일괄 쓰기 작업</span><br><span class=\"line\">    static void multiSendData(AmazonKinesisFirehose kinesisClient, HashSet&lt;Record&gt; recordList)&#123;</span><br><span class=\"line\">        PutRecordBatchRequest putRecordBatchRequest = new PutRecordBatchRequest();</span><br><span class=\"line\">        putRecordBatchRequest.setDeliveryStreamName(STREAM_NAME);</span><br><span class=\"line\">        putRecordBatchRequest.setRecords(recordList);</span><br><span class=\"line\"> </span><br><span class=\"line\">        // Put Record Batch records. Max No.Of Records we can put <span class=\"keyword\">in</span> a</span><br><span class=\"line\">        // single put record batch request is 500</span><br><span class=\"line\">        PutRecordBatchResult putRecordBatchResult = kinesisClient.putRecordBatch(putRecordBatchRequest);</span><br><span class=\"line\"> </span><br><span class=\"line\">        recordList.clear();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public static Record <span class=\"function\"><span class=\"title\">createData</span></span>() &#123;</span><br><span class=\"line\">        String data = ThreadLocalRandom.current().nextInt() + <span class=\"string\">\"\\n\"</span>;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> new Record().withData(ByteBuffer.wrap(data.getBytes()));</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"3-현재-사용처\"><a href=\"#3-현재-사용처\" class=\"headerlink\" title=\"3) 현재 사용처\"></a>3) 현재 사용처</h3><ul>\n<li>AWS IoT Core 내의 Rule Engine에 현재 사용중임. DynamoDB를 대체해서 사용하고자 하며, 추후 Analytics를 통하거나 해서 MySQL에 저장할 예정.</li>\n</ul>\n</li>\n<li><p>저장기간이 최대 7일이 한계이므로, 주기적으로 Batch작업 돌려주어야 할 것으로 보임.</p>\n<h3 id=\"결론\"><a href=\"#결론\" class=\"headerlink\" title=\"결론\"></a>결론</h3></li>\n<li><p>솔직히 Data Stream의 활용범위는 상당히 넓다. 기본적인 SQS기능뿐만 아니라 AWS 다른 솔루션 플랫폼에 적용할 수 있을정도로 활용범위가 넓은 점은 장점이지만, 모든 설정을 해줘야 한다는 단점이 있다.</p>\n</li>\n<li><p>Firehose는 몇개 안되는 설정으로 자동으로 원하는 기능을 제공해주니 단순비교는 어렵지만 개인적으로 쓰기 편한감이 있음.</p>\n</li>\n<li><p>(코딩이 필요없다…….. 위 대제목 2번에 쓴 코드를 쓸 일 자체가 없을 것으로 보임.)</p>\n</li>\n</ul>\n","text":"개발환경 구축※ 기본 개발환경IntelliJJava, SpringAWS ConsoleData Firehose와 Data Stream과 다른점Kinesis Stream은 기본 수준 서비스로, 각 파티션이 내부적으로 주문 된 여러 리더를 지원하는 파티션 ","link":"","raw":null,"photos":[],"categories":[{"name":"tip","slug":"tip","count":17,"path":"api/categories/tip.json"}],"tags":[{"name":"AWS","slug":"AWS","count":14,"path":"api/tags/AWS.json"},{"name":"Kinesis","slug":"Kinesis","count":3,"path":"api/tags/Kinesis.json"},{"name":"firehose","slug":"firehose","count":1,"path":"api/tags/firehose.json"}]},{"title":"Kinesis Data Stream","slug":"kinesisDataStream","date":"2020-04-30T09:00:58.000Z","updated":"2020-05-11T01:20:16.080Z","comments":true,"pin":null,"path":"api/articles/kinesisDataStream.json","excerpt":"","keywords":null,"cover":"/img/01.SmartTok_System_01.png","content":"<h2 id=\"개발환경-구축\"><a href=\"#개발환경-구축\" class=\"headerlink\" title=\"개발환경 구축\"></a>개발환경 구축</h2><p>※ 기본 개발환경</p>\n<ul>\n<li>IntelliJ</li>\n<li>Java, Spring</li>\n<li>AWS Console</li>\n</ul>\n<p>※ 참고자료 : <a href=\"https://docs.aws.amazon.com/ko_kr/kinesis/index.html\" target=\"_blank\" rel=\"noopener\">https://docs.aws.amazon.com/ko_kr/kinesis/index.html</a></p>\n<h2 id=\"Kinesis-기초설명\"><a href=\"#Kinesis-기초설명\" class=\"headerlink\" title=\"Kinesis 기초설명\"></a>Kinesis 기초설명</h2><ol>\n<li>Kinesis는 SQS를 기반으로 한 큐 시스템이다.</li>\n<li>종류로는 Video Streams, Data Streams, Data Firehose, Data Analytics 총 4가지가 있다.</li>\n<li>경동에서는 이 4가지 시스템 모두 사용하겠지만, Video Streams의 경우에는 홈오토, 홈넷쪽에서 사용할 것으로 추정되므로 현 블로그에서는 나머지 기능만을 설명하기로 한다.</li>\n</ol>\n<h2 id=\"Data-Stream\"><a href=\"#Data-Stream\" class=\"headerlink\" title=\"Data Stream\"></a>Data Stream</h2><ol>\n<li>Shard라는 개념을 사용하고 있으며, 큐 내의 메모리 개념으로 받아들이면 된다.</li>\n<li>ap-northeast-2(서울) 리전의 경우 기본적으로 200개의 샤드만 지원이 된다.</li>\n</ol>\n<p><a href=\"https://user-images.githubusercontent.com/62123161/80692614-c5a4c600-8b0c-11ea-98ba-1efbe0264585.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/80692614-c5a4c600-8b0c-11ea-98ba-1efbe0264585.png\" alt=\"kinesis_01\"></a></p>\n<ol start=\"3\">\n<li>한개의 Shard당 1초에 1MB씩 처리가 가능하며, 1000개의 Record를 처리한다. 읽는데는 초당 2MB한도로 읽을 수 있다. 만약, 처리할 데이터의 용량이 크다면, 그만큼의 샤드를 추가하면 된다. 이번 연습에서는 기본샤드인 1만 추가하기로 한다.</li>\n<li>편의를 위해 언어는 Java로 통일한다.</li>\n</ol>\n<h3 id=\"1-Data-Stream-만들기\"><a href=\"#1-Data-Stream-만들기\" class=\"headerlink\" title=\"1) Data Stream 만들기\"></a>1) Data Stream 만들기</h3><ol>\n<li>사용하고자 하는 Stream의 이름과 샤드의 수만 입력하면 자동으로 생성이 된다.(feat. 별거없음)</li>\n</ol>\n<h3 id=\"2-Data-Stream-Page\"><a href=\"#2-Data-Stream-Page\" class=\"headerlink\" title=\"2) Data Stream Page\"></a>2) Data Stream Page</h3><ol>\n<li>데이터 Stream이 생성이 되었다고 하면 아래와 같이 Detail 페이지를 볼 수 있다.</li>\n</ol>\n<p><a href=\"https://user-images.githubusercontent.com/62123161/80692615-c6d5f300-8b0c-11ea-8dab-ab4473eea2a2.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/80692615-c6d5f300-8b0c-11ea-8dab-ab4473eea2a2.png\" alt=\"kinesis_02\"></a></p>\n<ol start=\"2\">\n<li><p>Data Stream은 Firehose와 Analytics에 사용될 수 있으며, 데이터는 모두 Json으로 하는게 좋다. 물론, CVS파일도 지원을 하기는 한다.(사용할 때 어려울뿐…)</p>\n</li>\n<li><p>데이터 저장방식에서 암호화를 추가할 수 있다. KMS를 설정해서 사용하는데, 현 연습에서는 사용하지 않도록 한다.</p>\n</li>\n<li><p>Data Stream의 보관 기간은 1일~7일까지 선택할 수 있다. 24시간에서 더 늘리게 되면 추가요금이 발생하므로 주의하자.</p>\n</li>\n</ol>\n<h3 id=\"3-Data-Stream을-Java로-개발\"><a href=\"#3-Data-Stream을-Java로-개발\" class=\"headerlink\" title=\"3) Data Stream을 Java로 개발\"></a>3) Data Stream을 Java로 개발</h3><ol>\n<li><p>Gradle(최소 수준의 Dependence 이므로 개발하면서 필요하면 추가해준다.)</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// https://mvnrepository.com/artifact/com.amazonaws/aws-java-sdk-sqs</span><br><span class=\"line\">compile group: <span class=\"string\">'com.amazonaws'</span>, name: <span class=\"string\">'aws-java-sdk-sqs'</span>, version: <span class=\"string\">'1.11.705'</span></span><br><span class=\"line\">// https://mvnrepository.com/artifact/com.amazonaws/aws-java-sdk-core</span><br><span class=\"line\">compile group: <span class=\"string\">'com.amazonaws'</span>, name: <span class=\"string\">'aws-java-sdk-core'</span>, version: <span class=\"string\">'1.9.17'</span></span><br><span class=\"line\">// https://mvnrepository.com/artifact/com.amazonaws/amazon-kinesis-client</span><br><span class=\"line\">compile group: <span class=\"string\">'com.amazonaws'</span>, name: <span class=\"string\">'amazon-kinesis-client'</span>, version: <span class=\"string\">'1.13.2'</span></span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p>스트림에 Data PUT(Multi)</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private static List&lt;PutRecordsRequestEntry&gt; <span class=\"function\"><span class=\"title\">putItemStream</span></span>()&#123;</span><br><span class=\"line\">        BasicAWSCredentials awsCreds = new BasicAWSCredentials(<span class=\"string\">\"ACCESSKEY\"</span>, <span class=\"string\">\"SECRETKEY\"</span>);</span><br><span class=\"line\">        AmazonKinesisClientBuilder clientBuilder = AmazonKinesisClientBuilder.standard();</span><br><span class=\"line\">        clientBuilder.setRegion(<span class=\"string\">\"ap-northeast-2\"</span>); // 서울 region</span><br><span class=\"line\">        clientBuilder.setCredentials(new AWSStaticCredentialsProvider(awsCreds));</span><br><span class=\"line\">        AmazonKinesis kinesisClient = clientBuilder.build();</span><br><span class=\"line\"> </span><br><span class=\"line\">        //PutRecords</span><br><span class=\"line\">        PutRecordsRequest putRecordsRequest  = new PutRecordsRequest();</span><br><span class=\"line\">        putRecordsRequest.setStreamName(STREAM_NAME);</span><br><span class=\"line\">        List &lt;PutRecordsRequestEntry&gt; putRecordsRequestEntryList  = new ArrayList&lt;&gt;();</span><br><span class=\"line\">        try&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (int i = 0; i &lt; 10; i++) &#123;</span><br><span class=\"line\">                PutRecordsRequestEntry putRecordsRequestEntry  = new PutRecordsRequestEntry();</span><br><span class=\"line\">                String myData = <span class=\"string\">\"&#123;\\\"testAWS\\\":\"</span> + i + <span class=\"string\">\"&#125;\\n\"</span>; // 보내려는 데이터</span><br><span class=\"line\">                putRecordsRequestEntry.setData(ByteBuffer.wrap(myData.getBytes()));</span><br><span class=\"line\">//            putRecordsRequestEntry.setData(ByteBuffer.wrap(String.valueOf(i).getBytes()));</span><br><span class=\"line\">                putRecordsRequestEntry.setPartitionKey(String.format(<span class=\"string\">\"partitionKey-%d\"</span>, i));</span><br><span class=\"line\">                putRecordsRequestEntryList.add(putRecordsRequestEntry);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">            putRecordsRequest.setRecords(putRecordsRequestEntryList);</span><br><span class=\"line\">            PutRecordsResult putRecordsResult  = kinesisClient.putRecords(putRecordsRequest);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        catch (Exception e)&#123;</span><br><span class=\"line\">            System.out.println(e.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"built_in\">return</span> putRecordsRequestEntryList;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p>스트림에 Data PUT(Single)</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static void sendData(AmazonKinesis kinesisClient, int count) &#123;</span><br><span class=\"line\">        HashMap&lt;Integer,String&gt; list = new HashMap&lt;Integer,String&gt;();</span><br><span class=\"line\"> </span><br><span class=\"line\">        list.put(0,<span class=\"string\">\"&#123;\\\"NAME\\\":\\\"dhaval0\\\",\\\"TOTAL\\\":100&#125;\"</span>);</span><br><span class=\"line\">        list.put(1,<span class=\"string\">\"&#123;\\\"NAME\\\":\\\"dhaval1\\\",\\\"TOTAL\\\":200&#125;\"</span>);</span><br><span class=\"line\">        list.put(2,<span class=\"string\">\"&#123;\\\"NAME\\\":\\\"dhaval2\\\",\\\"TOTAL\\\":300&#125;\"</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">        PutRecordsRequest putRecordsRequest  = new PutRecordsRequest();</span><br><span class=\"line\">        putRecordsRequest.setStreamName(STREAM_NAME);</span><br><span class=\"line\">        List&lt;PutRecordsRequestEntry&gt; putRecordsRequestEntryList  = new ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int i = 0; i &lt; count; i++) &#123;</span><br><span class=\"line\">            String myData = list.get(i); // 보내려는 데이터</span><br><span class=\"line\">            PutRecordsRequestEntry putRecordsRequestEntry  = new PutRecordsRequestEntry();</span><br><span class=\"line\">            putRecordsRequestEntry.setData(ByteBuffer.wrap(myData.getBytes()));</span><br><span class=\"line\">            putRecordsRequestEntry.setPartitionKey(<span class=\"string\">\"MainStream\"</span>);</span><br><span class=\"line\">//            putRecordsRequestEntry.setPartitionKey(String.format(<span class=\"string\">\"partitionKey-%d\"</span>, i));</span><br><span class=\"line\">            putRecordsRequestEntryList.add(putRecordsRequestEntry);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        putRecordsRequest.setRecords(putRecordsRequestEntryList);</span><br><span class=\"line\">        PutRecordsResult putRecordsResult  = kinesisClient.putRecords(putRecordsRequest);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Put Result\"</span> + putRecordsResult);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></div></li>\n<li><p>샤드 내 총 데이터 갯수조회</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static int getDataCount(String shardId, String streamName) &#123;</span><br><span class=\"line\">        int dataCount = 0;</span><br><span class=\"line\"> </span><br><span class=\"line\">        BasicAWSCredentials awsCreds = new BasicAWSCredentials(<span class=\"string\">\"ACCESSKEY\"</span>, <span class=\"string\">\"SECRETKEY\"</span>);</span><br><span class=\"line\">        AmazonKinesisClientBuilder clientBuilder = AmazonKinesisClientBuilder.standard();</span><br><span class=\"line\">        clientBuilder.setRegion(<span class=\"string\">\"ap-northeast-2\"</span>); // 서울 region</span><br><span class=\"line\">        clientBuilder.setCredentials(new AWSStaticCredentialsProvider(awsCreds));</span><br><span class=\"line\">        AmazonKinesis kinesisClient = clientBuilder.build();</span><br><span class=\"line\"> </span><br><span class=\"line\">        String shardIterator;</span><br><span class=\"line\">        GetShardIteratorRequest getShardIteratorRequest = new GetShardIteratorRequest();</span><br><span class=\"line\">        getShardIteratorRequest.setStreamName(streamName);</span><br><span class=\"line\">        getShardIteratorRequest.setShardId(shardId);</span><br><span class=\"line\">        getShardIteratorRequest.setShardIteratorType(ShardIteratorType.TRIM_HORIZON);</span><br><span class=\"line\"> </span><br><span class=\"line\">        GetShardIteratorResult getShardIteratorResult = kinesisClient.getShardIterator(getShardIteratorRequest);</span><br><span class=\"line\">        shardIterator = getShardIteratorResult.getShardIterator();</span><br><span class=\"line\">        GetRecordsRequest getRecordsRequest = new GetRecordsRequest();</span><br><span class=\"line\">        getRecordsRequest.setShardIterator(shardIterator);</span><br><span class=\"line\">        getRecordsRequest.setLimit(1000);</span><br><span class=\"line\"> </span><br><span class=\"line\">        GetRecordsResult getRecordsResult = kinesisClient.getRecords(getRecordsRequest);</span><br><span class=\"line\">        List&lt;Record&gt; records = getRecordsResult.getRecords();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!records.isEmpty() &amp;&amp; records.size() &gt; 0)&#123;</span><br><span class=\"line\">            dataCount = records.size();</span><br><span class=\"line\">            Iterator&lt;Record&gt; iterator = records.iterator();</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(iterator.hasNext()) &#123;</span><br><span class=\"line\">                Record record = iterator.next();</span><br><span class=\"line\">                byte[] bytes = record.getData().array();</span><br><span class=\"line\">                String recordData = new String(bytes);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"Shard Id. :\"</span>+shardId+<span class=\"string\">\"Seq. No. is : \"</span>+<span class=\"string\">\"  Record data :\"</span>+recordData);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"built_in\">return</span> dataCount;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></div></li>\n<li><p>샤드 내 데이터 조회</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private static HashSet&lt;Record&gt; <span class=\"function\"><span class=\"title\">getItemStream</span></span>()&#123;</span><br><span class=\"line\">        BasicAWSCredentials awsCreds = new BasicAWSCredentials(<span class=\"string\">\"ACCESSKEY\"</span>, <span class=\"string\">\"SECRETKEY\"</span>);</span><br><span class=\"line\">        AmazonKinesisClientBuilder clientBuilder = AmazonKinesisClientBuilder.standard();</span><br><span class=\"line\">        clientBuilder.setRegion(<span class=\"string\">\"ap-northeast-2\"</span>); // 서울 region</span><br><span class=\"line\">        clientBuilder.setCredentials(new AWSStaticCredentialsProvider(awsCreds));</span><br><span class=\"line\">        AmazonKinesis kinesisClient = clientBuilder.build();</span><br><span class=\"line\"> </span><br><span class=\"line\">        List&lt;Shard&gt; shardList = getShardList();</span><br><span class=\"line\"> </span><br><span class=\"line\">        //GetRecords</span><br><span class=\"line\">        String shardIterator;</span><br><span class=\"line\">        GetShardIteratorRequest getShardIteratorRequest = new GetShardIteratorRequest();</span><br><span class=\"line\">        getShardIteratorRequest.setStreamName(STREAM_NAME);</span><br><span class=\"line\">        getShardIteratorRequest.setShardId(shardList.get(0).getShardId());</span><br><span class=\"line\">        getShardIteratorRequest.setShardIteratorType(<span class=\"string\">\"TRIM_HORIZON\"</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">        GetShardIteratorResult getShardIteratorResult = kinesisClient.getShardIterator(getShardIteratorRequest);</span><br><span class=\"line\">        shardIterator = getShardIteratorResult.getShardIterator();</span><br><span class=\"line\"> </span><br><span class=\"line\">        HashSet&lt;Record&gt; records = new HashSet&lt;Record&gt;();</span><br><span class=\"line\">        HashMap&lt;String, String&gt; view = new HashMap&lt;String, String&gt;();</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">            GetRecordsRequest getRecordsRequest = new GetRecordsRequest();</span><br><span class=\"line\">            getRecordsRequest.setShardIterator(shardIterator);</span><br><span class=\"line\">            getRecordsRequest.setLimit(25);</span><br><span class=\"line\"> </span><br><span class=\"line\">            GetRecordsResult result = kinesisClient.getRecords(getRecordsRequest);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(result.getRecords().size() == 0)&#123;</span><br><span class=\"line\">                <span class=\"built_in\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            //<span class=\"keyword\">for</span>(Record record : result.getRecords())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(int i = 0;i&lt;result.getRecords().size();i++)&#123;</span><br><span class=\"line\">                Record record = result.getRecords().get(i);</span><br><span class=\"line\">                records.add(record);</span><br><span class=\"line\"> </span><br><span class=\"line\">                view.put(record.getSequenceNumber(), new String(record.getData().array()));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                Thread.sleep(1000);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            catch (InterruptedException exception) &#123;</span><br><span class=\"line\">                throw new RuntimeException(exception);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">            shardIterator = result.getNextShardIterator();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> records;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></div></li>\n<li><p>(번외) Stream 내 Shard 리스트 출력</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private static List&lt;Shard&gt; <span class=\"function\"><span class=\"title\">getShardList</span></span>()&#123;</span><br><span class=\"line\">        BasicAWSCredentials awsCreds = new BasicAWSCredentials(<span class=\"string\">\"ACCESSKEY\"</span>, <span class=\"string\">\"SECRETKEY\"</span>);</span><br><span class=\"line\">        AmazonKinesisClientBuilder clientBuilder = AmazonKinesisClientBuilder.standard();</span><br><span class=\"line\">        clientBuilder.setRegion(<span class=\"string\">\"ap-northeast-2\"</span>); // 서울 region</span><br><span class=\"line\">        clientBuilder.setCredentials(new AWSStaticCredentialsProvider(awsCreds));</span><br><span class=\"line\">        AmazonKinesis kinesisClient = clientBuilder.build();</span><br><span class=\"line\"> </span><br><span class=\"line\">        DescribeStreamRequest describeStreamRequest = new DescribeStreamRequest();</span><br><span class=\"line\">        describeStreamRequest.setStreamName( STREAM_NAME );</span><br><span class=\"line\">        List&lt;Shard&gt; shards = new ArrayList&lt;&gt;();</span><br><span class=\"line\">        String exclusiveStartShardId = null;</span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            describeStreamRequest.setExclusiveStartShardId( exclusiveStartShardId );</span><br><span class=\"line\">            DescribeStreamResult describeStreamResult = kinesisClient.describeStream( describeStreamRequest );</span><br><span class=\"line\">            shards.addAll( describeStreamResult.getStreamDescription().getShards() );</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (describeStreamResult.getStreamDescription().getHasMoreShards() &amp;&amp; shards.size() &gt; 0) &#123;</span><br><span class=\"line\">                exclusiveStartShardId = shards.get(shards.size() - 1).getShardId();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                exclusiveStartShardId = null;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> ( exclusiveStartShardId != null );</span><br><span class=\"line\">        <span class=\"built_in\">return</span> shards;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></div></li>\n<li><p>(번외) 계정 내 Stream 리스트 조회(전체)</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private static List&lt;String&gt; <span class=\"function\"><span class=\"title\">getStreamList</span></span>()&#123;</span><br><span class=\"line\">        BasicAWSCredentials awsCreds = new BasicAWSCredentials(<span class=\"string\">\"ACCESSKEY\"</span>, <span class=\"string\">\"SECRETKEY\"</span>);</span><br><span class=\"line\">        AmazonKinesisClientBuilder clientBuilder = AmazonKinesisClientBuilder.standard();</span><br><span class=\"line\">        clientBuilder.setRegion(<span class=\"string\">\"ap-northeast-2\"</span>); // 서울 region</span><br><span class=\"line\">        clientBuilder.setCredentials(new AWSStaticCredentialsProvider(awsCreds));</span><br><span class=\"line\">        AmazonKinesis kinesisClient = clientBuilder.build();</span><br><span class=\"line\"> </span><br><span class=\"line\">        ListStreamsRequest listStreamsRequest = new ListStreamsRequest();</span><br><span class=\"line\">        listStreamsRequest.setLimit(20);</span><br><span class=\"line\">        ListStreamsResult listStreamsResult = kinesisClient.listStreams(listStreamsRequest);</span><br><span class=\"line\">        List&lt;String&gt; streamNames = listStreamsResult.getStreamNames();</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">while</span> (listStreamsResult.getHasMoreStreams())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (streamNames.size() &gt; 0) &#123;</span><br><span class=\"line\">                listStreamsRequest.setExclusiveStartStreamName(streamNames.get(streamNames.size() - 1));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            listStreamsResult = kinesisClient.listStreams(listStreamsRequest);</span><br><span class=\"line\">            streamNames.addAll(listStreamsResult.getStreamNames());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"built_in\">return</span> streamNames;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></div></li>\n<li><p>(번외) Stream 삭제</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private static Boolean deleteStream(String streamName)&#123;</span><br><span class=\"line\">        BasicAWSCredentials awsCreds = new BasicAWSCredentials(<span class=\"string\">\"ACCESSKEY\"</span>, <span class=\"string\">\"SECRETKEY\"</span>);</span><br><span class=\"line\">        AmazonKinesisClientBuilder clientBuilder = AmazonKinesisClientBuilder.standard();</span><br><span class=\"line\">        clientBuilder.setRegion(<span class=\"string\">\"ap-northeast-2\"</span>); // 서울 region</span><br><span class=\"line\">        clientBuilder.setCredentials(new AWSStaticCredentialsProvider(awsCreds));</span><br><span class=\"line\">        AmazonKinesis kinesisClient = clientBuilder.build();</span><br><span class=\"line\"> </span><br><span class=\"line\">        Boolean result = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        try&#123;</span><br><span class=\"line\">            DeleteStreamRequest deleteStreamRequest = new DeleteStreamRequest();</span><br><span class=\"line\">            deleteStreamRequest.setStreamName(streamName);</span><br><span class=\"line\">            kinesisClient.deleteStream(deleteStreamRequest);</span><br><span class=\"line\"> </span><br><span class=\"line\">            result = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        catch (Exception e)&#123;</span><br><span class=\"line\">            System.out.println(e.getMessage());</span><br><span class=\"line\">            result = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></div>\n\n</li>\n</ol>\n<h2 id=\"결론\"><a href=\"#결론\" class=\"headerlink\" title=\"결론\"></a>결론</h2><ul>\n<li>Kinesis는 기존의 SQS와 동일하게 사용해도 좋을 것 같다. 단지 SQS와 다른점은 가격이 싸고 속도가 빠르다는 점.<br>   싸고 빠르다는점 이외에도 Firehose, Analytics 등과 함께 사용하므로 더욱더 편리하게 AWS 생태계에 접근할 수 있다는 메리트가 있다.</li>\n<li>위 실습내용을 모두 돌려보고 나면, 크게 할 것이 없다는 점을 느낄 수 있을 것이다.</li>\n</ul>\n","text":"개발환경 구축※ 기본 개발환경IntelliJJava, SpringAWS Console※ 참고자료 : https://docs.aws.amazon.com/ko_kr/kinesis/index.htmlKinesis 기초설명Kinesis는 SQS를 기반으로 한","link":"","raw":null,"photos":[],"categories":[{"name":"tip","slug":"tip","count":17,"path":"api/categories/tip.json"}],"tags":[{"name":"AWS","slug":"AWS","count":14,"path":"api/tags/AWS.json"},{"name":"Kinesis","slug":"Kinesis","count":3,"path":"api/tags/Kinesis.json"},{"name":"Cloud","slug":"Cloud","count":1,"path":"api/tags/Cloud.json"}]},{"title":"Git Hub 설정","slug":"github-useage","date":"2020-04-29T06:39:58.000Z","updated":"2020-04-29T11:30:47.673Z","comments":true,"pin":null,"path":"api/articles/github-useage.json","excerpt":"","keywords":null,"cover":null,"content":"<h1 id=\"—-GitHub-Pages-만들기-—\"><a href=\"#—-GitHub-Pages-만들기-—\" class=\"headerlink\" title=\"— GitHub Pages 만들기 —\"></a>— GitHub Pages 만들기 —</h1><p>참고 : <a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"noopener\">https://pages.github.com/</a></p>\n<h3 id=\"1-Github-Repository-생성\"><a href=\"#1-Github-Repository-생성\" class=\"headerlink\" title=\"1) Github Repository 생성\"></a>1) Github Repository 생성</h3><ol>\n<li>New repository 버튼 클릭</li>\n<li>Repository name 입력 : arcjjang.github.io</li>\n<li>Public 선택</li>\n<li>Create repository 버튼 클릭</li>\n</ol>\n<h3 id=\"2-터미널에서-Clone-the-repository\"><a href=\"#2-터미널에서-Clone-the-repository\" class=\"headerlink\" title=\"2) 터미널에서 Clone the repository\"></a>2) 터미널에서 Clone the repository</h3><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/arcjjang/arcjjang.github.io.git</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"3-Hello-World\"><a href=\"#3-Hello-World\" class=\"headerlink\" title=\"3) Hello World\"></a>3) Hello World</h3><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> arcjjang.github.io</span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">\"Hello World\"</span> &gt; index.html</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"4-Push-it\"><a href=\"#4-Push-it\" class=\"headerlink\" title=\"4) Push it\"></a>4) Push it</h3><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add --all</span><br><span class=\"line\">$ git commit -m <span class=\"string\">\"Initial commit\"</span></span><br><span class=\"line\">$ git push -u origin master</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"5-go-to-https-arcjjang-github-io\"><a href=\"#5-go-to-https-arcjjang-github-io\" class=\"headerlink\" title=\"5) go to https://arcjjang.github.io\"></a>5) go to <em><a href=\"https://arcjjang.github.io\" target=\"_blank\" rel=\"noopener\">https://arcjjang.github.io</a></em></h3><h1 id=\"—-Hexo-적용하기-—\"><a href=\"#—-Hexo-적용하기-—\" class=\"headerlink\" title=\"— Hexo 적용하기 —\"></a>— Hexo 적용하기 —</h1><p>참고 : <a href=\"https://hexo.io/ko/index.html\" target=\"_blank\" rel=\"noopener\">https://hexo.io/ko/index.html</a></p>\n<h3 id=\"1-Hexo-설치-및-생성\"><a href=\"#1-Hexo-설치-및-생성\" class=\"headerlink\" title=\"1) Hexo 설치 및 생성\"></a>1) Hexo 설치 및 생성</h3><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-cli -g</span><br><span class=\"line\">$ hexo init blog</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> blog</span><br><span class=\"line\">$ npm install</span><br><span class=\"line\">$ npm install hexo-deployer-git --save &lt;-- Git으로 배포하는 경우 설치</span><br><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"2-Hexo-환경파일-수정\"><a href=\"#2-Hexo-환경파일-수정\" class=\"headerlink\" title=\"2) Hexo 환경파일 수정\"></a>2) Hexo 환경파일 수정</h3><p>/_config.yml</p>\n<h4 id=\"2-1-Site-설정\"><a href=\"#2-1-Site-설정\" class=\"headerlink\" title=\"2-1) Site 설정\"></a>2-1) Site 설정</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"YML\"><figure class=\"iseeu highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Site</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">Coder`s</span> <span class=\"string\">Frontline</span></span><br><span class=\"line\"><span class=\"attr\">subtitle:</span> <span class=\"string\">For</span> <span class=\"string\">my</span> <span class=\"string\">poor</span> <span class=\"string\">memory...</span></span><br><span class=\"line\"><span class=\"attr\">description:</span> <span class=\"string\">나만을</span> <span class=\"string\">위한,</span> <span class=\"string\">나의</span> <span class=\"string\">불쌍한(?)</span> <span class=\"string\">기억력을</span> <span class=\"string\">위한</span> <span class=\"string\">지식</span> <span class=\"string\">저장소</span></span><br><span class=\"line\"><span class=\"attr\">author:</span> <span class=\"string\">arcjjang</span></span><br><span class=\"line\"><span class=\"attr\">language:</span></span><br><span class=\"line\"><span class=\"attr\">timezone:</span></span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"2-2-URL-설정\"><a href=\"#2-2-URL-설정\" class=\"headerlink\" title=\"2-2) URL 설정\"></a>2-2) URL 설정</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"YML\"><figure class=\"iseeu highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># URL</span></span><br><span class=\"line\"><span class=\"attr\">url:</span> <span class=\"string\">https://arcjjang.github.io</span></span><br><span class=\"line\"><span class=\"attr\">root:</span> <span class=\"string\">/</span></span><br><span class=\"line\"><span class=\"attr\">permalink:</span> <span class=\"string\">:year/:month/:day/:title/</span></span><br><span class=\"line\"><span class=\"attr\">permalink_defaults:</span></span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"2-3-배포-설정\"><a href=\"#2-3-배포-설정\" class=\"headerlink\" title=\"2-3) 배포 설정\"></a>2-3) 배포 설정</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"YML\"><figure class=\"iseeu highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Deployment</span></span><br><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span> <span class=\"string\">https://github.com/arcjjang/arcjjang.github.io.git</span></span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"3-로컬에서-서버-실행하기\"><a href=\"#3-로컬에서-서버-실행하기\" class=\"headerlink\" title=\"3) 로컬에서 서버 실행하기\"></a>3) 로컬에서 서버 실행하기</h3><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"YML\"><figure class=\"iseeu highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">$</span> <span class=\"string\">hexo</span> <span class=\"string\">server</span></span><br></pre></td></tr></table></figure></div>\n<p>go to <a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/</a></p>\n<h3 id=\"4-배포하기\"><a href=\"#4-배포하기\" class=\"headerlink\" title=\"4) 배포하기\"></a>4) 배포하기</h3><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"YML\"><figure class=\"iseeu highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">$</span> <span class=\"string\">hexo</span> <span class=\"string\">clean</span></span><br><span class=\"line\"><span class=\"string\">$</span> <span class=\"string\">hexo</span> <span class=\"string\">deploy</span> <span class=\"string\">--generate</span></span><br></pre></td></tr></table></figure></div>\n\n<p>※ windows 환경에서 deploy중에 username error가 나면 윈도우자격증명을 다시 설정</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global credential.helper wincred</span><br></pre></td></tr></table></figure></div>\n\n<h1 id=\"—-테마-적용하기-—\"><a href=\"#—-테마-적용하기-—\" class=\"headerlink\" title=\"— 테마 적용하기 —\"></a>— 테마 적용하기 —</h1><p>테마 종류 : <a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">https://hexo.io/themes/</a></p>\n<h3 id=\"1-테마-설치\"><a href=\"#1-테마-설치\" class=\"headerlink\" title=\"1) 테마 설치\"></a>1) 테마 설치</h3><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"YML\"><figure class=\"iseeu highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">$</span> <span class=\"string\">cd</span> <span class=\"string\">themes</span></span><br><span class=\"line\"><span class=\"string\">$</span> <span class=\"string\">git</span> <span class=\"string\">clone</span> <span class=\"string\">https://github.com/klugjo/hexo-theme-clean-blog.git</span> <span class=\"string\">clean-blog</span></span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"2-테마-설정하기\"><a href=\"#2-테마-설정하기\" class=\"headerlink\" title=\"2) 테마 설정하기\"></a>2) 테마 설정하기</h3><blockquote>\n<p>/clean-blog/_config.yml</p>\n</blockquote>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"YML\"><figure class=\"iseeu highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Header</span></span><br><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\">  <span class=\"attr\">Home:</span> <span class=\"string\">/</span></span><br><span class=\"line\">  <span class=\"attr\">Archives:</span> <span class=\"string\">/archives</span></span><br><span class=\"line\">  <span class=\"attr\">Tags:</span> <span class=\"string\">/tags</span></span><br><span class=\"line\">  <span class=\"attr\">Categories:</span> <span class=\"string\">/categories</span></span><br><span class=\"line\">  <span class=\"attr\">Github:</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">https://github.com/arcjjang</span></span><br><span class=\"line\">    <span class=\"attr\">icon:</span> <span class=\"string\">github</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Title on top left of menu. Leave empty to use main blog title</span></span><br><span class=\"line\"><span class=\"attr\">menu_title:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># URL of the Home page image</span></span><br><span class=\"line\"><span class=\"attr\">index_cover:</span> <span class=\"string\">/images/topimage.jpg</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Social Accounts</span></span><br><span class=\"line\"><span class=\"attr\">twitter_url:</span></span><br><span class=\"line\"><span class=\"attr\">twitter_handle:</span></span><br><span class=\"line\"><span class=\"attr\">facebook_url:</span></span><br><span class=\"line\"><span class=\"attr\">github_url:</span> <span class=\"string\">https://github.com/arcjjang</span></span><br><span class=\"line\"><span class=\"attr\">gitlab_url:</span></span><br><span class=\"line\"><span class=\"attr\">linkedin_url:</span></span><br><span class=\"line\"><span class=\"attr\">mailto:</span> <span class=\"string\">arcelias@naver.com</span></span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"3-Tags-페이지-만들기\"><a href=\"#3-Tags-페이지-만들기\" class=\"headerlink\" title=\"3) Tags 페이지 만들기\"></a>3) Tags 페이지 만들기</h3><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> ..</span><br><span class=\"line\">$ hexo new page <span class=\"string\">\"tags\"</span></span><br></pre></td></tr></table></figure></div>\n\n<p>/source/tags/index.md 파일 수정</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: All tags</span><br><span class=\"line\">type: &quot;tags&quot;</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"4-Categories-페이지-만들기\"><a href=\"#4-Categories-페이지-만들기\" class=\"headerlink\" title=\"4) Categories 페이지 만들기\"></a>4) Categories 페이지 만들기</h3><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new page <span class=\"string\">\"categories\"</span></span><br></pre></td></tr></table></figure></div>\n\n<p>/source/categories/index.md 파일 수정</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: All categories</span><br><span class=\"line\">type: &quot;categories&quot;</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"5-테마-선택하기\"><a href=\"#5-테마-선택하기\" class=\"headerlink\" title=\"5) 테마 선택하기\"></a>5) 테마 선택하기</h3><blockquote>\n<p>/_config.yml 파일</p>\n</blockquote>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">theme: clean-blog</span><br></pre></td></tr></table></figure></div>\n\n<h1 id=\"—-Post-쓰기-—\"><a href=\"#—-Post-쓰기-—\" class=\"headerlink\" title=\"— Post 쓰기 —\"></a>— Post 쓰기 —</h1><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new post 포스트명</span><br></pre></td></tr></table></figure></div>\n\n<p>/source/posts/포스트명.md 파일 수정</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: Github Pages + Hexo</span><br><span class=\"line\">date: 2018-02-02 14:13:10</span><br><span class=\"line\">tags: [github, hexo]</span><br><span class=\"line\">cover: # post cover image</span><br><span class=\"line\">categories: [blog]</span><br><span class=\"line\">subtitle: 나만의 블러그를 만들어보자.</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure></div>\n\n<p>참고 : <a href=\"https://guides.github.com/features/mastering-markdown/\" target=\"_blank\" rel=\"noopener\">https://guides.github.com/features/mastering-markdown/</a></p>\n","text":"— GitHub Pages 만들기 —참고 : https://pages.github.com/1) Github Repository 생성New repository 버튼 클릭Repository name 입력 : arcjjang.github.ioPublic 선","link":"","raw":null,"photos":[],"categories":[{"name":"tip","slug":"tip","count":17,"path":"api/categories/tip.json"}],"tags":[{"name":"Hexo","slug":"Hexo","count":1,"path":"api/tags/Hexo.json"},{"name":"GITHUB","slug":"GITHUB","count":1,"path":"api/tags/GITHUB.json"}]}]}