{"title":"SQS(Simple Queue Service)","slug":"SQS","date":"2020-05-02T04:54:16.000Z","updated":"2020-05-02T05:08:26.937Z","comments":true,"path":"api/articles/SQS.json","photos":[],"link":"","excerpt":"","covers":["https://user-images.githubusercontent.com/62123161/80855560-14716d80-8c7d-11ea-9a58-fa748f417da0.png","https://user-images.githubusercontent.com/62123161/80855561-15a29a80-8c7d-11ea-99fe-dd9d95635b7e.png"],"content":"<ol>\n<li><p>Kinesis가 있으니 SQS를 쓸 일이 없겠다. 이걸 뭐하러 쓰나?</p>\n</li>\n<li><p>라고 생각했다면, 한참 더 공부해야한다. </p>\n</li>\n<li><p>우선 Kinesis와 SQS의 큰 차이점을 비교한다.</p>\n</li>\n</ol>\n<h3 id=\"Kinesis-vs-SQS\"><a href=\"#Kinesis-vs-SQS\" class=\"headerlink\" title=\"Kinesis vs SQS\"></a>Kinesis vs SQS</h3><ul>\n<li>Kinesis는 스트리밍 데이터 수집 서비스이고 SQS는 메시지 대기열이다.</li>\n<li>Kinesis는 대량의 스트리밍 데이터를 수집하도록 설계되었으며 SQS는 메시지 브로커, 디커플링 메커니즘으로 설계되었으며 이벤트 중심 아키텍처다.</li>\n<li>SQS를 사용하면 큐에서 메시지를 가져 와서 처리 중에 보이지 않는 것으로 표시 할 수 있습니다. 해당 소비자가 메시지를 큐에서 삭제하지 않으면 가시성 시간 초과가 만료 된 후에 메시지가 큐로 돌아가서 다른 소비자가 메시지를 처리 ​​할 수 ​​있습니다. SQS에는 데드 레터 큐가 내장되어 있습니다. 이러한 기능을 통해 다른 소비자가 대기열로 돌아갈 때 실패한 메시지 처리를 자동으로 재 시도 할 수 있습니다. SQS는 또한 많은 소비자가 대기열에서 메시지를 가져 와서 병렬로 처리 할 수 ​​있도록함으로써 병렬 또는 팬 아웃 처리 아키텍처를 지원합니다.</li>\n<li>Kinesis 및 Kinesis Firehose는 Elasticsearch, DynamoDB, S3 등과 같은 서비스 (데이터의 지속성 저장소)와 통합되는 반면 SQS는 Lambda, S3, SNS 등과 같은 서비스 (메시징 및 이벤트 중심 구성 요소)와 통합됩니다.</li>\n<li>이외에도 엄청나게 많은 차이점이 있지만, 링크 참고하면 더 큰 차이를 느낄 수 있음.</li>\n</ul>\n<h2 id=\"SQS는-최초의-AWS-서비스\"><a href=\"#SQS는-최초의-AWS-서비스\" class=\"headerlink\" title=\"SQS는 최초의 AWS 서비스!!!\"></a>SQS는 최초의 AWS 서비스!!!</h2><h3 id=\"1-SQS-서비스-만들기\"><a href=\"#1-SQS-서비스-만들기\" class=\"headerlink\" title=\"1) SQS 서비스 만들기.\"></a>1) SQS 서비스 만들기.</h3><p><img src=\"https://user-images.githubusercontent.com/62123161/80855560-14716d80-8c7d-11ea-9a58-fa748f417da0.png\" alt=\"sqs_01\"><br>끝.</p>\n<ul>\n<li>허무하지만 이게 끝 맞다. 소스로는 아래와 같이 추가해주면 된다.</li>\n</ul>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><figcaption><span>Queue vs FIFO Queue</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;Standard QUEUE의 경우</span><br><span class=\"line\">    &#x2F;&#x2F;2-1. Standard Create Queue</span><br><span class=\"line\">    CreateQueueRequest create_request &#x3D; new CreateQueueRequest(&quot;minseoktestQueue&quot;)</span><br><span class=\"line\">            .addAttributesEntry(&quot;DelaySeconds&quot;, &quot;0&quot;) &#x2F;&#x2F;An integer from 0 to 900 seconds (15 minutes). Default: 0.</span><br><span class=\"line\">            .addAttributesEntry(&quot;VisibilityTimeout&quot;, &quot;30&quot;) &#x2F;&#x2F; An integer from 0 to 43,200 (12 hours). Default: 30.</span><br><span class=\"line\">            .addAttributesEntry(&quot;MessageRetentionPeriod&quot;, &quot;345600&quot;) &#x2F;&#x2F; An integer from 60 seconds (1 minute) to 1,209,600 seconds (14 days). Default: 345,600 (4 days).</span><br><span class=\"line\">            .addAttributesEntry(&quot;MaximumMessageSize&quot;, &quot;262144&quot;); &#x2F;&#x2F;An integer from 1,024 bytes (1 KiB) to 262,144 bytes (256 KiB). Default: 262,144 (256 KiB).</span><br><span class=\"line\">    String standardQueueUrl &#x3D; sqs.createQueue(create_request).getQueueUrl();</span><br><span class=\"line\"> </span><br><span class=\"line\">&#x2F;&#x2F;FIFO QUEUE의 경우</span><br><span class=\"line\">    &#x2F;&#x2F;1-1. FIFO Create Queue</span><br><span class=\"line\">    Map&lt;String, String&gt; queueAttributes &#x3D; new HashMap&lt;&gt;();</span><br><span class=\"line\">    queueAttributes.put(&quot;FifoQueue&quot;, &quot;true&quot;);</span><br><span class=\"line\">    queueAttributes.put(&quot;ContentBasedDeduplication&quot;, &quot;true&quot;);</span><br><span class=\"line\">    queueAttributes.put(&quot;VisibilityTimeout&quot;, &quot;1&quot;);</span><br><span class=\"line\">    CreateQueueRequest createFifoQueueRequest &#x3D; new CreateQueueRequest(</span><br><span class=\"line\">            &quot;minseok1.fifo&quot;).withAttributes(queueAttributes);</span><br><span class=\"line\">    String fifoQueueUrl &#x3D; sqs.createQueue(createFifoQueueRequest)</span><br><span class=\"line\">            .getQueueUrl();</span><br></pre></td></tr></table></figure></div>\n<ul>\n<li>하지만, 이렇게 끝나면 정말 별거 없는 서비스가 될 우려가 있기에 많은 소스코드와 함께 지원되는 API를 검토하고 활용해보자.</li>\n<li>SQS도 Kinesis와 마찬가지로 큐에 데이터를 쌓는것이지만, SQS는 Console화면에서 데이터가 어떤것이 들어있는지 아주 매우 많이 쉽게 볼 수 있다.</li>\n<li>예제는 현재 Alive데이터를 담아두도록 설계해둔 SQS(2020-01-30 기준으로 폐쇄) alive-sqs-event 큐이다.<br><img src=\"https://user-images.githubusercontent.com/62123161/80855561-15a29a80-8c7d-11ea-99fe-dd9d95635b7e.png\" alt=\"sqs_02\"></li>\n<li>화면보면 알겠지만, 페이지별로 몇개의 Row를 볼 수 있는지와 Polling 주기를 선택할 수 있다.</li>\n</ul>\n<h3 id=\"2-기능\"><a href=\"#2-기능\" class=\"headerlink\" title=\"2) 기능\"></a>2) 기능</h3><h4 id=\"전체-큐-리스트\"><a href=\"#전체-큐-리스트\" class=\"headerlink\" title=\"전체 큐 리스트\"></a>전체 큐 리스트</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><figcaption><span>List</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;Standard QUEUE의 경우</span><br><span class=\"line\">    &#x2F;&#x2F;1-2. Standard Queue List(All)</span><br><span class=\"line\">    ListQueuesResult lq_result &#x3D; sqs.listQueues();</span><br><span class=\"line\">    System.out.println(&quot;Your SQS Queue URLs:&quot;);</span><br><span class=\"line\">    for (String url : lq_result.getQueueUrls()) &#123;</span><br><span class=\"line\">        System.out.println(url);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#x2F;&#x2F;FIFO QUEUE의 경우</span><br><span class=\"line\">    &#x2F;&#x2F;1-2. FIFO Queue List(All)</span><br><span class=\"line\">    ListQueuesResult lq_result &#x3D; sqs.listQueues();</span><br><span class=\"line\">    System.out.println(&quot;Your SQS Queue URLs:&quot;);</span><br><span class=\"line\">    for (String url : lq_result.getQueueUrls()) &#123;</span><br><span class=\"line\">        System.out.println(url);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"특정키워드로-큐-찾기-여러개-검색해도-가능-→-Queue-이름이다-Queue의-데이터가-아니고\"><a href=\"#특정키워드로-큐-찾기-여러개-검색해도-가능-→-Queue-이름이다-Queue의-데이터가-아니고\" class=\"headerlink\" title=\"특정키워드로 큐 찾기(여러개 검색해도 가능) → Queue 이름이다. Queue의 데이터가 아니고!!\"></a>특정키워드로 큐 찾기(여러개 검색해도 가능) → Queue 이름이다. Queue의 데이터가 아니고!!</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><figcaption><span>Queue</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;Standard QUEUE의 경우</span><br><span class=\"line\">    &#x2F;&#x2F;1-3. Standard Queue Search(KEY_WORD)</span><br><span class=\"line\">    String name_prefix &#x3D; &quot;KEY_WORD_ENTER&quot;;</span><br><span class=\"line\">    lq_result &#x3D; sqs.listQueues(new ListQueuesRequest(name_prefix));</span><br><span class=\"line\">    System.out.println(&quot;Queue URLs with prefix: &quot; + name_prefix);</span><br><span class=\"line\">    for (String url : lq_result.getQueueUrls()) &#123;</span><br><span class=\"line\">        System.out.println(url);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#x2F;&#x2F;FIFO QUEUE의 경우</span><br><span class=\"line\">    &#x2F;&#x2F;1-3. FIFO Queue Search(KEY_WORD)</span><br><span class=\"line\">    String name_prefix &#x3D; &quot;KEY_WORD_ENTER&quot;;</span><br><span class=\"line\">    lq_result &#x3D; sqs.listQueues(new ListQueuesRequest(name_prefix));</span><br><span class=\"line\">    System.out.println(&quot;Queue URLs with prefix: &quot; + name_prefix);</span><br><span class=\"line\">    for (String url : lq_result.getQueueUrls()) &#123;</span><br><span class=\"line\">        System.out.println(url);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"큐-삭제\"><a href=\"#큐-삭제\" class=\"headerlink\" title=\"큐 삭제\"></a>큐 삭제</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><figcaption><span>Queue</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;Standard QUEUE의 경우</span><br><span class=\"line\">    &#x2F;&#x2F;1-4. Standard Queue Delete(URL)</span><br><span class=\"line\">    sqs.deleteQueue(fifoQueueUrl);</span><br><span class=\"line\"> </span><br><span class=\"line\">&#x2F;&#x2F;FIFO QUEUE의 경우</span><br><span class=\"line\">    &#x2F;&#x2F;1-4. FIFO Queue Delete(URL)</span><br><span class=\"line\">    sqs.deleteQueue(fifoQueueUrl);</span><br></pre></td></tr></table></figure></div>\n<h4 id=\"단일-데이터-삽입\"><a href=\"#단일-데이터-삽입\" class=\"headerlink\" title=\"단일 데이터 삽입\"></a>단일 데이터 삽입</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><figcaption><span>Single Message</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;Standard QUEUE의 경우</span><br><span class=\"line\">    &#x2F;&#x2F;1-5. Standard Posting a Message to a Queue</span><br><span class=\"line\">    SendMessageRequest send_msg_request &#x3D; new SendMessageRequest()</span><br><span class=\"line\">            .withQueueUrl(fifoQueueUrl)</span><br><span class=\"line\">            .withMessageBody(&quot;hello world&quot;)</span><br><span class=\"line\">            .withDelaySeconds(0);</span><br><span class=\"line\">    sqs.sendMessage(send_msg_request);</span><br><span class=\"line\"> </span><br><span class=\"line\">&#x2F;&#x2F;FIFO QUEUE의 경우</span><br><span class=\"line\">    &#x2F;&#x2F;1-5. FIFO Posting a Message to a FIFO Queue</span><br><span class=\"line\">    SendMessageRequest send_msg_request &#x3D; new SendMessageRequest()</span><br><span class=\"line\">            .withQueueUrl(fifoQueueUrl)</span><br><span class=\"line\">            .withMessageBody(&quot;hello world&quot;)</span><br><span class=\"line\">            .withMessageGroupId(&quot;minseok-group-1&quot;)</span><br><span class=\"line\">            .withDelaySeconds(0);</span><br><span class=\"line\">    sqs.sendMessage(send_msg_request);</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"여러-데이터-삽입\"><a href=\"#여러-데이터-삽입\" class=\"headerlink\" title=\"여러 데이터 삽입\"></a>여러 데이터 삽입</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><figcaption><span>Multiple Data </span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;Standard QUEUE의 경우</span><br><span class=\"line\">    &#x2F;&#x2F;1-6. Standard Posting Multiple Messages to a Queue</span><br><span class=\"line\">    List&lt;SendMessageBatchRequestEntry&gt; messageEntries &#x3D; new ArrayList&lt;&gt;();</span><br><span class=\"line\">    messageEntries.add(new SendMessageBatchRequestEntry()</span><br><span class=\"line\">            .withId(&quot;id-1&quot;)</span><br><span class=\"line\">            .withMessageBody(&quot;batch-1&quot;));</span><br><span class=\"line\">    messageEntries.add(new SendMessageBatchRequestEntry()</span><br><span class=\"line\">            .withId(&quot;id-2&quot;)</span><br><span class=\"line\">            .withMessageBody(&quot;batch-2&quot;));</span><br><span class=\"line\"> </span><br><span class=\"line\">    SendMessageBatchRequest sendMessageBatchRequest</span><br><span class=\"line\">            &#x3D; new SendMessageBatchRequest(fifoQueueUrl, messageEntries);</span><br><span class=\"line\">    sqs.sendMessageBatch(sendMessageBatchRequest);</span><br><span class=\"line\"> </span><br><span class=\"line\">&#x2F;&#x2F;FIFO QUEUE의 경우</span><br><span class=\"line\">    &#x2F;&#x2F;1-6. FIFO Posting Multiple Messages to a Queue</span><br><span class=\"line\">    List&lt;SendMessageBatchRequestEntry&gt; messageEntries &#x3D; new ArrayList&lt;&gt;();</span><br><span class=\"line\">    messageEntries.add(new SendMessageBatchRequestEntry()</span><br><span class=\"line\">            .withId(&quot;id-1&quot;)</span><br><span class=\"line\">            .withMessageBody(&quot;batch-1&quot;)</span><br><span class=\"line\">            .withMessageGroupId(&quot;minseok-group-1&quot;));</span><br><span class=\"line\">    messageEntries.add(new SendMessageBatchRequestEntry()</span><br><span class=\"line\">            .withId(&quot;id-2&quot;)</span><br><span class=\"line\">            .withMessageBody(&quot;batch-2&quot;)</span><br><span class=\"line\">            .withMessageGroupId(&quot;minseok-group-1&quot;));</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"큐-내의-데이터-읽기\"><a href=\"#큐-내의-데이터-읽기\" class=\"headerlink\" title=\"큐 내의 데이터 읽기\"></a>큐 내의 데이터 읽기</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><figcaption><span>Data In Queue</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;Standard QUEUE &#x2F; FIFO QUEUE의 경우</span><br><span class=\"line\">    &#x2F;&#x2F;1-7. Reading Messages from Queues</span><br><span class=\"line\">    ReceiveMessageRequest receiveMessageRequest &#x3D; new ReceiveMessageRequest(fifoQueueUrl)</span><br><span class=\"line\">            .withWaitTimeSeconds(10)</span><br><span class=\"line\">            .withMaxNumberOfMessages(10);</span><br><span class=\"line\"> </span><br><span class=\"line\">    List&lt;Message&gt; sqsMessages &#x3D; sqs.receiveMessage(receiveMessageRequest).getMessages();</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"큐-내의-데이터-삭제\"><a href=\"#큐-내의-데이터-삭제\" class=\"headerlink\" title=\"큐 내의 데이터 삭제\"></a>큐 내의 데이터 삭제</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><figcaption><span>Data In Queue</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;Standard QUEUE &#x2F; FIFO QUEUE의 경우</span><br><span class=\"line\">    &#x2F;&#x2F;1-8. Deleting a Message from a Queue</span><br><span class=\"line\">    for (Message m : sqsMessages) &#123;</span><br><span class=\"line\">        sqs.deleteMessage(fifoQueueUrl, m.getReceiptHandle());</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"전달못한-Queue\"><a href=\"#전달못한-Queue\" class=\"headerlink\" title=\"전달못한 Queue\"></a>전달못한 Queue</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><figcaption><span>Letter Queues</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;Standard QUEUE &#x2F; FIFO QUEUE의 경우</span><br><span class=\"line\">    &#x2F;&#x2F;1-9. FIFO Dead Letter Queues1(TODO:배달못한 편지 대기열을 생성하고,</span><br><span class=\"line\">    &#x2F;*String deadLetterQueueUrl &#x3D; sqs.createQueue(&quot;aws-sqs:&#x2F;&#x2F;notification_queue?amazonSQSClient&#x3D;#sqsClient&quot;).getQueueUrl();*&#x2F;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; Create dead-letter queue</span><br><span class=\"line\">        Map&lt;String, String&gt; queueAttributes &#x3D; new HashMap&lt;&gt;();</span><br><span class=\"line\">        queueAttributes.put(&quot;FifoQueue&quot;, &quot;true&quot;);</span><br><span class=\"line\">        queueAttributes.put(&quot;ContentBasedDeduplication&quot;, &quot;true&quot;);</span><br><span class=\"line\">        queueAttributes.put(&quot;VisibilityTimeout&quot;, &quot;1&quot;);</span><br><span class=\"line\">        CreateQueueRequest createFifoQueueRequest &#x3D; new CreateQueueRequest(</span><br><span class=\"line\">                &quot;deadletterminseok.fifo&quot;).withAttributes(queueAttributes);</span><br><span class=\"line\">        String fifoQueueUrls &#x3D; sqs.createQueue(createFifoQueueRequest)</span><br><span class=\"line\">                .getQueueUrl();</span><br><span class=\"line\">    &#125; catch (AmazonSQSException e) &#123;</span><br><span class=\"line\">        if (!e.getErrorCode().equals(&quot;QueueAlreadyExists&quot;)) &#123;</span><br><span class=\"line\">            throw e;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#x2F;&#x2F;TODO:minseok.fifo 로 통신하다가 부하가 걸리면 deadletterminseok.fifo로 보내도록 설정하는 아래 코드</span><br><span class=\"line\">    String dl_queue_url &#x3D; sqs.getQueueUrl(&quot;deadletterminseok.fifo&quot;)</span><br><span class=\"line\">            .getQueueUrl();</span><br><span class=\"line\">    GetQueueAttributesResult queue_attrs &#x3D; sqs.getQueueAttributes(</span><br><span class=\"line\">            new GetQueueAttributesRequest(dl_queue_url)</span><br><span class=\"line\">                    .withAttributeNames(&quot;QueueArn&quot;));</span><br><span class=\"line\">    String dl_queue_arn &#x3D; queue_attrs.getAttributes().get(&quot;QueueArn&quot;);</span><br><span class=\"line\">    &#x2F;&#x2F; Set dead letter queue with redrive policy on source queue.</span><br><span class=\"line\">    String src_queue_url &#x3D; sqs.getQueueUrl(&quot;minseok.fifo&quot;)</span><br><span class=\"line\">            .getQueueUrl();</span><br><span class=\"line\">    SetQueueAttributesRequest request &#x3D; new SetQueueAttributesRequest()</span><br><span class=\"line\">            .withQueueUrl(src_queue_url)</span><br><span class=\"line\">            .addAttributesEntry(&quot;RedrivePolicy&quot;,</span><br><span class=\"line\">                    &quot;&#123;\\&quot;maxReceiveCount\\&quot;:\\&quot;5\\&quot;, \\&quot;deadLetterTargetArn\\&quot;:\\&quot;&quot;</span><br><span class=\"line\">                            + dl_queue_arn + &quot;\\&quot;&#125;&quot;);</span><br><span class=\"line\">    sqs.setQueueAttributes(request);</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">&#x2F;&#x2F;또다른 방법(샘플)</span><br><span class=\"line\">    &#x2F;&#x2F;1-10. FIFO Dead Letter Queues</span><br><span class=\"line\">    GetQueueAttributesResult deadLetterQueueAttributes &#x3D; sqs.getQueueAttributes(</span><br><span class=\"line\">            new GetQueueAttributesRequest(dl_queue_url)</span><br><span class=\"line\">                    .withAttributeNames(&quot;QueueArn&quot;));</span><br><span class=\"line\"> </span><br><span class=\"line\">    String deadLetterQueueARN &#x3D; deadLetterQueueAttributes.getAttributes()</span><br><span class=\"line\">            .get(&quot;QueueArn&quot;);</span><br><span class=\"line\">    SetQueueAttributesRequest queueAttributesRequest &#x3D; new SetQueueAttributesRequest()</span><br><span class=\"line\">            &#x2F;&#x2F;.withQueueUrl(standardQueueUrl)</span><br><span class=\"line\">            .withQueueUrl(&quot;https:&#x2F;&#x2F;sqs.ap-northeast-2.amazonaws.com&#x2F;491870877159&#x2F;minseok.fifo&quot;)</span><br><span class=\"line\">            .addAttributesEntry(&quot;RedrivePolicy&quot;,</span><br><span class=\"line\">                    &quot;&#123;\\&quot;maxReceiveCount\\&quot;:\\&quot;2\\&quot;, &quot;</span><br><span class=\"line\">                            + &quot;\\&quot;deadLetterTargetArn\\&quot;:\\&quot;&quot; + deadLetterQueueARN + &quot;\\&quot;&#125;&quot;);</span><br><span class=\"line\"> </span><br><span class=\"line\">    sqs.setQueueAttributes(queueAttributesRequest);</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"Monitoring\"><a href=\"#Monitoring\" class=\"headerlink\" title=\"Monitoring\"></a>Monitoring</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;Standard QUEUE &#x2F; FIFO QUEUE의 경우</span><br><span class=\"line\">    &#x2F;&#x2F;1-11. FIFO Monitoring</span><br><span class=\"line\">    GetQueueAttributesRequest getQueueAttributesRequest</span><br><span class=\"line\">            &#x2F;&#x2F;&#x3D; new GetQueueAttributesRequest(standardQueueUrl) &#x2F;&#x2F;https:&#x2F;&#x2F;sqs.ap-northeast-2.amazonaws.com&#x2F;491870877159&#x2F;minseok.fifo</span><br><span class=\"line\">            &#x3D; new GetQueueAttributesRequest(&quot;https:&#x2F;&#x2F;sqs.ap-northeast-2.amazonaws.com&#x2F;491870877159&#x2F;minseok.fifo&quot;)</span><br><span class=\"line\">            .withAttributeNames(&quot;All&quot;);</span><br><span class=\"line\">    GetQueueAttributesResult getQueueAttributesResult</span><br><span class=\"line\">            &#x3D; sqs.getQueueAttributes(getQueueAttributesRequest);</span><br><span class=\"line\">    System.out.println(String.format(&quot;The number of messages on the queue: %s&quot;,</span><br><span class=\"line\">            getQueueAttributesResult.getAttributes()</span><br><span class=\"line\">                    .get(&quot;ApproximateNumberOfMessages&quot;)));</span><br><span class=\"line\">    System.out.println(String.format(&quot;The number of messages in flight: %s&quot;,</span><br><span class=\"line\">            getQueueAttributesResult.getAttributes()</span><br><span class=\"line\">                    .get(&quot;ApproximateNumberOfMessagesNotVisible&quot;)));</span><br></pre></td></tr></table></figure></div>\n\n\n<h3 id=\"전체-Full-소스\"><a href=\"#전체-Full-소스\" class=\"headerlink\" title=\"[전체 Full 소스]\"></a>[전체 Full 소스]</h3><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><figcaption><span>source</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package helloworld;</span><br><span class=\"line\"> </span><br><span class=\"line\">import java.io.BufferedReader;</span><br><span class=\"line\">import java.io.InputStreamReader;</span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\">import java.net.URL;</span><br><span class=\"line\">import java.util.ArrayList;</span><br><span class=\"line\">import java.util.HashMap;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\">import java.util.stream.Collectors;</span><br><span class=\"line\"> </span><br><span class=\"line\">import com.amazonaws.auth.AWSStaticCredentialsProvider;</span><br><span class=\"line\">import com.amazonaws.auth.BasicAWSCredentials;</span><br><span class=\"line\">import com.amazonaws.regions.Regions;</span><br><span class=\"line\">import com.amazonaws.services.lambda.runtime.Context;</span><br><span class=\"line\">import com.amazonaws.services.lambda.runtime.RequestHandler;</span><br><span class=\"line\">import com.amazonaws.services.sqs.AmazonSQS;</span><br><span class=\"line\">import com.amazonaws.services.sqs.AmazonSQSClientBuilder;</span><br><span class=\"line\">import com.amazonaws.services.sqs.model.*;</span><br><span class=\"line\">import com.amazonaws.services.sqs.model.ListQueuesResult;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * Handler for requests to Lambda function.</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public class App implements RequestHandler&lt;Object, Object&gt; &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    public Object handleRequest(final Object input, final Context context) &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">        BasicAWSCredentials credentials &#x3D; new BasicAWSCredentials(&quot;ACCESS_KEY&quot;, &quot;SECRET_KEY&quot;);</span><br><span class=\"line\">        AmazonSQS sqs &#x3D; AmazonSQSClientBuilder.standard()</span><br><span class=\"line\">                .withCredentials(new AWSStaticCredentialsProvider(credentials))</span><br><span class=\"line\">                .withRegion(Regions.AP_NORTHEAST_2)</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">        &#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;Create, Delete 는 있거나 삭제할게 없으면 바로 에러 떨어짐..</span><br><span class=\"line\">&#x2F;&#x2F;        &#x2F;&#x2F;1-1. FIFO Create Queue</span><br><span class=\"line\">&#x2F;&#x2F;        Map&lt;String, String&gt; queueAttributes &#x3D; new HashMap&lt;&gt;();</span><br><span class=\"line\">&#x2F;&#x2F;        queueAttributes.put(&quot;FifoQueue&quot;, &quot;true&quot;);</span><br><span class=\"line\">&#x2F;&#x2F;        queueAttributes.put(&quot;ContentBasedDeduplication&quot;, &quot;true&quot;);</span><br><span class=\"line\">&#x2F;&#x2F;        queueAttributes.put(&quot;VisibilityTimeout&quot;, &quot;1&quot;);</span><br><span class=\"line\">&#x2F;&#x2F;        CreateQueueRequest createFifoQueueRequest &#x3D; new CreateQueueRequest(</span><br><span class=\"line\">&#x2F;&#x2F;                &quot;minseok1.fifo&quot;).withAttributes(queueAttributes);</span><br><span class=\"line\">&#x2F;&#x2F;        String fifoQueueUrl &#x3D; sqs.createQueue(createFifoQueueRequest)</span><br><span class=\"line\">&#x2F;&#x2F;                .getQueueUrl();</span><br><span class=\"line\"> </span><br><span class=\"line\">&#x2F;&#x2F;        &#x2F;&#x2F;1-2. FIFO Queue List(All)</span><br><span class=\"line\">&#x2F;&#x2F;        ListQueuesResult lq_result &#x3D; sqs.listQueues();</span><br><span class=\"line\">&#x2F;&#x2F;        System.out.println(&quot;Your SQS Queue URLs:&quot;);</span><br><span class=\"line\">&#x2F;&#x2F;        for (String url : lq_result.getQueueUrls()) &#123;</span><br><span class=\"line\">&#x2F;&#x2F;            System.out.println(url);</span><br><span class=\"line\">&#x2F;&#x2F;        &#125;</span><br><span class=\"line\">&#x2F;&#x2F;        &#x2F;&#x2F;1-3. FIFO Queue Search(KEY_WORD)</span><br><span class=\"line\">&#x2F;&#x2F;        String name_prefix &#x3D; &quot;KEY_WORD_ENTER&quot;;</span><br><span class=\"line\">&#x2F;&#x2F;        lq_result &#x3D; sqs.listQueues(new ListQueuesRequest(name_prefix));</span><br><span class=\"line\">&#x2F;&#x2F;        System.out.println(&quot;Queue URLs with prefix: &quot; + name_prefix);</span><br><span class=\"line\">&#x2F;&#x2F;        for (String url : lq_result.getQueueUrls()) &#123;</span><br><span class=\"line\">&#x2F;&#x2F;            System.out.println(url);</span><br><span class=\"line\">&#x2F;&#x2F;        &#125;</span><br><span class=\"line\">&#x2F;&#x2F;        &#x2F;&#x2F;1-4. FIFO Queue Delete(URL)</span><br><span class=\"line\">&#x2F;&#x2F;        sqs.deleteQueue(fifoQueueUrl);</span><br><span class=\"line\"> </span><br><span class=\"line\">&#x2F;&#x2F;        &#x2F;&#x2F;1-5. FIFO Posting a Message to a FIFO Queue</span><br><span class=\"line\">&#x2F;&#x2F;        SendMessageRequest send_msg_request &#x3D; new SendMessageRequest()</span><br><span class=\"line\">&#x2F;&#x2F;                .withQueueUrl(fifoQueueUrl)</span><br><span class=\"line\">&#x2F;&#x2F;                .withMessageBody(&quot;hello world&quot;)</span><br><span class=\"line\">&#x2F;&#x2F;                .withMessageGroupId(&quot;minseok-group-1&quot;)</span><br><span class=\"line\">&#x2F;&#x2F;                .withDelaySeconds(0);</span><br><span class=\"line\">&#x2F;&#x2F;        sqs.sendMessage(send_msg_request);</span><br><span class=\"line\"> </span><br><span class=\"line\">&#x2F;&#x2F;        &#x2F;&#x2F;1-6. FIFO Posting Multiple Messages to a Queue</span><br><span class=\"line\">&#x2F;&#x2F;        List&lt;SendMessageBatchRequestEntry&gt; messageEntries &#x3D; new ArrayList&lt;&gt;();</span><br><span class=\"line\">&#x2F;&#x2F;        messageEntries.add(new SendMessageBatchRequestEntry()</span><br><span class=\"line\">&#x2F;&#x2F;                .withId(&quot;id-1&quot;)</span><br><span class=\"line\">&#x2F;&#x2F;                .withMessageBody(&quot;batch-1&quot;)</span><br><span class=\"line\">&#x2F;&#x2F;                .withMessageGroupId(&quot;minseok-group-1&quot;));</span><br><span class=\"line\">&#x2F;&#x2F;        messageEntries.add(new SendMessageBatchRequestEntry()</span><br><span class=\"line\">&#x2F;&#x2F;                .withId(&quot;id-2&quot;)</span><br><span class=\"line\">&#x2F;&#x2F;                .withMessageBody(&quot;batch-2&quot;)</span><br><span class=\"line\">&#x2F;&#x2F;                .withMessageGroupId(&quot;minseok-group-1&quot;));</span><br><span class=\"line\">&#x2F;&#x2F;</span><br><span class=\"line\">&#x2F;&#x2F;        SendMessageBatchRequest sendMessageBatchRequest</span><br><span class=\"line\">&#x2F;&#x2F;                &#x3D; new SendMessageBatchRequest(fifoQueueUrl, messageEntries);</span><br><span class=\"line\">&#x2F;&#x2F;        sqs.sendMessageBatch(sendMessageBatchRequest);</span><br><span class=\"line\"> </span><br><span class=\"line\">&#x2F;&#x2F;        &#x2F;&#x2F;1-7. FIFO Reading Messages from Queues</span><br><span class=\"line\">&#x2F;&#x2F;        ReceiveMessageRequest receiveMessageRequest &#x3D; new ReceiveMessageRequest(fifoQueueUrl)</span><br><span class=\"line\">&#x2F;&#x2F;                .withWaitTimeSeconds(10)</span><br><span class=\"line\">&#x2F;&#x2F;                .withMaxNumberOfMessages(10);</span><br><span class=\"line\">&#x2F;&#x2F;</span><br><span class=\"line\">&#x2F;&#x2F;        List&lt;Message&gt; sqsMessages &#x3D; sqs.receiveMessage(receiveMessageRequest).getMessages();</span><br><span class=\"line\">&#x2F;&#x2F;</span><br><span class=\"line\">&#x2F;&#x2F;        &#x2F;&#x2F;1-8. FIFO Deleting a Message from a Queue</span><br><span class=\"line\">&#x2F;&#x2F;        for (Message m : sqsMessages) &#123;</span><br><span class=\"line\">&#x2F;&#x2F;            sqs.deleteMessage(fifoQueueUrl, m.getReceiptHandle());</span><br><span class=\"line\">&#x2F;&#x2F;        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">&#x2F;&#x2F;        &#x2F;&#x2F;1-9. FIFO Dead Letter Queues1(배달못한 편지 대기열을 생성하고,</span><br><span class=\"line\">&#x2F;&#x2F;        &#x2F;*String deadLetterQueueUrl &#x3D; sqs.createQueue(&quot;aws-sqs:&#x2F;&#x2F;notification_queue?amazonSQSClient&#x3D;#sqsClient&quot;).getQueueUrl();*&#x2F;</span><br><span class=\"line\">&#x2F;&#x2F;        try &#123;</span><br><span class=\"line\">&#x2F;&#x2F;            &#x2F;&#x2F; Create dead-letter queue</span><br><span class=\"line\">&#x2F;&#x2F;            Map&lt;String, String&gt; queueAttributes &#x3D; new HashMap&lt;&gt;();</span><br><span class=\"line\">&#x2F;&#x2F;            queueAttributes.put(&quot;FifoQueue&quot;, &quot;true&quot;);</span><br><span class=\"line\">&#x2F;&#x2F;            queueAttributes.put(&quot;ContentBasedDeduplication&quot;, &quot;true&quot;);</span><br><span class=\"line\">&#x2F;&#x2F;            queueAttributes.put(&quot;VisibilityTimeout&quot;, &quot;1&quot;);</span><br><span class=\"line\">&#x2F;&#x2F;            CreateQueueRequest createFifoQueueRequest &#x3D; new CreateQueueRequest(</span><br><span class=\"line\">&#x2F;&#x2F;                    &quot;deadletterminseok.fifo&quot;).withAttributes(queueAttributes);</span><br><span class=\"line\">&#x2F;&#x2F;            String fifoQueueUrls &#x3D; sqs.createQueue(createFifoQueueRequest)</span><br><span class=\"line\">&#x2F;&#x2F;                    .getQueueUrl();</span><br><span class=\"line\">&#x2F;&#x2F;        &#125; catch (AmazonSQSException e) &#123;</span><br><span class=\"line\">&#x2F;&#x2F;            if (!e.getErrorCode().equals(&quot;QueueAlreadyExists&quot;)) &#123;</span><br><span class=\"line\">&#x2F;&#x2F;                throw e;</span><br><span class=\"line\">&#x2F;&#x2F;            &#125;</span><br><span class=\"line\">&#x2F;&#x2F;        &#125;</span><br><span class=\"line\">&#x2F;&#x2F;        &#x2F;&#x2F;minseok.fifo 로 통신하다가 부하가 걸리면 deadletterminseok.fifo로 보내도록 설정하는 아래 코드</span><br><span class=\"line\">&#x2F;&#x2F;        String dl_queue_url &#x3D; sqs.getQueueUrl(&quot;deadletterminseok.fifo&quot;)</span><br><span class=\"line\">&#x2F;&#x2F;                .getQueueUrl();</span><br><span class=\"line\">&#x2F;&#x2F;        GetQueueAttributesResult queue_attrs &#x3D; sqs.getQueueAttributes(</span><br><span class=\"line\">&#x2F;&#x2F;                new GetQueueAttributesRequest(dl_queue_url)</span><br><span class=\"line\">&#x2F;&#x2F;                        .withAttributeNames(&quot;QueueArn&quot;));</span><br><span class=\"line\">&#x2F;&#x2F;        String dl_queue_arn &#x3D; queue_attrs.getAttributes().get(&quot;QueueArn&quot;);</span><br><span class=\"line\">&#x2F;&#x2F;        &#x2F;&#x2F; Set dead letter queue with redrive policy on source queue.</span><br><span class=\"line\">&#x2F;&#x2F;        String src_queue_url &#x3D; sqs.getQueueUrl(&quot;minseok.fifo&quot;)</span><br><span class=\"line\">&#x2F;&#x2F;                .getQueueUrl();</span><br><span class=\"line\">&#x2F;&#x2F;        SetQueueAttributesRequest request &#x3D; new SetQueueAttributesRequest()</span><br><span class=\"line\">&#x2F;&#x2F;                .withQueueUrl(src_queue_url)</span><br><span class=\"line\">&#x2F;&#x2F;                .addAttributesEntry(&quot;RedrivePolicy&quot;,</span><br><span class=\"line\">&#x2F;&#x2F;                        &quot;&#123;\\&quot;maxReceiveCount\\&quot;:\\&quot;5\\&quot;, \\&quot;deadLetterTargetArn\\&quot;:\\&quot;&quot;</span><br><span class=\"line\">&#x2F;&#x2F;                                + dl_queue_arn + &quot;\\&quot;&#125;&quot;);</span><br><span class=\"line\">&#x2F;&#x2F;        sqs.setQueueAttributes(request);</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">&#x2F;&#x2F;        &#x2F;&#x2F;1-10. FIFO Dead Letter Queues</span><br><span class=\"line\">&#x2F;&#x2F;        GetQueueAttributesResult deadLetterQueueAttributes &#x3D; sqs.getQueueAttributes(</span><br><span class=\"line\">&#x2F;&#x2F;                new GetQueueAttributesRequest(dl_queue_url)</span><br><span class=\"line\">&#x2F;&#x2F;                        .withAttributeNames(&quot;QueueArn&quot;));</span><br><span class=\"line\">&#x2F;&#x2F;</span><br><span class=\"line\">&#x2F;&#x2F;        String deadLetterQueueARN &#x3D; deadLetterQueueAttributes.getAttributes()</span><br><span class=\"line\">&#x2F;&#x2F;                .get(&quot;QueueArn&quot;);</span><br><span class=\"line\">&#x2F;&#x2F;        SetQueueAttributesRequest queueAttributesRequest &#x3D; new SetQueueAttributesRequest()</span><br><span class=\"line\">&#x2F;&#x2F;                &#x2F;&#x2F;.withQueueUrl(standardQueueUrl)</span><br><span class=\"line\">&#x2F;&#x2F;                .withQueueUrl(&quot;https:&#x2F;&#x2F;sqs.ap-northeast-2.amazonaws.com&#x2F;491870877159&#x2F;minseok.fifo&quot;)</span><br><span class=\"line\">&#x2F;&#x2F;                .addAttributesEntry(&quot;RedrivePolicy&quot;,</span><br><span class=\"line\">&#x2F;&#x2F;                        &quot;&#123;\\&quot;maxReceiveCount\\&quot;:\\&quot;2\\&quot;, &quot;</span><br><span class=\"line\">&#x2F;&#x2F;                                + &quot;\\&quot;deadLetterTargetArn\\&quot;:\\&quot;&quot; + deadLetterQueueARN + &quot;\\&quot;&#125;&quot;);</span><br><span class=\"line\">&#x2F;&#x2F;</span><br><span class=\"line\">&#x2F;&#x2F;        sqs.setQueueAttributes(queueAttributesRequest);</span><br><span class=\"line\"> </span><br><span class=\"line\">&#x2F;&#x2F;        &#x2F;&#x2F;1-11. FIFO Monitoring</span><br><span class=\"line\">&#x2F;&#x2F;        GetQueueAttributesRequest getQueueAttributesRequest</span><br><span class=\"line\">&#x2F;&#x2F;                &#x2F;&#x2F;&#x3D; new GetQueueAttributesRequest(standardQueueUrl) &#x2F;&#x2F;https:&#x2F;&#x2F;sqs.ap-northeast-2.amazonaws.com&#x2F;491870877159&#x2F;minseok.fifo</span><br><span class=\"line\">&#x2F;&#x2F;                &#x3D; new GetQueueAttributesRequest(&quot;https:&#x2F;&#x2F;sqs.ap-northeast-2.amazonaws.com&#x2F;491870877159&#x2F;minseok.fifo&quot;)</span><br><span class=\"line\">&#x2F;&#x2F;                .withAttributeNames(&quot;All&quot;);</span><br><span class=\"line\">&#x2F;&#x2F;        GetQueueAttributesResult getQueueAttributesResult</span><br><span class=\"line\">&#x2F;&#x2F;                &#x3D; sqs.getQueueAttributes(getQueueAttributesRequest);</span><br><span class=\"line\">&#x2F;&#x2F;        System.out.println(String.format(&quot;The number of messages on the queue: %s&quot;,</span><br><span class=\"line\">&#x2F;&#x2F;                getQueueAttributesResult.getAttributes()</span><br><span class=\"line\">&#x2F;&#x2F;                        .get(&quot;ApproximateNumberOfMessages&quot;)));</span><br><span class=\"line\">&#x2F;&#x2F;        System.out.println(String.format(&quot;The number of messages in flight: %s&quot;,</span><br><span class=\"line\">&#x2F;&#x2F;                getQueueAttributesResult.getAttributes()</span><br><span class=\"line\">&#x2F;&#x2F;                        .get(&quot;ApproximateNumberOfMessagesNotVisible&quot;)));</span><br><span class=\"line\">&#x2F;&#x2F;</span><br><span class=\"line\">&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;</span><br><span class=\"line\">&#x2F;&#x2F;</span><br><span class=\"line\">&#x2F;&#x2F;        &#x2F;&#x2F;2-1. Standard Create Queue</span><br><span class=\"line\">&#x2F;&#x2F;        CreateQueueRequest create_request &#x3D; new CreateQueueRequest(&quot;minseoktestQueue&quot;)</span><br><span class=\"line\">&#x2F;&#x2F;                .addAttributesEntry(&quot;DelaySeconds&quot;, &quot;0&quot;) &#x2F;&#x2F;An integer from 0 to 900 seconds (15 minutes). Default: 0.</span><br><span class=\"line\">&#x2F;&#x2F;                .addAttributesEntry(&quot;VisibilityTimeout&quot;, &quot;30&quot;) &#x2F;&#x2F; An integer from 0 to 43,200 (12 hours). Default: 30.</span><br><span class=\"line\">&#x2F;&#x2F;                .addAttributesEntry(&quot;MessageRetentionPeriod&quot;, &quot;345600&quot;) &#x2F;&#x2F; An integer from 60 seconds (1 minute) to 1,209,600 seconds (14 days). Default: 345,600 (4 days).</span><br><span class=\"line\">&#x2F;&#x2F;                .addAttributesEntry(&quot;MaximumMessageSize&quot;, &quot;262144&quot;); &#x2F;&#x2F;An integer from 1,024 bytes (1 KiB) to 262,144 bytes (256 KiB). Default: 262,144 (256 KiB).</span><br><span class=\"line\">&#x2F;&#x2F;        String standardQueueUrl &#x3D; sqs.createQueue(create_request).getQueueUrl();</span><br><span class=\"line\"> </span><br><span class=\"line\">&#x2F;&#x2F;        &#x2F;&#x2F;1-2. Standard Queue List(All)</span><br><span class=\"line\">&#x2F;&#x2F;        ListQueuesResult lq_result &#x3D; sqs.listQueues();</span><br><span class=\"line\">&#x2F;&#x2F;        System.out.println(&quot;Your SQS Queue URLs:&quot;);</span><br><span class=\"line\">&#x2F;&#x2F;        for (String url : lq_result.getQueueUrls()) &#123;</span><br><span class=\"line\">&#x2F;&#x2F;            System.out.println(url);</span><br><span class=\"line\">&#x2F;&#x2F;        &#125;</span><br><span class=\"line\">&#x2F;&#x2F;        &#x2F;&#x2F;1-3. Standard Queue Search(KEY_WORD)</span><br><span class=\"line\">&#x2F;&#x2F;        String name_prefix &#x3D; &quot;KEY_WORD_ENTER&quot;;</span><br><span class=\"line\">&#x2F;&#x2F;        lq_result &#x3D; sqs.listQueues(new ListQueuesRequest(name_prefix));</span><br><span class=\"line\">&#x2F;&#x2F;        System.out.println(&quot;Queue URLs with prefix: &quot; + name_prefix);</span><br><span class=\"line\">&#x2F;&#x2F;        for (String url : lq_result.getQueueUrls()) &#123;</span><br><span class=\"line\">&#x2F;&#x2F;            System.out.println(url);</span><br><span class=\"line\">&#x2F;&#x2F;        &#125;</span><br><span class=\"line\">&#x2F;&#x2F;        &#x2F;&#x2F;1-4. Standard Queue Delete(URL)</span><br><span class=\"line\">&#x2F;&#x2F;        sqs.deleteQueue(fifoQueueUrl);</span><br><span class=\"line\"> </span><br><span class=\"line\">&#x2F;&#x2F;        &#x2F;&#x2F;1-5. Standard Posting a Message to a Queue</span><br><span class=\"line\">&#x2F;&#x2F;        SendMessageRequest send_msg_request &#x3D; new SendMessageRequest()</span><br><span class=\"line\">&#x2F;&#x2F;                .withQueueUrl(fifoQueueUrl)</span><br><span class=\"line\">&#x2F;&#x2F;                .withMessageBody(&quot;hello world&quot;)</span><br><span class=\"line\">&#x2F;&#x2F;                .withDelaySeconds(0);</span><br><span class=\"line\">&#x2F;&#x2F;        sqs.sendMessage(send_msg_request);</span><br><span class=\"line\"> </span><br><span class=\"line\">&#x2F;&#x2F;        &#x2F;&#x2F;1-6. Standard Posting Multiple Messages to a Queue</span><br><span class=\"line\">&#x2F;&#x2F;        List&lt;SendMessageBatchRequestEntry&gt; messageEntries &#x3D; new ArrayList&lt;&gt;();</span><br><span class=\"line\">&#x2F;&#x2F;        messageEntries.add(new SendMessageBatchRequestEntry()</span><br><span class=\"line\">&#x2F;&#x2F;                .withId(&quot;id-1&quot;)</span><br><span class=\"line\">&#x2F;&#x2F;                .withMessageBody(&quot;batch-1&quot;));</span><br><span class=\"line\">&#x2F;&#x2F;        messageEntries.add(new SendMessageBatchRequestEntry()</span><br><span class=\"line\">&#x2F;&#x2F;                .withId(&quot;id-2&quot;)</span><br><span class=\"line\">&#x2F;&#x2F;                .withMessageBody(&quot;batch-2&quot;));</span><br><span class=\"line\">&#x2F;&#x2F;</span><br><span class=\"line\">&#x2F;&#x2F;        SendMessageBatchRequest sendMessageBatchRequest</span><br><span class=\"line\">&#x2F;&#x2F;                &#x3D; new SendMessageBatchRequest(fifoQueueUrl, messageEntries);</span><br><span class=\"line\">&#x2F;&#x2F;        sqs.sendMessageBatch(sendMessageBatchRequest);</span><br><span class=\"line\"> </span><br><span class=\"line\">&#x2F;&#x2F;        &#x2F;&#x2F;1-7. Standard Reading Messages from Queues</span><br><span class=\"line\">&#x2F;&#x2F;        ReceiveMessageRequest receiveMessageRequest &#x3D; new ReceiveMessageRequest(fifoQueueUrl)</span><br><span class=\"line\">&#x2F;&#x2F;                .withWaitTimeSeconds(10)</span><br><span class=\"line\">&#x2F;&#x2F;                .withMaxNumberOfMessages(10);</span><br><span class=\"line\">&#x2F;&#x2F;</span><br><span class=\"line\">&#x2F;&#x2F;        List&lt;Message&gt; sqsMessages &#x3D; sqs.receiveMessage(receiveMessageRequest).getMessages();</span><br><span class=\"line\">&#x2F;&#x2F;</span><br><span class=\"line\">&#x2F;&#x2F;        &#x2F;&#x2F;1-8. FIFO Deleting a Message from a Queue</span><br><span class=\"line\">&#x2F;&#x2F;        for (Message m : sqsMessages) &#123;</span><br><span class=\"line\">&#x2F;&#x2F;            sqs.deleteMessage(fifoQueueUrl, m.getReceiptHandle());</span><br><span class=\"line\">&#x2F;&#x2F;        &#125;</span><br><span class=\"line\">&#x2F;&#x2F;</span><br><span class=\"line\">&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;</span><br><span class=\"line\"> </span><br><span class=\"line\">        Map&lt;String, String&gt; headers &#x3D; new HashMap&lt;&gt;();</span><br><span class=\"line\">        headers.put(&quot;Content-Type&quot;, &quot;application&#x2F;json&quot;);</span><br><span class=\"line\">        headers.put(&quot;X-Custom-Header&quot;, &quot;application&#x2F;json&quot;);</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            final String pageContents &#x3D; this.getPageContents(&quot;https:&#x2F;&#x2F;checkip.amazonaws.com&quot;);</span><br><span class=\"line\">            String output &#x3D; String.format(&quot;&#123; \\&quot;message\\&quot;: \\&quot;hello world\\&quot;, \\&quot;location\\&quot;: \\&quot;%s\\&quot; &#125;&quot;, pageContents);</span><br><span class=\"line\">            return new GatewayResponse(output, headers, 200);</span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            return new GatewayResponse(&quot;&#123;&#125;&quot;, headers, 500);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    private String getPageContents(String address) throws IOException&#123;</span><br><span class=\"line\">        URL url &#x3D; new URL(address);</span><br><span class=\"line\">        try(BufferedReader br &#x3D; new BufferedReader(new InputStreamReader(url.openStream()))) &#123;</span><br><span class=\"line\">            return br.lines().collect(Collectors.joining(System.lineSeparator()));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"3-결론\"><a href=\"#3-결론\" class=\"headerlink\" title=\"3) 결론\"></a>3) 결론</h3><ol>\n<li>한개의 큐 관리만 잘 해주면 열 Dynamo 안부럽다.</li>\n<li>람다에서 돌아가는 소스로 작성되었지만, 얼마든지 다른 서비스에 쓰일 수 있다.</li>\n<li>이유 : 아까 위에서 말한대로 AWS 최초의 서비스였기 때문(거의 화석급….)</li>\n</ol>\n","categories":[],"tags":[]}