{"title":"Node.js HTTP Flow","slug":"Node-js-HTTP-Flow","date":"2020-10-05T07:01:42.000Z","updated":"2020-10-05T07:10:14.418Z","comments":true,"path":"api/articles/Node-js-HTTP-Flow.json","photos":[],"link":"","excerpt":"","covers":["https://user-images.githubusercontent.com/62123161/95049128-22dc1d80-0724-11eb-96fa-47644f63fcbe.png"],"content":"<h2 id=\"API-시스템-구성도\"><a href=\"#API-시스템-구성도\" class=\"headerlink\" title=\"API 시스템 구성도\"></a>API 시스템 구성도</h2><p><a href=\"https://user-images.githubusercontent.com/62123161/95049128-22dc1d80-0724-11eb-96fa-47644f63fcbe.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/95049128-22dc1d80-0724-11eb-96fa-47644f63fcbe.png\" alt=\"image\"></a></p>\n<ul>\n<li>(IP/Port) or(DNS) 를 통해서 API서버로 요청이 들어온걸로 가정하면,<br> 1) 최초 app.js내에서 Express내 application.js handler 로 진입.(Default Configuration은 기본적으로 수행되니 생략)<br> 2) 핸들러에서 라우터를 확인하고 HTTP Method를 확인한 뒤, Layer Stack을 수정해서 적용하고 Layer로 데이터를 보냄.<br> 3) Layer는 여러 MiddleWare를 사용하며, (proto.process_params)에서 Req, Res 데이터들을 각각 분류하여 저장 및 생성.<br> 4) Layer내에서 모두 셋팅이 끝나면 Router로 해당 데이터를 보냄.<br> 5) 사용자가 요청한 데이터를 req에 받을 수 있고, Method를 통해 res데이터를 주는 것을 미리 Layer에서 셋팅된 res로 셋팅하여 내보낼 수 있음.</li>\n</ul>\n","categories":[{"name":"tip","slug":"tip","count":21,"path":"api/categories/tip.json"}],"tags":[{"name":"flow","slug":"flow","count":2,"path":"api/tags/flow.json"},{"name":"node","slug":"node","count":1,"path":"api/tags/node.json"},{"name":"http","slug":"http","count":1,"path":"api/tags/http.json"}]}