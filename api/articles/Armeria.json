{"title":"Armeria(공부중)","slug":"Armeria","date":"2021-02-18T07:04:21.000Z","updated":"2021-02-18T02:52:34.484Z","comments":true,"path":"api/articles/Armeria.json","photos":[],"link":"","excerpt":"","covers":null,"content":"<h2 id=\"서문\"><a href=\"#서문\" class=\"headerlink\" title=\"서문\"></a>서문</h2><ul>\n<li>요즘 대세인 아르메리아(Armeria)에 대해 간단히 알아보자.</li>\n<li>오픈소스 기반의 자바 HTTP/2 마이크로서비스 프레임워크</li>\n<li>Netty  개발자와 Line에서 사용중</li>\n<li>공식홈페이지(<a href=\"https://armeria.dev/\" target=\"_blank\" rel=\"noopener\">https://armeria.dev/</a>)</li>\n</ul>\n<h2 id=\"본문\"><a href=\"#본문\" class=\"headerlink\" title=\"본문\"></a>본문</h2><h3 id=\"1-Armeria\"><a href=\"#1-Armeria\" class=\"headerlink\" title=\"1. Armeria?\"></a>1. Armeria?</h3><ul>\n<li>Asynchronous RPC/REST library built on top of Java 8, Netty, HTTP/2, Thrift and gRPC</li>\n<li>고성능 비동기 마이크로서비스를 손쉽게 제작할 수 있음</li>\n<li>단일 어플리케이션에서 단일 포트로 HTTP, gRPC, Thrift를 동시에 지원<br>spring webflux는 서블릿엔진이 아니기 때문에 thrift의 Tservlet을 사용할 수 없음, 별도로 서버구현체를 만들어야해서 포트 소모</li>\n<li>gRPC, Thrift를 브라우저기반에서 테스트 가능</li>\n<li>cf. 사용처 : zipkin, slack, twitter, kakaoPay 등</li>\n</ul>\n<h3 id=\"2-설정방법\"><a href=\"#2-설정방법\" class=\"headerlink\" title=\"2. 설정방법\"></a>2. 설정방법</h3><h4 id=\"Gradle\"><a href=\"#Gradle\" class=\"headerlink\" title=\"Gradle\"></a>Gradle</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    ....</span><br><span class=\"line\">    compile <span class=\"string\">\"com.linecorp.armeria:armeria:0.68.2\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"라우팅-전-psvm\"><a href=\"#라우팅-전-psvm\" class=\"headerlink\" title=\"라우팅 전 psvm\"></a>라우팅 전 psvm</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">        ServerBuilder sb = new ServerBuilder();</span><br><span class=\"line\">        sb.http(8080);</span><br><span class=\"line\">  </span><br><span class=\"line\">        sb.service(<span class=\"string\">\"/hello\"</span>, (ctx, res) -&gt;</span><br><span class=\"line\">            HttpResponse.of(</span><br><span class=\"line\">                HttpStatus.OK,</span><br><span class=\"line\">                MediaType.HTML_UTF_8,</span><br><span class=\"line\">                <span class=\"string\">\"&lt;h1&gt;Hello Armeria...!&lt;/h1&gt;\"</span>));</span><br><span class=\"line\">  </span><br><span class=\"line\">        Server server = sb.build();</span><br><span class=\"line\">        CompletableFuture&lt;Void&gt; future = server.start();</span><br><span class=\"line\">        future.join();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"라우팅\"><a href=\"#라우팅\" class=\"headerlink\" title=\"라우팅\"></a>라우팅</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class CustomService &#123;</span><br><span class=\"line\">    @Get(<span class=\"string\">\"/\"</span>)</span><br><span class=\"line\">    public HttpResponse <span class=\"function\"><span class=\"title\">defaultMethod</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> HttpResponse.of(</span><br><span class=\"line\">            HttpStatus.OK,</span><br><span class=\"line\">            MediaType.HTML_UTF_8,</span><br><span class=\"line\">            <span class=\"string\">\"&lt;h1&gt;Hello world...!&lt;/h1&gt;\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    @Get(<span class=\"string\">\"/page/:text\"</span>) // nest.js, spring과 큰 차이없음.</span><br><span class=\"line\">    public HttpResponse methodB(@Param(<span class=\"string\">\"text\"</span>) String text) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> HttpResponse.of(</span><br><span class=\"line\">            HttpStatus.OK,</span><br><span class=\"line\">            MediaType.HTML_UTF_8,</span><br><span class=\"line\">            <span class=\"string\">\"&lt;h1&gt;Hello \"</span> + text + <span class=\"string\">\"...!&lt;/h1&gt;\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"라우팅-후-psvm\"><a href=\"#라우팅-후-psvm\" class=\"headerlink\" title=\"라우팅 후 psvm\"></a>라우팅 후 psvm</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">        ServerBuilder sb = new ServerBuilder();</span><br><span class=\"line\">        sb.http(8080);</span><br><span class=\"line\">  </span><br><span class=\"line\">        sb.annotatedService(new CustomService()); //여기서 호출!</span><br><span class=\"line\">  </span><br><span class=\"line\">        Server server = sb.build();</span><br><span class=\"line\">        CompletableFuture&lt;Void&gt; future = server.start();</span><br><span class=\"line\">        future.join();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></div>\n\n\n<h2 id=\"참고자료\"><a href=\"#참고자료\" class=\"headerlink\" title=\"참고자료\"></a>참고자료</h2><h3 id=\"gRPC-란\"><a href=\"#gRPC-란\" class=\"headerlink\" title=\"gRPC 란?\"></a>gRPC 란?</h3><ul>\n<li>RPC는 원격 프로시저 요청(Remote Procedure Call)의 약자로 gRPC는 Google에서 개발.</li>\n<li>통신 프로토콜 : HTTP/2</li>\n<li>표현언어 : 프로토콜 버퍼<br>xml 이나 json은 사람이 읽을 수 있게 직렬화 하지만, 프로토콜 버퍼는 이진바이너리로 직렬화 =&gt; 매우 빨라짐</li>\n<li>특징<br>로드밸런싱, 인증, 양방향 스트리밍 및 흐름 제어, 바인딩 차단 또는 차단 해제 및 취소 및 시간 초과 기능<br>클라이언트에서 서버의 API호출을 메소드처럼 직접 할 수 있음 (MSA에서 강점인 듯?)<br>gRPC 클라이언트는 서버의 메소드의 stub을 작성<br>gRPC 서버는 인터페이스 제공</li>\n</ul>\n<h3 id=\"Thrift-란\"><a href=\"#Thrift-란\" class=\"headerlink\" title=\"Thrift 란?\"></a>Thrift 란?</h3><ul>\n<li>다양한 언어를 지원하는 RPC 프레임워크, facebook 에서 개발</li>\n<li>데이타 타입 및 서비스 인터페이스를 간단한 정의 파일안에 제공하며, 컴파일러는 다른 언어간에 통신할 수 있는 RPC 클라이언트/서버의 코드를 생성</li>\n<li>특징<br>Sync, Async Server API 제공<br>서블릿 제공(org.apache.thrift.server.TServlet)<br>멀티쓰레드 지원 (org.apache.thrift.server.ThreadPoolServer : worker thread 지정)</li>\n</ul>\n","categories":[{"name":"aws","slug":"aws","count":19,"path":"api/categories/aws.json"}],"tags":[{"name":"AWS","slug":"AWS","count":20,"path":"api/tags/AWS.json"},{"name":"Cloud9","slug":"Cloud9","count":2,"path":"api/tags/Cloud9.json"},{"name":"Web","slug":"Web","count":2,"path":"api/tags/Web.json"},{"name":"Debugger","slug":"Debugger","count":2,"path":"api/tags/Debugger.json"},{"name":"python","slug":"python","count":4,"path":"api/tags/python.json"}]}