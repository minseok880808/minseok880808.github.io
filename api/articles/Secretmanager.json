{"title":"Secretmanager","slug":"Secretmanager","date":"2020-05-06T05:09:57.000Z","updated":"2020-05-11T03:36:12.943Z","comments":true,"path":"api/articles/Secretmanager.json","photos":[],"link":"","excerpt":"","covers":["https://user-images.githubusercontent.com/62123161/81140306-e1441c80-8fa3-11ea-83b9-f4eed46627c9.png","https://user-images.githubusercontent.com/62123161/81145165-b7ddbd80-8fb0-11ea-839a-4fb3f7e37f28.png","https://user-images.githubusercontent.com/62123161/81140303-e0ab8600-8fa3-11ea-8c3a-1609cca6120e.png","https://user-images.githubusercontent.com/62123161/81140301-e012ef80-8fa3-11ea-854b-295e78aff2a2.png","https://user-images.githubusercontent.com/62123161/81140297-dee1c280-8fa3-11ea-9e65-1830cb3b5dc2.png","https://user-images.githubusercontent.com/62123161/81140411-31bb7a00-8fa4-11ea-83b7-4c2e57b494cd.png"],"content":"<h2 id=\"개발환경-구축\"><a href=\"#개발환경-구축\" class=\"headerlink\" title=\"개발환경 구축\"></a>개발환경 구축</h2><p>※ 기본 개발환경</p>\n<ul>\n<li>IntelliJ</li>\n<li>Java, Spring</li>\n<li>AWS Console</li>\n</ul>\n<h2 id=\"SecretsManager-설명\"><a href=\"#SecretsManager-설명\" class=\"headerlink\" title=\"SecretsManager 설명\"></a>SecretsManager 설명</h2><ul>\n<li><p>이름에서 유추가 가능하지 않은가? 비밀스런 Key를 가지고 있는(관리하는) 서비스라고 보면 쉽다.</p>\n</li>\n<li><p>사실 비밀까지는 아니지만 환경변수를 받아서 사용하는 용도로 쓰고 있다. 자주 변하지 않는 변수로는 아래와 같은….<br>1) RDS 접속정보(주소, ID, PW)<br>2) SNS 그룹, 기능사양인 알림 메세지<br>3) Access Key, Secret Key<br>4) IoT Core 접속이나 Control을 위한 ARN들…<br>5) 외부 FTP 접속정보<br>6) 회원정보 관리를 위한 Cognito 접속정보<br><a href=\"https://user-images.githubusercontent.com/62123161/81140306-e1441c80-8fa3-11ea-83b9-f4eed46627c9.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/81140306-e1441c80-8fa3-11ea-83b9-f4eed46627c9.png\" alt=\"secretmanager_01\"></a></p>\n</li>\n<li><p>참고로, Secrets Manager에 값을 넣는 것은 CLI와 콘솔 두개뿐이다. (API 호출로 넣을 수 없다는 소리이다.)</p>\n</li>\n<li><p>코딩으로 할 수 있는건 조회만 가능하다. (더 이상의 설명은 생략한다.)</p>\n</li>\n</ul>\n<h3 id=\"1-Secret-생성\"><a href=\"#1-Secret-생성\" class=\"headerlink\" title=\"1) Secret 생성\"></a>1) Secret 생성</h3><h4 id=\"Secret-Type\"><a href=\"#Secret-Type\" class=\"headerlink\" title=\"Secret Type\"></a>Secret Type</h4><p><a href=\"https://user-images.githubusercontent.com/62123161/81145165-b7ddbd80-8fb0-11ea-839a-4fb3f7e37f28.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/81145165-b7ddbd80-8fb0-11ea-839a-4fb3f7e37f28.png\" alt=\"secretmanager_02\"></a></p>\n<ul>\n<li>너무 직관적으로 다 써져있기에 크게 설명할게 없다. 우선, 우리 Secrets Manager는 모두 “Other type of Secret”을 사용하고 있음(API 호출 용도)</li>\n<li>다른 type을 선택하면 해당 DB 인스턴스에 접근이 쉽게 가능하다.</li>\n<li>다른 type들은 직접 설정해서 테스트해보기 바란다. (근데 나는 한번하고 안해봤다..)</li>\n</ul>\n<h4 id=\"Key-Value\"><a href=\"#Key-Value\" class=\"headerlink\" title=\"Key / Value\"></a>Key / Value</h4><p><a href=\"https://user-images.githubusercontent.com/62123161/81140303-e0ab8600-8fa3-11ea-8c3a-1609cca6120e.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/81140303-e0ab8600-8fa3-11ea-8c3a-1609cca6120e.png\" alt=\"secretmanager_03\"></a></p>\n<ul>\n<li>Key &amp; Value를 Json형태로 작성해도 좋고, MessageBox에 작성하여도 좋다. (어째든 받아 쓸때는 Json이다.)</li>\n<li>Encryption Key는 가급적 기본으로…(암호화를 원한다면 직접 해주어도 좋다. 다만, 호출해서 꺼내쓸때 복호화를 해줘야 읽을 수 있다.)</li>\n</ul>\n<h4 id=\"Name-and-Description\"><a href=\"#Name-and-Description\" class=\"headerlink\" title=\"Name and Description\"></a>Name and Description</h4><p><a href=\"https://user-images.githubusercontent.com/62123161/81140301-e012ef80-8fa3-11ea-854b-295e78aff2a2.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/81140301-e012ef80-8fa3-11ea-854b-295e78aff2a2.png\" alt=\"secretmanager_04\"></a></p>\n<ul>\n<li>설명은 따로 하지않겠다. 이제 이쯤 되면 봐도 알지 않는가?</li>\n</ul>\n<h4 id=\"Configure-rotation\"><a href=\"#Configure-rotation\" class=\"headerlink\" title=\"Configure rotation\"></a>Configure rotation</h4><p><a href=\"https://user-images.githubusercontent.com/62123161/81140297-dee1c280-8fa3-11ea-9e65-1830cb3b5dc2.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/81140297-dee1c280-8fa3-11ea-9e65-1830cb3b5dc2.png\" alt=\"secretmanager_05\"></a></p>\n<ul>\n<li>회전주기라고 읽지말고… 번역기 돌리면 그렇게 나온다..</li>\n<li>말그대로 Key/Value에 대해 Rotation 돌리면서 특정 값을 변경해주는 것이다. </li>\n<li>Lambda를 만들어서 주기적으로 Value를 변경해주는 기능인데, 주기적으로 변경을 해줘야하는 값(암호 및 키)의 경우 이 기능을 사용하면 좋다.(참고로, 만들어두면 자동으로 돌아준다.)</li>\n</ul>\n<h4 id=\"Sample-Code\"><a href=\"#Sample-Code\" class=\"headerlink\" title=\"Sample Code\"></a>Sample Code</h4><p><a href=\"https://user-images.githubusercontent.com/62123161/81140411-31bb7a00-8fa4-11ea-83b7-4c2e57b494cd.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/81140411-31bb7a00-8fa4-11ea-83b7-4c2e57b494cd.png\" alt=\"secretmanager_06\"></a></p>\n<ul>\n<li>내가 소스를 설명하거나 찾아야 할 필요 없이, 설명도 해주고 알아서 만들어준다.</li>\n<li>물론, 조회만이니까 어마어마한 양의 소스가 들은 것은 아니다.</li>\n<li>총 6가지의 언어에 대해 지원한다.</li>\n</ul>\n<h3 id=\"2-소스\"><a href=\"#2-소스\" class=\"headerlink\" title=\"2) 소스\"></a>2) 소스</h3><h4 id=\"Gradle\"><a href=\"#Gradle\" class=\"headerlink\" title=\"Gradle\"></a>Gradle</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compileJava &#123;</span><br><span class=\"line\">    sourceCompatibility = 1.8</span><br><span class=\"line\">    targetCompatibility = 1.8</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">compileJava.options.encoding = <span class=\"string\">\"UTF-8\"</span></span><br><span class=\"line\">compileTestJava.options.encoding = <span class=\"string\">\"UTF-8\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    // https://mvnrepository.com/artifact/com.amazonaws/aws-java-sdk-secretsmanager</span><br><span class=\"line\">    compile group: <span class=\"string\">'com.amazonaws'</span>, name: <span class=\"string\">'aws-java-sdk-secretsmanager'</span>, version: <span class=\"string\">'1.11.683'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"샘플도-있는데-이게-필요한지-모르겠다-그래도-대충이나마-만들었으니-참고하기-바람\"><a href=\"#샘플도-있는데-이게-필요한지-모르겠다-그래도-대충이나마-만들었으니-참고하기-바람\" class=\"headerlink\" title=\"샘플도 있는데 이게 필요한지 모르겠다.(그래도 대충이나마 만들었으니 참고하기 바람.)\"></a>샘플도 있는데 이게 필요한지 모르겠다.(그래도 대충이나마 만들었으니 참고하기 바람.)</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void <span class=\"function\"><span class=\"title\">getSecret</span></span>() &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">        String secretName = <span class=\"string\">\"MyTestDatabaseMasterSecret\"</span>;</span><br><span class=\"line\">        String endpoint = <span class=\"string\">\"secretsmanager.ap-northeast-2.amazonaws.com\"</span>;</span><br><span class=\"line\">        String region = <span class=\"string\">\"ap-northeast-2\"</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">        AwsClientBuilder.EndpointConfiguration config = new AwsClientBuilder.EndpointConfiguration(endpoint, region);</span><br><span class=\"line\">        AWSSecretsManagerClientBuilder clientBuilder = AWSSecretsManagerClientBuilder.standard();</span><br><span class=\"line\">        clientBuilder.setEndpointConfiguration(config);</span><br><span class=\"line\">        AWSSecretsManager client = clientBuilder.build();</span><br><span class=\"line\"> </span><br><span class=\"line\">        String secret;</span><br><span class=\"line\">        ByteBuffer binarySecretData;</span><br><span class=\"line\">        GetSecretValueRequest getSecretValueRequest = new GetSecretValueRequest()</span><br><span class=\"line\">                .withSecretId(secretName).withVersionStage(<span class=\"string\">\"AWSCURRENT\"</span>);</span><br><span class=\"line\">        GetSecretValueResult getSecretValueResult = null;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            getSecretValueResult = client.getSecretValue(getSecretValueRequest);</span><br><span class=\"line\"> </span><br><span class=\"line\">        &#125; catch(ResourceNotFoundException e) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"The requested secret \"</span> + secretName + <span class=\"string\">\" was not found\"</span>);</span><br><span class=\"line\">        &#125; catch (InvalidRequestException e) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"The request was invalid due to: \"</span> + e.getMessage());</span><br><span class=\"line\">        &#125; catch (InvalidParameterException e) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"The request had invalid params: \"</span> + e.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        String json = getSecretValueResult.getSecretString();</span><br><span class=\"line\">        try&#123;</span><br><span class=\"line\">            JsonNode eventNode = OBJECT_MAPPER.readTree(json);</span><br><span class=\"line\">            String username = eventNode.path(<span class=\"string\">\"username\"</span>).asText();</span><br><span class=\"line\">            String password = eventNode.path(<span class=\"string\">\"password\"</span>).asText();</span><br><span class=\"line\">            String engine = eventNode.path(<span class=\"string\">\"engine\"</span>).asText();</span><br><span class=\"line\">            String host = eventNode.path(<span class=\"string\">\"host\"</span>).asText();</span><br><span class=\"line\">            String port = eventNode.path(<span class=\"string\">\"port\"</span>).asText();</span><br><span class=\"line\">            String dbname = eventNode.path(<span class=\"string\">\"dbname\"</span>).asText();</span><br><span class=\"line\">            String dbInstanceIdentifier = eventNode.path(<span class=\"string\">\"dbInstanceIdentifier\"</span>).asText();</span><br><span class=\"line\">            String name = eventNode.path(<span class=\"string\">\"name\"</span>).asText();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        catch(Exception e)&#123;</span><br><span class=\"line\">            System.out.println(e.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(getSecretValueResult == null) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        // Depending on whether the secret was a string or binary, one of these fields will be populated</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(getSecretValueResult.getSecretString() != null) &#123;</span><br><span class=\"line\">            secret = getSecretValueResult.getSecretString();</span><br><span class=\"line\">            System.out.println(secret);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            binarySecretData = getSecretValueResult.getSecretBinary();</span><br><span class=\"line\">            System.out.println(binarySecretData.toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"클래스화-한-소스\"><a href=\"#클래스화-한-소스\" class=\"headerlink\" title=\"클래스화 한 소스\"></a>클래스화 한 소스</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class SecretManagerHelper &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    private static SecretManagerHelper secretManagerHelper;</span><br><span class=\"line\">    private static AWSSecretsManager awsSecretsManager;</span><br><span class=\"line\"> </span><br><span class=\"line\">    public static void init() throws IOException &#123;</span><br><span class=\"line\">        secretManagerHelper = new SecretManagerHelper();</span><br><span class=\"line\"> </span><br><span class=\"line\">        awsSecretsManager  = AWSSecretsManagerClientBuilder.standard()</span><br><span class=\"line\">                .withRegion(Config.AWS_SECRET_REGION)</span><br><span class=\"line\">                .build();</span><br><span class=\"line\"> </span><br><span class=\"line\">        getSecretValue();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    public static SecretManagerHelper getInstance() throws IOException&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(null == secretManagerHelper)&#123;</span><br><span class=\"line\">            secretManagerHelper = new SecretManagerHelper();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(null == awsSecretsManager)&#123;</span><br><span class=\"line\">            init();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> secretManagerHelper;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    public static AWSSecretsManager getAWSSecretsManager() throws IOException&#123;</span><br><span class=\"line\">        getInstance();</span><br><span class=\"line\">        <span class=\"built_in\">return</span> awsSecretsManager;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    private static void getSecretValue() throws IOException &#123;</span><br><span class=\"line\">        try&#123;</span><br><span class=\"line\">            GetSecretValueRequest getCredentialRequest = new GetSecretValueRequest()</span><br><span class=\"line\">                    .withSecretId(Config.SECRET_IOT_CREDENTIALS);</span><br><span class=\"line\">            GetSecretValueResult getCredentialResult = awsSecretsManager.getSecretValue(getCredentialRequest);</span><br><span class=\"line\">            String credentialString = getCredentialResult.getSecretString();</span><br><span class=\"line\">            Config.IOT_CREDENTIALS_NODE = new ObjectMapper().readTree(credentialString);</span><br><span class=\"line\"> </span><br><span class=\"line\">            GetSecretValueRequest getRdsRequest = new GetSecretValueRequest()</span><br><span class=\"line\">                    .withSecretId(Config.SECRET_IOT_RDS);</span><br><span class=\"line\">            GetSecretValueResult getRdsResult = awsSecretsManager.getSecretValue(getRdsRequest);</span><br><span class=\"line\">            String rdsString = getRdsResult.getSecretString();</span><br><span class=\"line\">            Config.IOT_RDS_NODE = new ObjectMapper().readTree(rdsString);</span><br><span class=\"line\"> </span><br><span class=\"line\">            GetSecretValueRequest getSnsRequest = new GetSecretValueRequest()</span><br><span class=\"line\">                    .withSecretId(Config.SECRET_IOT_SNS);</span><br><span class=\"line\">            GetSecretValueResult getSnsResult = awsSecretsManager.getSecretValue(getSnsRequest);</span><br><span class=\"line\">            String snsString = getSnsResult.getSecretString();</span><br><span class=\"line\">            Config.IOT_SNS_NODE = new ObjectMapper().readTree(snsString);</span><br><span class=\"line\"> </span><br><span class=\"line\">            GetSecretValueRequest getCoreRequest = new GetSecretValueRequest()</span><br><span class=\"line\">                    .withSecretId(Config.SECRET_IOT_CORE);</span><br><span class=\"line\">            GetSecretValueResult getCoreResult = awsSecretsManager.getSecretValue(getCoreRequest);</span><br><span class=\"line\">            String coreString = getCoreResult.getSecretString();</span><br><span class=\"line\">            Config.IOT_CORE_NODE = new ObjectMapper().readTree(coreString);</span><br><span class=\"line\"> </span><br><span class=\"line\">            GetSecretValueRequest getKWeatherRequest = new GetSecretValueRequest()</span><br><span class=\"line\">                    .withSecretId(Config.SECRET_IOT_KWEATHER);</span><br><span class=\"line\">            GetSecretValueResult getKWeatherResult = awsSecretsManager.getSecretValue(getKWeatherRequest);</span><br><span class=\"line\">            String kWeatherString = getKWeatherResult.getSecretString();</span><br><span class=\"line\">            Config.IOT_KWEATHER_NODE = new ObjectMapper().readTree(kWeatherString);</span><br><span class=\"line\"> </span><br><span class=\"line\">//            String username = eventNode.path(<span class=\"string\">\"username\"</span>).asText();</span><br><span class=\"line\">//            String password = eventNode.path(<span class=\"string\">\"password\"</span>).asText();</span><br><span class=\"line\">//            String engine = eventNode.path(<span class=\"string\">\"engine\"</span>).asText();</span><br><span class=\"line\">//            String host = eventNode.path(<span class=\"string\">\"host\"</span>).asText();</span><br><span class=\"line\">//            String port = eventNode.path(<span class=\"string\">\"port\"</span>).asText();</span><br><span class=\"line\">//            String dbname = eventNode.path(<span class=\"string\">\"dbname\"</span>).asText();</span><br><span class=\"line\">//            String dbInstanceIdentifier = eventNode.path(<span class=\"string\">\"dbInstanceIdentifier\"</span>).asText();</span><br><span class=\"line\">//            String name = eventNode.path(<span class=\"string\">\"name\"</span>).asText();</span><br><span class=\"line\"> </span><br><span class=\"line\">        &#125; catch (Exception ex)&#123;</span><br><span class=\"line\">            throw ex;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">//        String secret = null, decodedBinarySecret;</span><br><span class=\"line\">//        GetSecretValueRequest getSecretValueRequest = new GetSecretValueRequest()</span><br><span class=\"line\">//                .withSecretId(Config.SECRET_IOT_CREDENTIALS);</span><br><span class=\"line\">//        GetSecretValueResult getSecretValueResult = null;</span><br><span class=\"line\">//</span><br><span class=\"line\">//        try &#123;</span><br><span class=\"line\">//            getSecretValueResult = awsSecretsManager.getSecretValue(getSecretValueRequest);</span><br><span class=\"line\">//        &#125; catch (DecryptionFailureException e) &#123;</span><br><span class=\"line\">//            // SecretsManager can not decrypt the protected secret text using the provided KMS key.</span><br><span class=\"line\">//            // Deal with the exception here, and/or rethrow at your discretion.</span><br><span class=\"line\">//            throw e;</span><br><span class=\"line\">//        &#125; catch (InternalServiceErrorException e) &#123;</span><br><span class=\"line\">//            // An error occurred on the server side.</span><br><span class=\"line\">//            // Deal with the exception here, and/or rethrow at your discretion.</span><br><span class=\"line\">//            throw e;</span><br><span class=\"line\">//        &#125; catch (InvalidParameterException e) &#123;</span><br><span class=\"line\">//            // You provided an invalid value <span class=\"keyword\">for</span> a parameter.</span><br><span class=\"line\">//            // Deal with the exception here, and/or rethrow at your discretion.</span><br><span class=\"line\">//            throw e;</span><br><span class=\"line\">//        &#125; catch (InvalidRequestException e) &#123;</span><br><span class=\"line\">//            // You provided a parameter value that is not valid <span class=\"keyword\">for</span> the current state of the resource.</span><br><span class=\"line\">//            // Deal with the exception here, and/or rethrow at your discretion.</span><br><span class=\"line\">//            throw e;</span><br><span class=\"line\">//        &#125; catch (ResourceNotFoundException e) &#123;</span><br><span class=\"line\">//            // We can not find the resource that you asked <span class=\"keyword\">for</span>.</span><br><span class=\"line\">//            // Deal with the exception here, and/or rethrow at your discretion.</span><br><span class=\"line\">//            throw e;</span><br><span class=\"line\">//        &#125;</span><br><span class=\"line\">//</span><br><span class=\"line\">//        // Decrypts secret using the associated KMS CMK.</span><br><span class=\"line\">//        // Depending on whether the secret is a string or binary, one of these fields will be populated.</span><br><span class=\"line\">//        <span class=\"keyword\">if</span> (getSecretValueResult.getSecretString() != null) &#123;</span><br><span class=\"line\">//            secret = getSecretValueResult.getSecretString();</span><br><span class=\"line\">//        &#125;</span><br><span class=\"line\">//        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">//            decodedBinarySecret = new String(Base64.getDecoder().decode(getSecretValueResult.getSecretBinary()).array());</span><br><span class=\"line\">//        &#125;</span><br><span class=\"line\">//        // Your code goes here.</span><br><span class=\"line\">//        try&#123;</span><br><span class=\"line\">//            JsonNode eventNode = new ObjectMapper().readTree(secret);</span><br><span class=\"line\">//        &#125;</span><br><span class=\"line\">//        catch(Exception e)&#123;</span><br><span class=\"line\">//            System.out.println(e.getMessage());</span><br><span class=\"line\">//        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"3-결론\"><a href=\"#3-결론\" class=\"headerlink\" title=\"3) 결론\"></a>3) 결론</h3><ul>\n<li>조회쪽만 코딩하면 된다.</li>\n<li>고정적으로 변하지 않는 값을 저장해두고 쓰기 좋다.(소스를 건드릴 필요가 없으므로…)</li>\n<li>DB Instance를 설정해서 값을 불러오기 좋고, Rotation 기능을 활용하여 암호주기를 설정하고 자동으로 바꿔주기 좋다.</li>\n<li>별 거 아닌 내용이지만, 거의 대부분에서 쓰일정도로 쓰임새가 좋다.</li>\n</ul>\n","categories":[{"name":"tip","slug":"tip","count":19,"path":"api/categories/tip.json"}],"tags":[{"name":"AWS","slug":"AWS","count":14,"path":"api/tags/AWS.json"},{"name":"secretsmanager","slug":"secretsmanager","count":2,"path":"api/tags/secretsmanager.json"},{"name":"Secret","slug":"Secret","count":2,"path":"api/tags/Secret.json"}]}