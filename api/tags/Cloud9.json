{"name":"Cloud9","slug":"Cloud9","count":2,"posts":[{"title":"Cloud9","slug":"Cloud9","date":"2020-05-07T06:12:11.000Z","updated":"2020-11-23T02:00:29.443Z","comments":true,"pin":null,"path":"api/articles/Cloud9.json","excerpt":"","keywords":null,"cover":"https://user-images.githubusercontent.com/62123161/81260722-8da20380-9075-11ea-9a81-3b4751bc2760.png","content":"<h2 id=\"개발환경-구축\"><a href=\"#개발환경-구축\" class=\"headerlink\" title=\"개발환경 구축\"></a>개발환경 구축</h2><p>※ 기본 개발환경</p>\n<ul>\n<li>IntelliJ</li>\n<li>Python</li>\n<li>AWS Console</li>\n</ul>\n<h2 id=\"설정\"><a href=\"#설정\" class=\"headerlink\" title=\"설정\"></a>설정</h2><h3 id=\"1-DashBoard\"><a href=\"#1-DashBoard\" class=\"headerlink\" title=\"1) DashBoard\"></a>1) DashBoard</h3><p><a href=\"https://user-images.githubusercontent.com/62123161/81260722-8da20380-9075-11ea-9a81-3b4751bc2760.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/81260722-8da20380-9075-11ea-9a81-3b4751bc2760.png\" alt=\"cloud9_01\"></a></p>\n<h3 id=\"2-Create-Environment-로-환경을-설정하자\"><a href=\"#2-Create-Environment-로-환경을-설정하자\" class=\"headerlink\" title=\"2) Create Environment 로 환경을 설정하자.\"></a>2) Create Environment 로 환경을 설정하자.</h3><p><a href=\"https://user-images.githubusercontent.com/62123161/81260721-8c70d680-9075-11ea-87dc-338df283100a.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/81260721-8c70d680-9075-11ea-87dc-338df283100a.png\" alt=\"cloud9_02\"></a><br><a href=\"https://user-images.githubusercontent.com/62123161/81260718-8aa71300-9075-11ea-9459-af1171bcec28.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/81260718-8aa71300-9075-11ea-9459-af1171bcec28.png\" alt=\"cloud9_03\"></a></p>\n<ul>\n<li>중요 : 인스턴스 용량이나 플랫폼환경은 마음대로 하면된다.<br>  But, Network Setting은 반드시 VPC를 통한 외부로 나갈 수 있도록 해주자.(날씨는 밖에서 데이터를 긁어와야 하기 때문에…)</li>\n<li>내부에서 private하게 돌릴거라면 Default VPC로 셋팅해도 아무 문제 없다.<br><a href=\"https://user-images.githubusercontent.com/62123161/81260708-87138c00-9075-11ea-8e58-201f496d3ad6.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/81260708-87138c00-9075-11ea-8e58-201f496d3ad6.png\" alt=\"cloud9_04\"></a></li>\n<li>자신없으면 기본셋팅으로 하자.</li>\n<li>셋팅 끝.</li>\n</ul>\n<h2 id=\"개발\"><a href=\"#개발\" class=\"headerlink\" title=\"개발\"></a>개발</h2><h3 id=\"1-로컬람다-생성\"><a href=\"#1-로컬람다-생성\" class=\"headerlink\" title=\"1) 로컬람다 생성\"></a>1) 로컬람다 생성</h3><p><a href=\"https://user-images.githubusercontent.com/62123161/81260705-84189b80-9075-11ea-8c13-869b2bce2ea4.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/81260705-84189b80-9075-11ea-8c13-869b2bce2ea4.png\" alt=\"cloud9_05\"></a></p>\n<ul>\n<li>로컬람다를 선택해서 개발을 진행해야 초기 환경이 자동으로 잘 잡힌다.</li>\n</ul>\n<h3 id=\"2-Import-할-라이브러리-추가\"><a href=\"#2-Import-할-라이브러리-추가\" class=\"headerlink\" title=\"2) Import 할 라이브러리 추가\"></a>2) Import 할 라이브러리 추가</h3><p><a href=\"https://user-images.githubusercontent.com/62123161/81260738-91358a80-9075-11ea-9a6b-d3340b584040.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/81260738-91358a80-9075-11ea-9a6b-d3340b584040.png\" alt=\"cloud9_06\"></a></p>\n<ul>\n<li><p>결과화면에서 보면 알겠지만 나는 우선 Boto3, pymysql, requests를 사용할 예정이다. </p>\n</li>\n<li><p>나머지 json이나 datetime등은 기본적으로 제공해주는 것으로 보인다.(내가 라이브러리 import하지 않았거든..)</p>\n<ul>\n<li>pymysql<ul>\n<li>python -m pip install –target=./ pymysql</li>\n</ul>\n</li>\n<li>requests<ul>\n<li>python -m pip install –target=./ requests</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>아, 참고로 위 1,2번 명령어는 소스내 바로 상위 폴더를 오른쪽버튼 클릭하여 “Open Terminal Here(Alt+L)” 을 누른뒤 입력한다. </p>\n</li>\n<li><p>알아서 깔아주니 그냥 입력하고 두어라.</p>\n</li>\n<li><p>다 되고나면 위 그림의 왼쪽 Explorer 창처럼 수많은 라이브러리가 등장하게 된다. (물론 소스까지 넣었고, 빌드해서 돌렸으니까 추가된것도 있고..)</p>\n</li>\n</ul>\n<h2 id=\"배포\"><a href=\"#배포\" class=\"headerlink\" title=\"배포\"></a>배포</h2><p><a href=\"https://user-images.githubusercontent.com/62123161/81260733-909cf400-9075-11ea-87cf-742f1549c702.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/81260733-909cf400-9075-11ea-87cf-742f1549c702.png\" alt=\"cloud9_07\"></a></p>\n<ul>\n<li>간단하게 돌려봤고, 올려도 되겠다 싶은 생각이 들때 위 사진처럼 Local Function을 Remote Function으로 배포해준다. (여담이지만, 이미 local Function으로 만들때 자동으로 Remote가 생성이 된다. 아무래도 Sync에 많은 신경을 쓴듯한 느낌이 듬.)</li>\n</ul>\n<h2 id=\"소스\"><a href=\"#소스\" class=\"headerlink\" title=\"소스\"></a>소스</h2><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><figcaption><span>Weather</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import boto3</span><br><span class=\"line\">import json</span><br><span class=\"line\">import pymysql</span><br><span class=\"line\">import requests</span><br><span class=\"line\">from datetime import datetime, timedelta</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># MySQL 접속정보</span></span><br><span class=\"line\">REGION = <span class=\"string\">'REGION'</span></span><br><span class=\"line\"></span><br><span class=\"line\">rds_host = <span class=\"string\">\"RDS_ENDPOINT\"</span></span><br><span class=\"line\">name = <span class=\"string\">\"ID\"</span></span><br><span class=\"line\">password = <span class=\"string\">\"PW\"</span></span><br><span class=\"line\">db_name = <span class=\"string\">\"DB_NAME\"</span></span><br><span class=\"line\">conn = pymysql.connect(rds_host, user=name, passwd=password, db=db_name, connect_timeout=5, charset=<span class=\"string\">'utf8'</span>,</span><br><span class=\"line\">                       cursorclass=pymysql.cursors.DictCursor)</span><br><span class=\"line\">                        </span><br><span class=\"line\"> </span><br><span class=\"line\">def lambda_handler(event, context):</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        <span class=\"comment\"># <span class=\"doctag\">TODO:</span>  1. MySQL에서 Region관련정보 받아오기</span></span><br><span class=\"line\">        result = [] <span class=\"comment\">#list</span></span><br><span class=\"line\">        dic = &#123;&#125;    <span class=\"comment\">#dictionary</span></span><br><span class=\"line\">        mysqlList = [] <span class=\"comment\">#list</span></span><br><span class=\"line\">        with conn.cursor(pymysql.cursors.DictCursor) as cur:</span><br><span class=\"line\">            cur.execute(<span class=\"string\">\"\"</span><span class=\"string\">\"select * from NEW_WEATHER_REGION_CD\"</span><span class=\"string\">\"\"</span>)</span><br><span class=\"line\">            conn.commit()</span><br><span class=\"line\">     </span><br><span class=\"line\">            <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> cur.fetchall():</span><br><span class=\"line\">                result.append(row)</span><br><span class=\"line\">     </span><br><span class=\"line\">            <span class=\"keyword\">for</span> jsons <span class=\"keyword\">in</span> result:</span><br><span class=\"line\">                loaded_json = json.loads(json.dumps(jsons, indent=4, sort_keys=True, default=str, ensure_ascii=False))</span><br><span class=\"line\">                <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> loaded_json:</span><br><span class=\"line\">                    dic[x]=loaded_json[x]</span><br><span class=\"line\">                grid_x = dic.get(<span class=\"string\">'GRID_X'</span>)</span><br><span class=\"line\">                grid_y = dic.get(<span class=\"string\">'GRID_Y'</span>)</span><br><span class=\"line\">     </span><br><span class=\"line\">                <span class=\"comment\"># <span class=\"doctag\">TODO:</span> 2. URL셋팅후 데이터 받기(초단기 예보)</span></span><br><span class=\"line\">                URL = <span class=\"string\">'http://apis.data.go.kr/1360000/VilageFcstInfoService/getUltraSrtFcst?serviceKey=SERVICE_KEY'</span></span><br><span class=\"line\">                params = &#123;</span><br><span class=\"line\">                    <span class=\"string\">'numOfRows'</span>: <span class=\"string\">'1000'</span>,</span><br><span class=\"line\">                    <span class=\"string\">'pageNo'</span>:<span class=\"string\">'1'</span>,</span><br><span class=\"line\">                    <span class=\"string\">'dataType'</span>:<span class=\"string\">'JSON'</span>,</span><br><span class=\"line\">                    <span class=\"string\">'base_date'</span>:datetime.today().strftime(<span class=\"string\">\"%Y%m%d\"</span>),</span><br><span class=\"line\">                    <span class=\"string\">'base_time'</span>:(datetime.today() + timedelta(hours=-1)).strftime(<span class=\"string\">\"%H00\"</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                res = requests.get(URL, params=params)</span><br><span class=\"line\">                URL = res.url</span><br><span class=\"line\">                <span class=\"comment\"># x, y 좌표 설정</span></span><br><span class=\"line\">                regionParam = &#123;</span><br><span class=\"line\">                    <span class=\"string\">'nx'</span>:grid_x, <span class=\"string\">'ny'</span>:grid_y</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                res = requests.get(URL, params=regionParam) <span class=\"comment\"># 실제 데이터 받기.</span></span><br><span class=\"line\">     </span><br><span class=\"line\">                <span class=\"comment\"># <span class=\"doctag\">TODO:</span> 3 데이터가 정상적으로 들어와있는지 확인하기(우선은 Header의 정보 중 ResultCode로 판단)</span></span><br><span class=\"line\">                resultCode = <span class=\"string\">\"\"</span></span><br><span class=\"line\">                resultMsg = <span class=\"string\">\"\"</span></span><br><span class=\"line\">                dict = json.loads(json.dumps(res.text, indent=4, sort_keys=True, default=str, ensure_ascii=False))</span><br><span class=\"line\">                dict = json.loads(dict)</span><br><span class=\"line\">                <span class=\"keyword\">for</span> resultJson <span class=\"keyword\">in</span> dict[<span class=\"string\">'response'</span>][<span class=\"string\">'header'</span>]:</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(resultJson == <span class=\"string\">\"resultCode\"</span>):</span><br><span class=\"line\">                        resultCode = dict[<span class=\"string\">'response'</span>][<span class=\"string\">'header'</span>][<span class=\"string\">'resultCode'</span>]</span><br><span class=\"line\">                    <span class=\"keyword\">elif</span>(resultJson == <span class=\"string\">\"resultMsg\"</span>):</span><br><span class=\"line\">                        resultMsg = dict[<span class=\"string\">'response'</span>][<span class=\"string\">'header'</span>][<span class=\"string\">'resultMsg'</span>]</span><br><span class=\"line\">     </span><br><span class=\"line\">                <span class=\"keyword\">if</span>(resultCode != <span class=\"string\">\"00\"</span>): <span class=\"comment\"># 00이 정상이고, 나머지가 에러다... 로그로 남기면 뭐가 좋지않을까 해서 남겨본다.</span></span><br><span class=\"line\">                    <span class=\"built_in\">print</span>(<span class=\"string\">\"ERROR_CD : \"</span> + resultCode + <span class=\"string\">\"   /   \"</span> + <span class=\"string\">\"ERROR_MSG : \"</span> + resultMsg)</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    dictionary = json.loads(json.dumps(res.text, sort_keys=True, default=str, ensure_ascii=False))</span><br><span class=\"line\">                    <span class=\"comment\"># 왜 dictionary가 2번이나 호출됫냐면... python특성인지 모르겠으나 형변환이 없으므로 강제 형변환을 위해 사용했음.</span></span><br><span class=\"line\">                    dictionary = json.loads(dictionary)</span><br><span class=\"line\">                    <span class=\"comment\"># 날씨item별 순차 읽기</span></span><br><span class=\"line\">                    weatherDic = &#123;&#125;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> weather <span class=\"keyword\">in</span> dictionary[<span class=\"string\">'response'</span>][<span class=\"string\">'body'</span>][<span class=\"string\">'items'</span>][<span class=\"string\">'item'</span>]:</span><br><span class=\"line\">                        <span class=\"comment\"># 넣고자 하는 시간 체크(현재시간이어야 한다)</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(weather[<span class=\"string\">'fcstTime'</span>] == (datetime.today().strftime(<span class=\"string\">\"%H00\"</span>))):</span><br><span class=\"line\">                            <span class=\"keyword\">if</span>(weather[<span class=\"string\">'category'</span>] == <span class=\"string\">\"LGT\"</span>): <span class=\"comment\"># 낙뢰</span></span><br><span class=\"line\">                                weatherDic[weather[<span class=\"string\">'category'</span>]]=weather[<span class=\"string\">\"fcstValue\"</span>]</span><br><span class=\"line\">     </span><br><span class=\"line\">                            <span class=\"keyword\">elif</span> (weather[<span class=\"string\">'category'</span>] == <span class=\"string\">\"PTY\"</span>): <span class=\"comment\"># 강수형태</span></span><br><span class=\"line\">                                weatherDic[weather[<span class=\"string\">'category'</span>]]=weather[<span class=\"string\">\"fcstValue\"</span>]</span><br><span class=\"line\">     </span><br><span class=\"line\">                            <span class=\"keyword\">elif</span> (weather[<span class=\"string\">'category'</span>] == <span class=\"string\">\"RN1\"</span>): <span class=\"comment\"># 1시간 강수량</span></span><br><span class=\"line\">                                weatherDic[weather[<span class=\"string\">'category'</span>]]=weather[<span class=\"string\">\"fcstValue\"</span>]</span><br><span class=\"line\">     </span><br><span class=\"line\">                            <span class=\"keyword\">elif</span> (weather[<span class=\"string\">'category'</span>] == <span class=\"string\">\"SKY\"</span>): <span class=\"comment\"># 하늘상태</span></span><br><span class=\"line\">                                weatherDic[weather[<span class=\"string\">'category'</span>]]=weather[<span class=\"string\">\"fcstValue\"</span>]</span><br><span class=\"line\">     </span><br><span class=\"line\">                            <span class=\"keyword\">elif</span> (weather[<span class=\"string\">'category'</span>] == <span class=\"string\">\"T1H\"</span>):<span class=\"comment\"># 기온</span></span><br><span class=\"line\">                                weatherDic[weather[<span class=\"string\">'category'</span>]]=weather[<span class=\"string\">\"fcstValue\"</span>]</span><br><span class=\"line\">     </span><br><span class=\"line\">                            <span class=\"keyword\">elif</span> (weather[<span class=\"string\">'category'</span>] == <span class=\"string\">\"REH\"</span>): <span class=\"comment\"># 습도</span></span><br><span class=\"line\">                                weatherDic[weather[<span class=\"string\">'category'</span>]]=weather[<span class=\"string\">\"fcstValue\"</span>]</span><br><span class=\"line\">     </span><br><span class=\"line\">                            <span class=\"keyword\">elif</span> (weather[<span class=\"string\">'category'</span>] == <span class=\"string\">\"UUU\"</span>): <span class=\"comment\"># 동서바람성분</span></span><br><span class=\"line\">                                weatherDic[weather[<span class=\"string\">'category'</span>]]=weather[<span class=\"string\">\"fcstValue\"</span>]</span><br><span class=\"line\">     </span><br><span class=\"line\">                            <span class=\"keyword\">elif</span> (weather[<span class=\"string\">'category'</span>] == <span class=\"string\">\"VVV\"</span>): <span class=\"comment\"># 남북바람성분</span></span><br><span class=\"line\">                                weatherDic[weather[<span class=\"string\">'category'</span>]]=weather[<span class=\"string\">\"fcstValue\"</span>]</span><br><span class=\"line\">     </span><br><span class=\"line\">                            <span class=\"keyword\">elif</span> (weather[<span class=\"string\">'category'</span>] == <span class=\"string\">\"VEC\"</span>): <span class=\"comment\"># 풍향</span></span><br><span class=\"line\">                                weatherDic[weather[<span class=\"string\">'category'</span>]]=weather[<span class=\"string\">\"fcstValue\"</span>]</span><br><span class=\"line\">     </span><br><span class=\"line\">                            <span class=\"keyword\">elif</span> (weather[<span class=\"string\">'category'</span>] == <span class=\"string\">\"WSD\"</span>): <span class=\"comment\"># 풍속</span></span><br><span class=\"line\">                                weatherDic[weather[<span class=\"string\">'category'</span>]]=weather[<span class=\"string\">\"fcstValue\"</span>]</span><br><span class=\"line\">     </span><br><span class=\"line\">                    <span class=\"comment\"># <span class=\"doctag\">TODO:</span> 4. weatherDic에 저장되어 있는 값을 MySQL 에 저장하기 위해 List에 저장</span></span><br><span class=\"line\">                    string = dic.get(<span class=\"string\">'REGION_CD'</span>), dic.get(<span class=\"string\">'STATE_NAME'</span>), dic.get(<span class=\"string\">'CITY_NAME'</span>), weatherDic.get(<span class=\"string\">'SKY'</span>), weatherDic.get(<span class=\"string\">'T1H'</span>), weatherDic.get(<span class=\"string\">'REH'</span>), weatherDic.get(<span class=\"string\">'RN1'</span>), weatherDic.get(<span class=\"string\">'PTY'</span>), weatherDic.get(<span class=\"string\">'VEC'</span>), weatherDic.get(<span class=\"string\">'WSD'</span>)</span><br><span class=\"line\">                    mysqlList.append(string)</span><br><span class=\"line\">     </span><br><span class=\"line\">            cur.close()</span><br><span class=\"line\">     </span><br><span class=\"line\">        <span class=\"comment\"># <span class=\"doctag\">TODO:</span> 5. 기존에 저장된 MySQL의 날씨값 삭제.</span></span><br><span class=\"line\">        with conn.cursor(pymysql.cursors.DictCursor) as cur:</span><br><span class=\"line\">            query = <span class=\"string\">\"TRUNCATE NEW_WEATHER_STATUS;\"</span></span><br><span class=\"line\">            cur.execute(query)</span><br><span class=\"line\">            conn.commit()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"-------------\"</span>)</span><br><span class=\"line\">     </span><br><span class=\"line\">        <span class=\"comment\"># <span class=\"doctag\">TODO:</span> 6. 저장된 최종 List를 MySQL에 저장.</span></span><br><span class=\"line\">        with conn.cursor(pymysql.cursors.DictCursor) as cur:</span><br><span class=\"line\">            <span class=\"comment\"># 아무리 DB의 시스템시간을 바꾸어도 UTC+0인 시간만 오기에 어쩔 수 없이 \"DATE_ADD(NOW(), INTERVAL 9 HOUR)\" 를 넣었음.</span></span><br><span class=\"line\">            <span class=\"comment\"># 좋은 방법이 아니므로 다른 방법을 찾아야 하지 않을까? 지금 일단은 돌아감...</span></span><br><span class=\"line\">            query = <span class=\"string\">\"INSERT INTO NEW_WEATHER_STATUS (REGION_CD, STATE_NAME, CITY_NAME, ICON, TEMP, HUMI, RAINFALL, SNOWFALL, WINDDIR, WINDSPEED, REGISTER_AT) VALUES (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,DATE_ADD(NOW(), INTERVAL 9 HOUR));\"</span></span><br><span class=\"line\">            cur.executemany(query, mysqlList)</span><br><span class=\"line\">            conn.commit()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"-------------\"</span>)</span><br><span class=\"line\">     </span><br><span class=\"line\">    except ImportError as exc:</span><br><span class=\"line\">        raise ImportError(</span><br><span class=\"line\">            <span class=\"string\">\"Couldn't import Django. Are you sure it's installed and \"</span></span><br><span class=\"line\">            <span class=\"string\">\"available on your PYTHONPATH environment variable? Did you \"</span></span><br><span class=\"line\">            <span class=\"string\">\"forget to activate a virtual environment?\"</span></span><br><span class=\"line\">        ) from exc</span><br></pre></td></tr></table></figure></div>\n<ul>\n<li>소스는 주석도 넣어놨고, 굳이 이정도까지 설명해야 하나 싶을정도여서, 따로 설명하지 않겠다.</li>\n</ul>\n<h2 id=\"결과화면\"><a href=\"#결과화면\" class=\"headerlink\" title=\"결과화면\"></a>결과화면</h2><p><a href=\"https://user-images.githubusercontent.com/62123161/81513300-6f345480-9362-11ea-96fb-fad4d3532da1.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/81513300-6f345480-9362-11ea-96fb-fad4d3532da1.png\" alt=\"cloud9_08\"></a><br><a href=\"https://user-images.githubusercontent.com/62123161/81513298-6d6a9100-9362-11ea-880e-c24f94df6ecb.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/81513298-6d6a9100-9362-11ea-880e-c24f94df6ecb.png\" alt=\"cloud9_09\"></a></p>\n","text":"개발환경 구축※ 기본 개발환경IntelliJPythonAWS Console설정1) DashBoard [Figure] ","link":"","raw":null,"photos":[],"categories":[{"name":"aws","slug":"aws","count":18,"path":"api/categories/aws.json"}],"tags":[{"name":"AWS","slug":"AWS","count":20,"path":"api/tags/AWS.json"},{"name":"Cloud9","slug":"Cloud9","count":2,"path":"api/tags/Cloud9.json"},{"name":"Web","slug":"Web","count":2,"path":"api/tags/Web.json"},{"name":"Debugger","slug":"Debugger","count":2,"path":"api/tags/Debugger.json"},{"name":"python","slug":"python","count":4,"path":"api/tags/python.json"}]},{"title":"Armeria(공부중)","slug":"Armeria","date":"2021-02-18T07:04:21.000Z","updated":"2021-02-18T02:52:34.484Z","comments":true,"pin":null,"path":"api/articles/Armeria.json","excerpt":"","keywords":null,"cover":null,"content":"<h2 id=\"서문\"><a href=\"#서문\" class=\"headerlink\" title=\"서문\"></a>서문</h2><ul>\n<li>요즘 대세인 아르메리아(Armeria)에 대해 간단히 알아보자.</li>\n<li>오픈소스 기반의 자바 HTTP/2 마이크로서비스 프레임워크</li>\n<li>Netty  개발자와 Line에서 사용중</li>\n<li>공식홈페이지(<a href=\"https://armeria.dev/\" target=\"_blank\" rel=\"noopener\">https://armeria.dev/</a>)</li>\n</ul>\n<h2 id=\"본문\"><a href=\"#본문\" class=\"headerlink\" title=\"본문\"></a>본문</h2><h3 id=\"1-Armeria\"><a href=\"#1-Armeria\" class=\"headerlink\" title=\"1. Armeria?\"></a>1. Armeria?</h3><ul>\n<li>Asynchronous RPC/REST library built on top of Java 8, Netty, HTTP/2, Thrift and gRPC</li>\n<li>고성능 비동기 마이크로서비스를 손쉽게 제작할 수 있음</li>\n<li>단일 어플리케이션에서 단일 포트로 HTTP, gRPC, Thrift를 동시에 지원<br>spring webflux는 서블릿엔진이 아니기 때문에 thrift의 Tservlet을 사용할 수 없음, 별도로 서버구현체를 만들어야해서 포트 소모</li>\n<li>gRPC, Thrift를 브라우저기반에서 테스트 가능</li>\n<li>cf. 사용처 : zipkin, slack, twitter, kakaoPay 등</li>\n</ul>\n<h3 id=\"2-설정방법\"><a href=\"#2-설정방법\" class=\"headerlink\" title=\"2. 설정방법\"></a>2. 설정방법</h3><h4 id=\"Gradle\"><a href=\"#Gradle\" class=\"headerlink\" title=\"Gradle\"></a>Gradle</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    ....</span><br><span class=\"line\">    compile <span class=\"string\">\"com.linecorp.armeria:armeria:0.68.2\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"라우팅-전-psvm\"><a href=\"#라우팅-전-psvm\" class=\"headerlink\" title=\"라우팅 전 psvm\"></a>라우팅 전 psvm</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">        ServerBuilder sb = new ServerBuilder();</span><br><span class=\"line\">        sb.http(8080);</span><br><span class=\"line\">  </span><br><span class=\"line\">        sb.service(<span class=\"string\">\"/hello\"</span>, (ctx, res) -&gt;</span><br><span class=\"line\">            HttpResponse.of(</span><br><span class=\"line\">                HttpStatus.OK,</span><br><span class=\"line\">                MediaType.HTML_UTF_8,</span><br><span class=\"line\">                <span class=\"string\">\"&lt;h1&gt;Hello Armeria...!&lt;/h1&gt;\"</span>));</span><br><span class=\"line\">  </span><br><span class=\"line\">        Server server = sb.build();</span><br><span class=\"line\">        CompletableFuture&lt;Void&gt; future = server.start();</span><br><span class=\"line\">        future.join();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"라우팅\"><a href=\"#라우팅\" class=\"headerlink\" title=\"라우팅\"></a>라우팅</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class CustomService &#123;</span><br><span class=\"line\">    @Get(<span class=\"string\">\"/\"</span>)</span><br><span class=\"line\">    public HttpResponse <span class=\"function\"><span class=\"title\">defaultMethod</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> HttpResponse.of(</span><br><span class=\"line\">            HttpStatus.OK,</span><br><span class=\"line\">            MediaType.HTML_UTF_8,</span><br><span class=\"line\">            <span class=\"string\">\"&lt;h1&gt;Hello world...!&lt;/h1&gt;\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    @Get(<span class=\"string\">\"/page/:text\"</span>) // nest.js, spring과 큰 차이없음.</span><br><span class=\"line\">    public HttpResponse methodB(@Param(<span class=\"string\">\"text\"</span>) String text) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> HttpResponse.of(</span><br><span class=\"line\">            HttpStatus.OK,</span><br><span class=\"line\">            MediaType.HTML_UTF_8,</span><br><span class=\"line\">            <span class=\"string\">\"&lt;h1&gt;Hello \"</span> + text + <span class=\"string\">\"...!&lt;/h1&gt;\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"라우팅-후-psvm\"><a href=\"#라우팅-후-psvm\" class=\"headerlink\" title=\"라우팅 후 psvm\"></a>라우팅 후 psvm</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">        ServerBuilder sb = new ServerBuilder();</span><br><span class=\"line\">        sb.http(8080);</span><br><span class=\"line\">  </span><br><span class=\"line\">        sb.annotatedService(new CustomService()); //여기서 호출!</span><br><span class=\"line\">  </span><br><span class=\"line\">        Server server = sb.build();</span><br><span class=\"line\">        CompletableFuture&lt;Void&gt; future = server.start();</span><br><span class=\"line\">        future.join();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></div>\n\n\n<h2 id=\"참고자료\"><a href=\"#참고자료\" class=\"headerlink\" title=\"참고자료\"></a>참고자료</h2><h3 id=\"gRPC-란\"><a href=\"#gRPC-란\" class=\"headerlink\" title=\"gRPC 란?\"></a>gRPC 란?</h3><ul>\n<li>RPC는 원격 프로시저 요청(Remote Procedure Call)의 약자로 gRPC는 Google에서 개발.</li>\n<li>통신 프로토콜 : HTTP/2</li>\n<li>표현언어 : 프로토콜 버퍼<br>xml 이나 json은 사람이 읽을 수 있게 직렬화 하지만, 프로토콜 버퍼는 이진바이너리로 직렬화 =&gt; 매우 빨라짐</li>\n<li>특징<br>로드밸런싱, 인증, 양방향 스트리밍 및 흐름 제어, 바인딩 차단 또는 차단 해제 및 취소 및 시간 초과 기능<br>클라이언트에서 서버의 API호출을 메소드처럼 직접 할 수 있음 (MSA에서 강점인 듯?)<br>gRPC 클라이언트는 서버의 메소드의 stub을 작성<br>gRPC 서버는 인터페이스 제공</li>\n</ul>\n<h3 id=\"Thrift-란\"><a href=\"#Thrift-란\" class=\"headerlink\" title=\"Thrift 란?\"></a>Thrift 란?</h3><ul>\n<li>다양한 언어를 지원하는 RPC 프레임워크, facebook 에서 개발</li>\n<li>데이타 타입 및 서비스 인터페이스를 간단한 정의 파일안에 제공하며, 컴파일러는 다른 언어간에 통신할 수 있는 RPC 클라이언트/서버의 코드를 생성</li>\n<li>특징<br>Sync, Async Server API 제공<br>서블릿 제공(org.apache.thrift.server.TServlet)<br>멀티쓰레드 지원 (org.apache.thrift.server.ThreadPoolServer : worker thread 지정)</li>\n</ul>\n","text":"서문요즘 대세인 아르메리아(Armeria)에 대해 간단히 알아보자.오픈소스 기반의 자바 HTTP/2 마이크로서비스 프레임워크Netty  개발자와 Line에서 사용중공식홈페이지(https://armeria.dev/)본문1. Armeria?Asynchro","link":"","raw":null,"photos":[],"categories":[{"name":"aws","slug":"aws","count":18,"path":"api/categories/aws.json"}],"tags":[{"name":"AWS","slug":"AWS","count":20,"path":"api/tags/AWS.json"},{"name":"Cloud9","slug":"Cloud9","count":2,"path":"api/tags/Cloud9.json"},{"name":"Web","slug":"Web","count":2,"path":"api/tags/Web.json"},{"name":"Debugger","slug":"Debugger","count":2,"path":"api/tags/Debugger.json"},{"name":"python","slug":"python","count":4,"path":"api/tags/python.json"}]}]}