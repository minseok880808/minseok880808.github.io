{"name":"API","slug":"API","count":1,"posts":[{"title":"기상청과 연동한 날씨 Data서버 구축","slug":"WeatherServer","date":"2020-08-15T03:06:45.000Z","updated":"2020-08-15T01:30:51.984Z","comments":true,"pin":null,"path":"api/articles/WeatherServer.json","excerpt":"","keywords":null,"cover":null,"content":"<p>2016년 C#에 이어 Python으로 개발을 진행했었다.<br>특별한 시나리오는 없다.</p>\n<ol>\n<li>AWS Cloudwatch의 CRON 설정을 통해 매 시간 전국의 날씨 상황정보를 받아옴.</li>\n<li>DataBase에 저장</li>\n<li>API를 통하여 날씨 정보를 제공</li>\n<li>(추후) TAC 청정환기를 위한 대기질 정보 수신부 추가예정</li>\n</ol>\n<h3 id=\"Python-Batch용\"><a href=\"#Python-Batch용\" class=\"headerlink\" title=\"Python Batch용\"></a>Python Batch용</h3><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><figcaption><span>python Weather</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import json</span><br><span class=\"line\">import os</span><br><span class=\"line\">import pymysql</span><br><span class=\"line\">import requests</span><br><span class=\"line\">import time</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Refactored</span></span><br><span class=\"line\">from pytz import timezone</span><br><span class=\"line\">from navien.util.logger import Logger as Log</span><br><span class=\"line\">from navien.util.secrets_manager import getSecretString</span><br><span class=\"line\">from datetime import datetime, timedelta</span><br><span class=\"line\">from navien.util.scenario.base.scenario import Scenario</span><br><span class=\"line\"></span><br><span class=\"line\">KWEATHER_URL = \\</span><br><span class=\"line\">  <span class=\"string\">'http://apis.data.go.kr/1360000/VilageFcstInfoService/getUltraSrtFcst'</span> \\</span><br><span class=\"line\">  <span class=\"string\">'?serviceKey=(SERVICE_KEY)&amp;numOfRows=1000&amp;pageNo=1&amp;dataType=JSON&amp;'</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class ScenarioImpl(Scenario):</span><br><span class=\"line\">  def __init__(self, dbHelper, event, tz):</span><br><span class=\"line\">    super().__init__(dbHelper, event, tz)</span><br><span class=\"line\">    self._parseEvent(event)</span><br><span class=\"line\"></span><br><span class=\"line\">    self._todayList = &#123;&#125;</span><br><span class=\"line\">    self._queryParamList = []</span><br><span class=\"line\"></span><br><span class=\"line\">  def _parseEvent(self, event):</span><br><span class=\"line\">    self._now = datetime.now(timezone(self._tz))-timedelta(hours=1)</span><br><span class=\"line\">    self._lastModifyAt = self._now.strftime(<span class=\"string\">'%Y-%m-%d %H:%M:%S'</span>)</span><br><span class=\"line\">    self._registerAt = self._lastModifyAt</span><br><span class=\"line\"></span><br><span class=\"line\">  def _getRegionCodes(self):</span><br><span class=\"line\">    <span class=\"built_in\">return</span> self._dbHelper.fetchAll(</span><br><span class=\"line\">        <span class=\"string\">\"\"</span><span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">        select * </span></span><br><span class=\"line\"><span class=\"string\">        from REGION_CODE </span></span><br><span class=\"line\"><span class=\"string\">        WHERE REGION_CODE&gt;20000 AND CITY !='' AND DONG='';    </span></span><br><span class=\"line\"><span class=\"string\">        \"</span><span class=\"string\">\"\"</span>, ()</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">  def _requestWeatherInfo(self, server, nx, ny):</span><br><span class=\"line\">    additionalValue = <span class=\"string\">'base_date='</span> + self._now.strftime(<span class=\"string\">\"%Y%m%d\"</span>) + \\</span><br><span class=\"line\">                      <span class=\"string\">'&amp;base_time='</span> + self._now.strftime(<span class=\"string\">\"%H00\"</span>) + \\</span><br><span class=\"line\">                      <span class=\"string\">'&amp;'</span> + <span class=\"string\">'nx='</span> + str(nx) + \\</span><br><span class=\"line\">                      <span class=\"string\">'&amp;'</span> + <span class=\"string\">'ny='</span> + str(ny)</span><br><span class=\"line\">    <span class=\"comment\"># Log.d('URL : &#123;&#125;&#123;&#125;'.format(server, additionalValue))</span></span><br><span class=\"line\">    _r = requests.get(server + additionalValue)</span><br><span class=\"line\">    <span class=\"built_in\">return</span> json.loads(_r.text)</span><br><span class=\"line\"></span><br><span class=\"line\">  @staticmethod</span><br><span class=\"line\">  def _isResponseOkay(response):</span><br><span class=\"line\">    resultCode = response[<span class=\"string\">'response'</span>][<span class=\"string\">'header'</span>][<span class=\"string\">'resultCode'</span>]</span><br><span class=\"line\">    resultMessage = response[<span class=\"string\">'response'</span>][<span class=\"string\">'header'</span>][<span class=\"string\">'resultMsg'</span>]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> resultCode != <span class=\"string\">'00'</span>:</span><br><span class=\"line\">      Log.e(<span class=\"string\">'ResultCode : &#123;&#125;, ResultMessage : &#123;&#125;'</span>.format(resultCode, resultMessage))</span><br><span class=\"line\">      <span class=\"built_in\">return</span> False</span><br><span class=\"line\">    <span class=\"built_in\">return</span> True</span><br><span class=\"line\"></span><br><span class=\"line\">  def _cleanUpTables(self):</span><br><span class=\"line\">    self._dbHelper.execute(<span class=\"string\">'TRUNCATE STATUS_DAY;'</span>, ())</span><br><span class=\"line\">    self._dbHelper.execute(<span class=\"string\">'TRUNCATE STATUS_YDAY;'</span>, ())</span><br><span class=\"line\"></span><br><span class=\"line\">  def _updateTemperatureGap(self):</span><br><span class=\"line\">    yesterdayBegin = datetime.now(timezone(self._tz))-timedelta(hours=26)</span><br><span class=\"line\">    yesterdayEnd = datetime.now(timezone(self._tz))-timedelta(hours=22)</span><br><span class=\"line\">    yesterdayStatus = self._dbHelper.fetchAll(</span><br><span class=\"line\">        <span class=\"string\">\"\"</span><span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">        SELECT * </span></span><br><span class=\"line\"><span class=\"string\">        FROM STATUS_LOG </span></span><br><span class=\"line\"><span class=\"string\">        WHERE REG_TIME BETWEEN %s AND %s GROUP BY REGION_CODE;</span></span><br><span class=\"line\"><span class=\"string\">        \"</span><span class=\"string\">\"\"</span>, (yesterdayBegin, yesterdayEnd)</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    Log.d(<span class=\"string\">'yesterdayBegin : &#123;&#125;'</span>.format(yesterdayBegin))</span><br><span class=\"line\">    Log.d(<span class=\"string\">'yesterdayEnd : &#123;&#125;'</span>.format(yesterdayEnd))</span><br><span class=\"line\">    Log.d(<span class=\"string\">'status : &#123;&#125;'</span>.format(yesterdayStatus))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> yesterdayStatus:</span><br><span class=\"line\">      try:</span><br><span class=\"line\">        todayTemp = int(self._todayList[row[<span class=\"string\">'REGION_CODE'</span>]][<span class=\"string\">'T1H'</span>])</span><br><span class=\"line\">        yesterdayTemp = int(row[<span class=\"string\">'T1H'</span>])</span><br><span class=\"line\">        diff = todayTemp - yesterdayTemp</span><br><span class=\"line\">        self._dbHelper.execute(</span><br><span class=\"line\">            <span class=\"string\">\"\"</span><span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">            INSERT INTO STATUS_YDAY (</span></span><br><span class=\"line\"><span class=\"string\">            REGION_CODE, STATE, CITY, DONG, TODAY_TEMP, YESTERDAY_TEMP, DIFFERENCE, UPDATE_TIME</span></span><br><span class=\"line\"><span class=\"string\">            ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s);</span></span><br><span class=\"line\"><span class=\"string\">            \"</span><span class=\"string\">\"\"</span>, (</span><br><span class=\"line\">              row[<span class=\"string\">'REGION_CODE'</span>], row[<span class=\"string\">'STATE'</span>], row[<span class=\"string\">'CITY'</span>], row[<span class=\"string\">'DONG'</span>],</span><br><span class=\"line\">              todayTemp, yesterdayTemp, diff, self._lastModifyAt</span><br><span class=\"line\">            )</span><br><span class=\"line\">        )</span><br><span class=\"line\">      except:</span><br><span class=\"line\">        <span class=\"built_in\">continue</span></span><br><span class=\"line\"></span><br><span class=\"line\">  def _insertStatus(self):</span><br><span class=\"line\">    self._dbHelper.executeMany(</span><br><span class=\"line\">        <span class=\"string\">\"\"</span><span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">        INSERT INTO STATUS_DAY (</span></span><br><span class=\"line\"><span class=\"string\">        REGION_CODE, STATE, CITY, DONG, SKY, T1H, REH, </span></span><br><span class=\"line\"><span class=\"string\">        RN1, PTY, VEC, WSD, LGT, UUU, VVV, UPDATE_TIME</span></span><br><span class=\"line\"><span class=\"string\">        ) VALUES (%s, %s, %s, %s, %s, </span></span><br><span class=\"line\"><span class=\"string\">        %s, %s, %s, %s, </span></span><br><span class=\"line\"><span class=\"string\">        %s, %s, %s, %s, %s, %s);</span></span><br><span class=\"line\"><span class=\"string\">        \"</span><span class=\"string\">\"\"</span>, self._queryParamList)</span><br><span class=\"line\">    self._dbHelper.executeMany(</span><br><span class=\"line\">        <span class=\"string\">\"\"</span><span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">        INSERT INTO STATUS_LOG (</span></span><br><span class=\"line\"><span class=\"string\">        REGION_CODE, STATE, CITY, DONG, SKY, T1H, REH, </span></span><br><span class=\"line\"><span class=\"string\">        RN1, PTY, VEC, WSD, LGT, UUU, VVV, REG_TIME</span></span><br><span class=\"line\"><span class=\"string\">        ) VALUES (%s, %s, %s, %s, </span></span><br><span class=\"line\"><span class=\"string\">        %s, %s, %s, %s, </span></span><br><span class=\"line\"><span class=\"string\">        %s, %s, %s, %s, %s, %s, %s);</span></span><br><span class=\"line\"><span class=\"string\">        \"</span><span class=\"string\">\"\"</span>, self._queryParamList)</span><br><span class=\"line\"></span><br><span class=\"line\">  def _fetchWeatherInfo(self):</span><br><span class=\"line\">    regionCodes = self._getRegionCodes()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> region <span class=\"keyword\">in</span> regionCodes:</span><br><span class=\"line\">      response = self._requestWeatherInfo(KWEATHER_URL, region[<span class=\"string\">'NX'</span>], region[<span class=\"string\">'NY'</span>])</span><br><span class=\"line\">      <span class=\"keyword\">if</span> not self._isResponseOkay(response):</span><br><span class=\"line\">        <span class=\"built_in\">continue</span></span><br><span class=\"line\"></span><br><span class=\"line\">      weather = &#123;</span><br><span class=\"line\">        <span class=\"string\">'REGION_CODE'</span>: region[<span class=\"string\">'REGION_CODE'</span>],</span><br><span class=\"line\">        <span class=\"string\">'STATE'</span>: region[<span class=\"string\">'STATE'</span>],</span><br><span class=\"line\">        <span class=\"string\">'CITY'</span>: region[<span class=\"string\">'CITY'</span>],</span><br><span class=\"line\">        <span class=\"string\">'DONG'</span>: region[<span class=\"string\">'DONG'</span>]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> response[<span class=\"string\">'response'</span>][<span class=\"string\">'body'</span>][<span class=\"string\">'items'</span>][<span class=\"string\">'item'</span>]:</span><br><span class=\"line\">        currentTime = (self._now + timedelta(hours=+1)).strftime(<span class=\"string\">'%H00'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> item[<span class=\"string\">'fcstTime'</span>] == currentTime:</span><br><span class=\"line\">          weather[item[<span class=\"string\">'category'</span>]] = item[<span class=\"string\">'fcstValue'</span>]</span><br><span class=\"line\">      <span class=\"comment\"># Log.d('weather : &#123;&#125;'.format(weather))</span></span><br><span class=\"line\">      self._todayList[weather[<span class=\"string\">'REGION_CODE'</span>]] = weather</span><br><span class=\"line\">      self._queryParamList.append((</span><br><span class=\"line\">        weather[<span class=\"string\">'REGION_CODE'</span>], weather[<span class=\"string\">'STATE'</span>], weather[<span class=\"string\">'CITY'</span>], weather[<span class=\"string\">'DONG'</span>],</span><br><span class=\"line\">        weather[<span class=\"string\">'SKY'</span>], weather[<span class=\"string\">'T1H'</span>], weather[<span class=\"string\">'REH'</span>], weather[<span class=\"string\">'RN1'</span>],</span><br><span class=\"line\">        weather[<span class=\"string\">'PTY'</span>], weather[<span class=\"string\">'VEC'</span>], weather[<span class=\"string\">'WSD'</span>], weather[<span class=\"string\">'LGT'</span>],</span><br><span class=\"line\">        weather[<span class=\"string\">'UUU'</span>], weather[<span class=\"string\">'VVV'</span>], self._lastModifyAt</span><br><span class=\"line\">      ))</span><br><span class=\"line\"></span><br><span class=\"line\">  def action(self):</span><br><span class=\"line\">    self._fetchWeatherInfo()</span><br><span class=\"line\">    self._cleanUpTables()</span><br><span class=\"line\">    self._updateTemperatureGap()</span><br><span class=\"line\">    self._insertStatus()</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"Java-Spring-Boot-Batch용\"><a href=\"#Java-Spring-Boot-Batch용\" class=\"headerlink\" title=\"Java(Spring Boot) Batch용\"></a>Java(Spring Boot) Batch용</h3><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.kdnavien.mate.api.service;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.fasterxml.jackson.databind.JsonNode;</span><br><span class=\"line\">import com.kdnavien.mate.api.entity.NewWeatherRegionCode;</span><br><span class=\"line\">import com.kdnavien.mate.api.entity.NewWeatherStatusDay;</span><br><span class=\"line\">import com.kdnavien.mate.api.entity.NewWeatherStatusLog;</span><br><span class=\"line\">import com.kdnavien.mate.api.entity.NewWeatherStatusYDay;</span><br><span class=\"line\">import com.kdnavien.mate.api.helper.HttpHelper;</span><br><span class=\"line\">import com.kdnavien.mate.api.repository.NewWeatherRegionCodeRepository;</span><br><span class=\"line\">import com.kdnavien.mate.api.repository.NewWeatherStatusDayRepository;</span><br><span class=\"line\">import com.kdnavien.mate.api.repository.NewWeatherStatusLogRepository;</span><br><span class=\"line\">import com.kdnavien.mate.api.repository.NewWeatherStatusYDayRepository;</span><br><span class=\"line\">import lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\">import org.springframework.context.annotation.Profile;</span><br><span class=\"line\">import org.springframework.http.ResponseEntity;</span><br><span class=\"line\">import org.springframework.scheduling.annotation.Scheduled;</span><br><span class=\"line\">import org.springframework.stereotype.Component;</span><br><span class=\"line\">import org.springframework.util.StringUtils;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.net.URLEncoder;</span><br><span class=\"line\">import java.time.ZoneId;</span><br><span class=\"line\">import java.time.ZonedDateTime;</span><br><span class=\"line\">import java.time.format.DateTimeFormatter;</span><br><span class=\"line\">import java.util.*;</span><br><span class=\"line\">import java.util.stream.Collectors;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * https://www.baeldung.com/spring-scheduled-enabled-conditionally</span><br><span class=\"line\"> */</span><br><span class=\"line\">@Profile(<span class=\"string\">\"dev\"</span>)</span><br><span class=\"line\">@Slf4j</span><br><span class=\"line\">@Component</span><br><span class=\"line\">public class WeatherBatchJob &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    NewWeatherRegionCodeRepository newWeatherRegionCodeRepository;</span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    NewWeatherStatusDayRepository newWeatherStatusDayRepository;</span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    NewWeatherStatusLogRepository newWeatherStatusLogRepository;</span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    NewWeatherStatusYDayRepository newWeatherStatusYDayRepository;</span><br><span class=\"line\"></span><br><span class=\"line\">    private Integer Minute = 60*1000;</span><br><span class=\"line\">    private Integer Day = 24*3600*1000;</span><br><span class=\"line\"></span><br><span class=\"line\">//    @Scheduled(cron = <span class=\"string\">\"* * * * * *\"</span>) //https://javafactory.tistory.com/1386</span><br><span class=\"line\">    @Scheduled(cron = <span class=\"string\">\"0 0 * * * *\"</span>) //https://javafactory.tistory.com/1386</span><br><span class=\"line\">    public void temp() throws Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        //TODO 1. 정의된 지역정보 모두 받아오기.</span><br><span class=\"line\">        List&lt;NewWeatherRegionCode&gt; newWeatherRegionCodeList = newWeatherRegionCodeRepository.findAll();</span><br><span class=\"line\">        //TODO 2. 지역정보 3700개 중에서 구단위만 Sorting 하여 따로 저장.</span><br><span class=\"line\">        List&lt;NewWeatherRegionCode&gt; newWeatherRegionCodeList_gu = newWeatherRegionCodeList.stream()</span><br><span class=\"line\">                .filter(newWeatherRegionCode -&gt; StringUtils.isEmpty(newWeatherRegionCode.getDong()))</span><br><span class=\"line\">                .filter(newWeatherRegionCode -&gt; !StringUtils.isEmpty(newWeatherRegionCode.getCity()))</span><br><span class=\"line\">                .filter(newWeatherRegionCode -&gt; newWeatherRegionCode.getRegionCode()&gt;=20000) //구 Kweather 지역은 제외(총 250개)</span><br><span class=\"line\">                .collect(Collectors.toList());</span><br><span class=\"line\"></span><br><span class=\"line\">        //TODO 3. 어느 Region에 설치하든 한국시간을 따라가게 만들려고..(RDS는 이상하게 시스템 시간이 GMT+00:00을 기본값으로 갖고있음.)</span><br><span class=\"line\">        ZonedDateTime nowSeoul = ZonedDateTime.now(ZoneId.of(<span class=\"string\">\"Asia/Seoul\"</span>));</span><br><span class=\"line\">        String ymd = nowSeoul.format(DateTimeFormatter.ofPattern(<span class=\"string\">\"yyyyMMdd\"</span>));</span><br><span class=\"line\">        String h0 = nowSeoul.plusHours(-1).format(DateTimeFormatter.ofPattern(<span class=\"string\">\"HH00\"</span>));</span><br><span class=\"line\">        String h1 = nowSeoul.format(DateTimeFormatter.ofPattern(<span class=\"string\">\"HH00\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        //현재날짜 선언</span><br><span class=\"line\">        Date currDate = new Date();</span><br><span class=\"line\"></span><br><span class=\"line\">        //1.</span><br><span class=\"line\">        long beforeTime = System.currentTimeMillis(); //코드 실행 전에 시간 받아오기</span><br><span class=\"line\">        // TODO 4.구단위 리스트에서 nx, ny만 뽑아서 모두 조회-&gt; 현재는 중복되도 다시 call할 가능성 매우높음.. distict 쿼리문처럼 할지 말지 고민중.</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(NewWeatherRegionCode region : newWeatherRegionCodeList_gu)&#123;</span><br><span class=\"line\">            //String url = <span class=\"string\">\"http://apis.data.go.kr/1360000/VilageFcstInfoService/getUltraSrtFcst?serviceKey=[SERVICE_KEY]&amp;numOfRows=100&amp;pageNo=1&amp;dataType=JSON&amp;base_date=\"</span>+ymd+<span class=\"string\">\"&amp;base_time=\"</span>+h0+<span class=\"string\">\"&amp;nx=\"</span>+region.getNx()+<span class=\"string\">\"&amp;ny=\"</span>+region.getNy();</span><br><span class=\"line\">            StringBuilder urlBuilder = new StringBuilder(<span class=\"string\">\"http://apis.data.go.kr/1360000/VilageFcstInfoService/getUltraSrtFcst\"</span>); /*URL*/</span><br><span class=\"line\">//            urlBuilder.append(<span class=\"string\">\"?\"</span> + URLEncoder.encode(<span class=\"string\">\"ServiceKey\"</span>,<span class=\"string\">\"UTF-8\"</span>) + <span class=\"string\">\"[SERVICE_KEY]\"</span>); /*Service Key*/</span><br><span class=\"line\">            urlBuilder.append(<span class=\"string\">\"?\"</span> + URLEncoder.encode(<span class=\"string\">\"ServiceKey\"</span>,<span class=\"string\">\"UTF-8\"</span>) + <span class=\"string\">\"=\"</span> + URLEncoder.encode(<span class=\"string\">\"2YbxZ9cWcxmBPAm5iYgJh4QN59XpzIJximMFQ3qpXfxd9D8SsCLGrzZbG7x5YmXdSaIi0BsVJ+JreWVak7ZYDw==\"</span>, <span class=\"string\">\"UTF-8\"</span>)); /*서비스 인증*/</span><br><span class=\"line\">            urlBuilder.append(<span class=\"string\">\"&amp;\"</span> + URLEncoder.encode(<span class=\"string\">\"base_date\"</span>,<span class=\"string\">\"UTF-8\"</span>) + <span class=\"string\">\"=\"</span> + URLEncoder.encode(ymd, <span class=\"string\">\"UTF-8\"</span>)); /*‘15년 12월 1일 발표*/</span><br><span class=\"line\">            urlBuilder.append(<span class=\"string\">\"&amp;\"</span> + URLEncoder.encode(<span class=\"string\">\"base_time\"</span>,<span class=\"string\">\"UTF-8\"</span>) + <span class=\"string\">\"=\"</span> + URLEncoder.encode(h0, <span class=\"string\">\"UTF-8\"</span>)); /*06시 발표(정시단위) -매시각 40분 이후 호출*/</span><br><span class=\"line\">            urlBuilder.append(<span class=\"string\">\"&amp;\"</span> + URLEncoder.encode(<span class=\"string\">\"nx\"</span>,<span class=\"string\">\"UTF-8\"</span>) + <span class=\"string\">\"=\"</span> + URLEncoder.encode(region.getNx().toString(), <span class=\"string\">\"UTF-8\"</span>)); /*예보지점의 X 좌표값*/</span><br><span class=\"line\">            urlBuilder.append(<span class=\"string\">\"&amp;\"</span> + URLEncoder.encode(<span class=\"string\">\"ny\"</span>,<span class=\"string\">\"UTF-8\"</span>) + <span class=\"string\">\"=\"</span> + URLEncoder.encode(region.getNy().toString(), <span class=\"string\">\"UTF-8\"</span>)); /*예보지점의 Y 좌표값*/</span><br><span class=\"line\">            urlBuilder.append(<span class=\"string\">\"&amp;\"</span> + URLEncoder.encode(<span class=\"string\">\"numOfRows\"</span>,<span class=\"string\">\"UTF-8\"</span>) + <span class=\"string\">\"=\"</span> + URLEncoder.encode(<span class=\"string\">\"1000\"</span>, <span class=\"string\">\"UTF-8\"</span>)); /*한 페이지 결과 수*/</span><br><span class=\"line\">            urlBuilder.append(<span class=\"string\">\"&amp;\"</span> + URLEncoder.encode(<span class=\"string\">\"pageNo\"</span>,<span class=\"string\">\"UTF-8\"</span>) + <span class=\"string\">\"=\"</span> + URLEncoder.encode(<span class=\"string\">\"1\"</span>, <span class=\"string\">\"UTF-8\"</span>)); /*페이지 번호*/</span><br><span class=\"line\">            urlBuilder.append(<span class=\"string\">\"&amp;\"</span> + URLEncoder.encode(<span class=\"string\">\"dataType\"</span>,<span class=\"string\">\"UTF-8\"</span>) + <span class=\"string\">\"=\"</span> + URLEncoder.encode(<span class=\"string\">\"JSON\"</span>, <span class=\"string\">\"UTF-8\"</span>)); /*xml(기본값), json*/</span><br><span class=\"line\">            String url = urlBuilder.toString();</span><br><span class=\"line\"></span><br><span class=\"line\">            //---------------</span><br><span class=\"line\">            //1. <span class=\"keyword\">for</span>문 내 실행시간측정</span><br><span class=\"line\">            long beforeForTime = System.currentTimeMillis(); //코드 실행 전에 시간 받아오기</span><br><span class=\"line\"></span><br><span class=\"line\">            //TODO 5. 데이터를 url통해 기상청에서 받아온 뒤, 파싱하여 Data저장.(Throw 썻는데 이게 맞나..?)</span><br><span class=\"line\">            insertData(newWeatherStatusDayRepository, newWeatherStatusLogRepository, region, url, currDate, h1);</span><br><span class=\"line\"></span><br><span class=\"line\">            long afterForTime = System.currentTimeMillis(); // 코드 실행 후에 시간 받아오기</span><br><span class=\"line\">            long secDiffTime = (afterForTime - beforeForTime); //두 시간에 차 계산</span><br><span class=\"line\">            System.out.println(region.getRegionCode()+<span class=\"string\">\"/\"</span>+region.getState()+<span class=\"string\">\"/\"</span>+region.getCity()+<span class=\"string\">\"For문 내 시간차이(millisec) : \"</span>+secDiffTime);</span><br><span class=\"line\">            //---------------</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        long afterTime = System.currentTimeMillis(); // 코드 실행 후에 시간 받아오기</span><br><span class=\"line\">        long secDiffTime = (afterTime - beforeTime); //두 시간에 차 계산</span><br><span class=\"line\"></span><br><span class=\"line\">        log.info(<span class=\"string\">\"총 RunningTime(millisec) : \"</span>+ secDiffTime);</span><br><span class=\"line\">        log.info(newWeatherRegionCodeList_gu.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void insertData(NewWeatherStatusDayRepository newWeatherStatusDayRepository,</span><br><span class=\"line\">                            NewWeatherStatusLogRepository newWeatherStatusLogRepository,</span><br><span class=\"line\">                            NewWeatherRegionCode region,</span><br><span class=\"line\">                            String url,</span><br><span class=\"line\">                            Date currDate,</span><br><span class=\"line\">                            String currHour) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        try&#123;</span><br><span class=\"line\">            // TODO 5. HTTP Get(1.1)</span><br><span class=\"line\">            ResponseEntity&lt;JsonNode&gt; returnValue = HttpHelper.sendGetRetry(url);</span><br><span class=\"line\">            JsonNode resultCode = returnValue.getBody().path(<span class=\"string\">\"response\"</span>).get(<span class=\"string\">\"header\"</span>).get(<span class=\"string\">\"resultCode\"</span>);</span><br><span class=\"line\">            // TODO 5.1 받아온 값의 코드를 보고 에러상황 or 정상상황 확인..</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(resultCode.asText().equals(<span class=\"string\">\"00\"</span>))&#123;</span><br><span class=\"line\">                JsonNode weather = returnValue.getBody().path(<span class=\"string\">\"response\"</span>).get(<span class=\"string\">\"body\"</span>).get(<span class=\"string\">\"items\"</span>).get(<span class=\"string\">\"item\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                //각 Attribute 선언</span><br><span class=\"line\">                String LGT = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">                String PTY = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">                String RN1 = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">                String SKY = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">                String T1H = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">                String REH = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">                String UUU = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">                String VVV = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">                String VEC = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">                String WSD = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">                // TODO 6. item만 뽑아내서 변수값 넣어줌.</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(JsonNode weatherJson : weather)&#123;</span><br><span class=\"line\">                    //낙뢰</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(weatherJson.get(<span class=\"string\">\"fcstTime\"</span>).asText().equals(currHour) &amp;&amp; weatherJson.get(<span class=\"string\">\"category\"</span>).asText().equals(<span class=\"string\">\"LGT\"</span>))&#123;</span><br><span class=\"line\">                        LGT = (weatherJson.get(<span class=\"string\">\"fcstValue\"</span>).asText());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    //강수형태</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(weatherJson.get(<span class=\"string\">\"fcstTime\"</span>).asText().equals(currHour) &amp;&amp; weatherJson.get(<span class=\"string\">\"category\"</span>).asText().equals(<span class=\"string\">\"PTY\"</span>))&#123;</span><br><span class=\"line\">                        PTY=(weatherJson.get(<span class=\"string\">\"fcstValue\"</span>).asText());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    //1시간 강수량</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(weatherJson.get(<span class=\"string\">\"fcstTime\"</span>).asText().equals(currHour) &amp;&amp; weatherJson.get(<span class=\"string\">\"category\"</span>).asText().equals(<span class=\"string\">\"RN1\"</span>))&#123;</span><br><span class=\"line\">                        RN1=(weatherJson.get(<span class=\"string\">\"fcstValue\"</span>).asText());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    //하늘상태</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(weatherJson.get(<span class=\"string\">\"fcstTime\"</span>).asText().equals(currHour) &amp;&amp; weatherJson.get(<span class=\"string\">\"category\"</span>).asText().equals(<span class=\"string\">\"SKY\"</span>))&#123;</span><br><span class=\"line\">                        SKY=(weatherJson.get(<span class=\"string\">\"fcstValue\"</span>).asText());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    //기온</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(weatherJson.get(<span class=\"string\">\"fcstTime\"</span>).asText().equals(currHour) &amp;&amp; weatherJson.get(<span class=\"string\">\"category\"</span>).asText().equals(<span class=\"string\">\"T1H\"</span>))&#123;</span><br><span class=\"line\">                        T1H=(weatherJson.get(<span class=\"string\">\"fcstValue\"</span>).asText());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    //습도</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(weatherJson.get(<span class=\"string\">\"fcstTime\"</span>).asText().equals(currHour) &amp;&amp; weatherJson.get(<span class=\"string\">\"category\"</span>).asText().equals(<span class=\"string\">\"REH\"</span>))&#123;</span><br><span class=\"line\">                        REH=(weatherJson.get(<span class=\"string\">\"fcstValue\"</span>).asText());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    //동서바람성분</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(weatherJson.get(<span class=\"string\">\"fcstTime\"</span>).asText().equals(currHour) &amp;&amp; weatherJson.get(<span class=\"string\">\"category\"</span>).asText().equals(<span class=\"string\">\"UUU\"</span>))&#123;</span><br><span class=\"line\">                        UUU=(weatherJson.get(<span class=\"string\">\"fcstValue\"</span>).asText());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    //남북바람성분</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(weatherJson.get(<span class=\"string\">\"fcstTime\"</span>).asText().equals(currHour) &amp;&amp; weatherJson.get(<span class=\"string\">\"category\"</span>).asText().equals(<span class=\"string\">\"VVV\"</span>))&#123;</span><br><span class=\"line\">                        VVV=(weatherJson.get(<span class=\"string\">\"fcstValue\"</span>).asText());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    //풍향</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(weatherJson.get(<span class=\"string\">\"fcstTime\"</span>).asText().equals(currHour) &amp;&amp; weatherJson.get(<span class=\"string\">\"category\"</span>).asText().equals(<span class=\"string\">\"VEC\"</span>))&#123;</span><br><span class=\"line\">                        VEC=(weatherJson.get(<span class=\"string\">\"fcstValue\"</span>).asText());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    //풍속</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(weatherJson.get(<span class=\"string\">\"fcstTime\"</span>).asText().equals(currHour) &amp;&amp; weatherJson.get(<span class=\"string\">\"category\"</span>).asText().equals(<span class=\"string\">\"WSD\"</span>))&#123;</span><br><span class=\"line\">                        WSD=(weatherJson.get(<span class=\"string\">\"fcstValue\"</span>).asText());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                //TODO 7.1 WeatherStatusDay 테이블 채워줄 값</span><br><span class=\"line\">                NewWeatherStatusDay newWeatherStatusDay = new NewWeatherStatusDay();</span><br><span class=\"line\">                newWeatherStatusDay.setRegionCode(region.getRegionCode());</span><br><span class=\"line\">                newWeatherStatusDay.setState(region.getState());</span><br><span class=\"line\">                newWeatherStatusDay.setCity(region.getCity());</span><br><span class=\"line\">                newWeatherStatusDay.setDong(region.getDong());</span><br><span class=\"line\">                newWeatherStatusDay.setT1H(T1H);</span><br><span class=\"line\">                newWeatherStatusDay.setRN1(RN1);</span><br><span class=\"line\">                newWeatherStatusDay.setSKY(SKY);</span><br><span class=\"line\">                newWeatherStatusDay.setUUU(UUU);</span><br><span class=\"line\">                newWeatherStatusDay.setVVV(VVV);</span><br><span class=\"line\">                newWeatherStatusDay.setREH(REH);</span><br><span class=\"line\">                newWeatherStatusDay.setPTY(PTY);</span><br><span class=\"line\">                newWeatherStatusDay.setLGT(LGT);</span><br><span class=\"line\">                newWeatherStatusDay.setVEC(VEC);</span><br><span class=\"line\">                newWeatherStatusDay.setWSD(WSD);</span><br><span class=\"line\">                newWeatherStatusDay.setUpdateTime(currDate);</span><br><span class=\"line\"></span><br><span class=\"line\">                //TODO 7.2 WeatherStatusLog 테이블 채워줄 값</span><br><span class=\"line\">                NewWeatherStatusLog newWeatherStatusLog = new NewWeatherStatusLog();</span><br><span class=\"line\">                newWeatherStatusLog.setRegionCode(region.getRegionCode());</span><br><span class=\"line\">                newWeatherStatusLog.setState(region.getState());</span><br><span class=\"line\">                newWeatherStatusLog.setCity(region.getCity());</span><br><span class=\"line\">                newWeatherStatusLog.setDong(region.getDong());</span><br><span class=\"line\">                newWeatherStatusLog.setT1H(T1H);</span><br><span class=\"line\">                newWeatherStatusLog.setRN1(RN1);</span><br><span class=\"line\">                newWeatherStatusLog.setSKY(SKY);</span><br><span class=\"line\">                newWeatherStatusLog.setUUU(UUU);</span><br><span class=\"line\">                newWeatherStatusLog.setVVV(VVV);</span><br><span class=\"line\">                newWeatherStatusLog.setREH(REH);</span><br><span class=\"line\">                newWeatherStatusLog.setPTY(PTY);</span><br><span class=\"line\">                newWeatherStatusLog.setLGT(LGT);</span><br><span class=\"line\">                newWeatherStatusLog.setVEC(VEC);</span><br><span class=\"line\">                newWeatherStatusLog.setWSD(WSD);</span><br><span class=\"line\">                newWeatherStatusLog.setRegTime(currDate);</span><br><span class=\"line\"></span><br><span class=\"line\">                //TODO 7.3 전송!</span><br><span class=\"line\">                newWeatherStatusDayRepository.save(newWeatherStatusDay);</span><br><span class=\"line\">                newWeatherStatusLogRepository.save(newWeatherStatusLog);</span><br><span class=\"line\"></span><br><span class=\"line\">                //TODO 8. Thread Sleep;</span><br><span class=\"line\">                Thread.sleep(10);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"Error : \"</span>+resultCode.asText());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; catch (Exception e)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"StackTrace : \"</span>+e.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//    @Scheduled(cron = <span class=\"string\">\"* * * * * *\"</span>) //https://javafactory.tistory.com/1386 //디버깅용...바로시작</span><br><span class=\"line\">    @Scheduled(cron = <span class=\"string\">\"0 5 20 * * *\"</span>) //https://javafactory.tistory.com/1386 //매일 오후 8시 5분 0초에 시작함.</span><br><span class=\"line\">    public void <span class=\"function\"><span class=\"title\">yDayBatch</span></span>()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        //TODO 1. 정의된 지역정보 모두 받아오기.</span><br><span class=\"line\">        List&lt;NewWeatherRegionCode&gt; newWeatherRegionCodeList = newWeatherRegionCodeRepository.findAll();</span><br><span class=\"line\">        //TODO 2. 지역정보 3700개 중에서 구단위만 Sorting 하여 따로 저장.</span><br><span class=\"line\">        List&lt;NewWeatherRegionCode&gt; newWeatherRegionCodeList_gu = newWeatherRegionCodeList.stream()</span><br><span class=\"line\">                .filter(newWeatherRegionCode -&gt; StringUtils.isEmpty(newWeatherRegionCode.getDong()))</span><br><span class=\"line\">                .filter(newWeatherRegionCode -&gt; !StringUtils.isEmpty(newWeatherRegionCode.getCity()))</span><br><span class=\"line\">                .filter(newWeatherRegionCode -&gt; newWeatherRegionCode.getRegionCode()&gt;=20000) //구 Kweather 지역은 제외(총 250개)</span><br><span class=\"line\">                .collect(Collectors.toList());</span><br><span class=\"line\"></span><br><span class=\"line\">        //TODO 3. 어느 Region에 설치하든 한국시간을 따라가게 만들려고..(RDS는 이상하게 시스템 시간이 GMT+00:00을 기본값으로 갖고있음.)</span><br><span class=\"line\">        ZonedDateTime nowSeoul = ZonedDateTime.now(ZoneId.of(<span class=\"string\">\"Asia/Seoul\"</span>));</span><br><span class=\"line\">        Date currDate = new Date();</span><br><span class=\"line\"></span><br><span class=\"line\">        //TODO 9. WeatherStatusYDay 테이블 채우기(먼저 이전 시간대 데이터 갖고오기)</span><br><span class=\"line\">        //TODO 9.1 조회하려는 Region의 리스트 받아오기.</span><br><span class=\"line\">        List&lt;Integer&gt; regionList = new ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(NewWeatherRegionCode region : newWeatherRegionCodeList_gu)&#123;</span><br><span class=\"line\">            regionList.add(region.getRegionCode());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        //초기화</span><br><span class=\"line\">        newWeatherStatusYDayRepository.deleteAll();</span><br><span class=\"line\">        long currentDateTime = System.currentTimeMillis();</span><br><span class=\"line\">        long before30MinuteDateTime = currentDateTime - Day - 30*Minute; //TODO 여기에 Day추가해야함.-&gt;완료.</span><br><span class=\"line\">        long before90MinuteDateTime = currentDateTime - Day - 90*Minute; //(현시간) - (하루) - (30분 or 90분)</span><br><span class=\"line\"></span><br><span class=\"line\">        //로그테이블에서 1일전 데이터 찾기</span><br><span class=\"line\">        List&lt;NewWeatherStatusLog&gt; newWeatherStatusLogList = newWeatherStatusLogRepository.findAll();</span><br><span class=\"line\">        List&lt;NewWeatherStatusLog&gt; oldDataList = newWeatherStatusLogList.stream()</span><br><span class=\"line\">//                .filter(newWeatherStatusLog -&gt; newWeatherStatusLog.getRegionCode().equals(<span class=\"built_in\">integer</span>))</span><br><span class=\"line\">                //러프하게 30~90분 이전의 데이터를 검색함.(만약, 없으면 어떻게하지? 이전리스트 전부받아서 가장 최근걸로 해야되나?)</span><br><span class=\"line\">                .filter(newWeatherStatusLog -&gt; newWeatherStatusLog.getRegTime().getTime() &lt;= before30MinuteDateTime &amp;&amp; newWeatherStatusLog.getRegTime().getTime() &gt; before90MinuteDateTime)</span><br><span class=\"line\">                .sorted((o1, o2) -&gt; o2.getRegTime().compareTo(o1.getRegTime())) //order by desc(내림차순)</span><br><span class=\"line\">//                .<span class=\"built_in\">limit</span>(1) //Top N</span><br><span class=\"line\">                .collect(Collectors.toList());</span><br><span class=\"line\"></span><br><span class=\"line\">        //최신테이블에서 현재 데이터 찾기</span><br><span class=\"line\">        List&lt;NewWeatherStatusDay&gt; newWeatherStatusDayList = newWeatherStatusDayRepository.findAll();</span><br><span class=\"line\">        List&lt;NewWeatherStatusDay&gt; newDataList = newWeatherStatusDayList.stream()</span><br><span class=\"line\">//                .filter(NewWeatherStatusDay -&gt; NewWeatherStatusDay.getRegionCode().equals(<span class=\"built_in\">integer</span>))</span><br><span class=\"line\">//                .<span class=\"built_in\">limit</span>(1) //Top N</span><br><span class=\"line\">                .collect(Collectors.toList());</span><br><span class=\"line\">        //TODO 9.2 Region으로 WeatherStatusLog 테이블에서 데이터 추출(가장최근 30분~90분사이에 있는 데이터 중 가장 최근 것 1개만)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Integer <span class=\"built_in\">integer</span> : regionList)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            //TODO 9.3 newWeatherStatusLogList1에서 받은 데이터 중 온도(T1H)와 현재 가진데이터 비교</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(oldDataList.size() &gt; 0 &amp;&amp; newDataList.size() &gt; 0)&#123;</span><br><span class=\"line\">                // oldDataList에서 지역코드로 값 검색</span><br><span class=\"line\">                List&lt;NewWeatherStatusLog&gt; oldList = new ArrayList&lt;&gt;();</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(int i = 0; i &lt; oldDataList.size(); i++)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(oldDataList.get(i).getRegionCode().equals(<span class=\"built_in\">integer</span>))&#123;</span><br><span class=\"line\">                        oldList.add(oldDataList.get(i));</span><br><span class=\"line\">                        <span class=\"built_in\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                // newDataList에서 지역코드로 값 검색</span><br><span class=\"line\">                List&lt;NewWeatherStatusDay&gt; newList = new ArrayList&lt;&gt;();</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(int i = 0; i &lt; newDataList.size(); i++)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(newDataList.get(i).getRegionCode().equals(<span class=\"built_in\">integer</span>))&#123;</span><br><span class=\"line\">                        newList.add(newDataList.get(i));</span><br><span class=\"line\">                        <span class=\"built_in\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                String bf_T1H = oldList.get(0).getT1H(); //과거데이터</span><br><span class=\"line\">                String nw_T1H = newList.get(0).getT1H(); //최근데이터</span><br><span class=\"line\">                int differnce = (Integer.parseInt(bf_T1H) - Integer.parseInt(nw_T1H)); // +4 이상이면 푸시발송해야함.(푸시는 아직 구현안됨)</span><br><span class=\"line\"></span><br><span class=\"line\">                NewWeatherStatusYDay newWeatherStatusYDay = new NewWeatherStatusYDay();</span><br><span class=\"line\">                newWeatherStatusYDay.setRegionCode(<span class=\"built_in\">integer</span>);</span><br><span class=\"line\">                newWeatherStatusYDay.setState(oldList.get(0).getState());</span><br><span class=\"line\">                newWeatherStatusYDay.setCity(oldList.get(0).getCity());</span><br><span class=\"line\">                newWeatherStatusYDay.setDong(oldList.get(0).getDong());</span><br><span class=\"line\">                newWeatherStatusYDay.setTodayTemp(nw_T1H);</span><br><span class=\"line\">                newWeatherStatusYDay.setYesterdayTemp(bf_T1H);</span><br><span class=\"line\">                newWeatherStatusYDay.setDifference(Integer.toString(differnce));</span><br><span class=\"line\">                newWeatherStatusYDay.setUpdateTime(currDate);</span><br><span class=\"line\"></span><br><span class=\"line\">                //TODO 9.4 WeatherStatusYDay 전송</span><br><span class=\"line\">                newWeatherStatusYDayRepository.save(newWeatherStatusYDay);</span><br><span class=\"line\"></span><br><span class=\"line\">                //TODO 9.5 푸시발송--&gt; 현재는 구현하려면 핑거푸시를 뚫어야한다.(최신대 차장님꺼 쓸거 아니라면..)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Scheduled(cron = <span class=\"string\">\"* 30 2 * * *\"</span>) //https://javafactory.tistory.com/1386 //매일 새벽 2시 30분 90일이상 된 자료 지움.</span><br><span class=\"line\">    public void <span class=\"function\"><span class=\"title\">deleteThreeMonthExpireData</span></span>()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        //3달전의 연월일시분초 -&gt; Millisecond(Unix time)</span><br><span class=\"line\">        Calendar calendar = Calendar.getInstance(new SimpleTimeZone(0x1ee6280, <span class=\"string\">\"KST\"</span>));</span><br><span class=\"line\">//        calendar.set(Calendar.HOUR_OF_DAY, 13);</span><br><span class=\"line\">//        calendar.set(Calendar.MINUTE, 10);</span><br><span class=\"line\">//        calendar.set(Calendar.SECOND, 0);</span><br><span class=\"line\">        calendar.add(Calendar.DATE, -90);</span><br><span class=\"line\">        long calenderMillis = calendar.getTimeInMillis();</span><br><span class=\"line\"></span><br><span class=\"line\">        //TODO 1. 삭제대상 조회</span><br><span class=\"line\">        List&lt;NewWeatherStatusLog&gt; newWeatherStatusLogList = newWeatherStatusLogRepository.findAll().stream()</span><br><span class=\"line\">                .filter(newWeatherStatusLog -&gt; newWeatherStatusLog.getRegTime().getTime() &lt;= calenderMillis)</span><br><span class=\"line\">                .filter(newWeatherRegionCode -&gt; newWeatherRegionCode.getRegionCode()&lt;=20000) //구 Kweather 지역은 제외(총 250개)</span><br><span class=\"line\">                .collect(Collectors.toList());</span><br><span class=\"line\"></span><br><span class=\"line\">        newWeatherStatusLogRepository.deleteAll(newWeatherStatusLogList);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"Java-Spring-Boot-API용\"><a href=\"#Java-Spring-Boot-API용\" class=\"headerlink\" title=\"Java(Spring Boot) API용\"></a>Java(Spring Boot) API용</h3><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Autowired</span><br><span class=\"line\">    private NewWeatherRegionCodeService newWeatherRegionCodeService;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    private NewWeatherStatusDayService newWeatherStatusDayService;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    private NewWeatherStatusLogService newWeatherStatusLogService;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    private NewWeatherVersionService newWeatherVersionService;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 지역 정보 조회</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @<span class=\"built_in\">return</span></span><br><span class=\"line\">     */</span><br><span class=\"line\">    public Response <span class=\"function\"><span class=\"title\">requestRegionCode</span></span>() &#123;</span><br><span class=\"line\">        List&lt;NewWeatherRegionCode&gt; newWeatherRegionCodeList = newWeatherRegionCodeService.findAllWeatherRegionCode();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (newWeatherRegionCodeList.size() == 0) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">return</span> ErrorCode.getErrorResponse(ErrorCode.COMMON_NO_DATA);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        Response response = SuccessCode.getSuccessResponse();</span><br><span class=\"line\">        ResRegionCode resRegionCode = new ResRegionCode();</span><br><span class=\"line\">        NewWeatherVersionEntity newWeatherVersionEntity = newWeatherVersionService.findNewWeatherVersion();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (newWeatherVersionEntity != null) &#123;</span><br><span class=\"line\">            resRegionCode.setVersion(newWeatherVersionEntity.getServiceVersion());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        // state 별 그룹핑</span><br><span class=\"line\">        Map&lt;String, List&lt;NewWeatherRegionCity&gt;&gt; map = newWeatherRegionCodeList</span><br><span class=\"line\">                .stream()</span><br><span class=\"line\">                .collect(Collectors.groupingBy(</span><br><span class=\"line\">                        newWeatherRegionCode -&gt; newWeatherRegionCode.getState(),</span><br><span class=\"line\">                        LinkedHashMap::new,</span><br><span class=\"line\">                        Collectors.mapping(newWeatherRegionCode -&gt; &#123;</span><br><span class=\"line\">                                    NewWeatherRegionCity regionCity = new NewWeatherRegionCity();</span><br><span class=\"line\">                                    regionCity.setCity(newWeatherRegionCode.getCity());</span><br><span class=\"line\">                                    regionCity.setRegionCode(newWeatherRegionCode.getRegionCode());</span><br><span class=\"line\">                                    regionCity.setNx(newWeatherRegionCode.getNx());</span><br><span class=\"line\">                                    regionCity.setNy(newWeatherRegionCode.getNy());</span><br><span class=\"line\">                                    <span class=\"built_in\">return</span> regionCity;</span><br><span class=\"line\">                                &#125;,</span><br><span class=\"line\">                                Collectors.toList())));</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;NewWeatherRegionState&gt; newWeatherRegionStateList = new ArrayList&lt;&gt;();</span><br><span class=\"line\">        NewWeatherRegionState newWeatherRegionState;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String key : map.keySet()) &#123;</span><br><span class=\"line\">            newWeatherRegionState = new NewWeatherRegionState();</span><br><span class=\"line\">            newWeatherRegionState.setState(key);</span><br><span class=\"line\">            newWeatherRegionState.setCities(map.get(key));</span><br><span class=\"line\">            newWeatherRegionStateList.add(newWeatherRegionState);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        resRegionCode.setRegionCodeList(newWeatherRegionStateList);</span><br><span class=\"line\">        response.setData(resRegionCode);</span><br><span class=\"line\">        <span class=\"built_in\">return</span> response;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 코드로 기상 정보 조회</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param regionCode</span><br><span class=\"line\">     * @<span class=\"built_in\">return</span></span><br><span class=\"line\">     */</span><br><span class=\"line\">    public Response requestInfoByCode(Integer regionCode) &#123;</span><br><span class=\"line\">        NewWeatherStatusDay newWeatherStatusDay = newWeatherStatusDayService.findWeatherStatusDayById(regionCode);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (newWeatherStatusDay == null) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">return</span> ErrorCode.getErrorResponse(ErrorCode.COMMON_NO_DATA);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        Response response = SuccessCode.getSuccessResponse();</span><br><span class=\"line\">        ResWeatherInfo resWeatherInfo = new ResWeatherInfo();</span><br><span class=\"line\">        resWeatherInfo.setWeatherInfo(newWeatherStatusDay);</span><br><span class=\"line\">        response.setData(resWeatherInfo);</span><br><span class=\"line\">        <span class=\"built_in\">return</span> response;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 지역 이름으로 기상 정보 조회</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param state</span><br><span class=\"line\">     * @param city</span><br><span class=\"line\">     * @<span class=\"built_in\">return</span></span><br><span class=\"line\">     */</span><br><span class=\"line\">    public Response requestInfoByStateAndCity(String state, String city) &#123;</span><br><span class=\"line\">        // 충북, 충남, 전북, 전남, 경북, 경남 예외처리</span><br><span class=\"line\">        String fState = BusinessLogicUtils.shortNameOfStateToFullName(state);</span><br><span class=\"line\">        NewWeatherStatusDay newWeatherStatusDay = newWeatherStatusDayService.findWeatherStatusDayByStateAndCity(</span><br><span class=\"line\">                fState, city);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (newWeatherStatusDay == null) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">return</span> ErrorCode.getErrorResponse(ErrorCode.COMMON_NO_DATA);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        Response response = SuccessCode.getSuccessResponse();</span><br><span class=\"line\">        ResWeatherInfo resWeatherInfo = new ResWeatherInfo();</span><br><span class=\"line\">        resWeatherInfo.setWeatherInfo(newWeatherStatusDay);</span><br><span class=\"line\">        response.setData(resWeatherInfo);</span><br><span class=\"line\">        <span class=\"built_in\">return</span> response;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 기상 정보 이력 조회</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param reqWeatherHistory</span><br><span class=\"line\">     * @<span class=\"built_in\">return</span></span><br><span class=\"line\">     */</span><br><span class=\"line\">    public Response <span class=\"built_in\">history</span>(ReqWeatherHistory reqWeatherHistory) &#123;</span><br><span class=\"line\">        List&lt;NewWeatherStatusLog&gt; newWeatherStatusLogList = newWeatherStatusLogService.findAllWeatherStatus(</span><br><span class=\"line\">                reqWeatherHistory.getRegionCode(), reqWeatherHistory.getStartMillis(), reqWeatherHistory.getEndMillis());</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (newWeatherStatusLogList.size() == 0) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">return</span> ErrorCode.getErrorResponse(ErrorCode.COMMON_NO_DATA);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        Response response = SuccessCode.getSuccessResponse();</span><br><span class=\"line\">        response.setData(newWeatherStatusLogList);</span><br><span class=\"line\">        <span class=\"built_in\">return</span> response;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></div>\n\n\n<h3 id=\"기상청-Database-DDL\"><a href=\"#기상청-Database-DDL\" class=\"headerlink\" title=\"기상청 Database DDL\"></a>기상청 Database DDL</h3><ol>\n<li><p>Create Database</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*-------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\">Create Database</span><br><span class=\"line\">-------------------------------------------------------------------------------------------------------------------------------------------------------*/</span><br><span class=\"line\">-- CREATE SCHEMA `WEATHER` DEFAULT CHARACTER SET utf8mb4 ;</span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p>Create Table</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*-------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\">Set Using Schema</span><br><span class=\"line\">-------------------------------------------------------------------------------------------------------------------------------------------------------*/</span><br><span class=\"line\">USE WEATHER;</span><br><span class=\"line\"> </span><br><span class=\"line\">/*-------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\">Drop Table</span><br><span class=\"line\">-------------------------------------------------------------------------------------------------------------------------------------------------------*/</span><br><span class=\"line\">DROP TABLE IF EXISTS `KMA_WEATHER_STATUS_DAY`;</span><br><span class=\"line\">DROP TABLE IF EXISTS `KMA_WEATHER_STATUS_YDAY`;</span><br><span class=\"line\">DROP TABLE IF EXISTS `KMA_WEATHER_STATUS_LOG`;</span><br><span class=\"line\">DROP TABLE IF EXISTS `WEATHER_VERSION`;</span><br><span class=\"line\">DROP TABLE IF EXISTS `KMA_WEATHER_REGION_CD`;</span><br><span class=\"line\"> </span><br><span class=\"line\">DROP TABLE IF EXISTS `APP_UPDATE`;</span><br><span class=\"line\">DROP TABLE IF EXISTS `APP_DOCUMENTS`;</span><br><span class=\"line\">DROP TABLE IF EXISTS `SERVER_MAINTENANCE`;</span><br><span class=\"line\"> </span><br><span class=\"line\">/*-------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\">Create Table</span><br><span class=\"line\">-------------------------------------------------------------------------------------------------------------------------------------------------------*/</span><br><span class=\"line\">CREATE TABLE `KMA_WEATHER_REGION_CD` (</span><br><span class=\"line\">    `REGION_CODE`   int(11) NOT NULL,</span><br><span class=\"line\">    `STATE` varchar(20) NOT NULL,</span><br><span class=\"line\">    `CITY`  varchar(20) NOT NULL,</span><br><span class=\"line\">    `DONG`  varchar(20) NULL,</span><br><span class=\"line\">    `NX`    smallint(4) NOT NULL,</span><br><span class=\"line\">    `NY`    smallint(4) NOT NULL,</span><br><span class=\"line\">    `REGISTER_AT`   timestamp(3)    NOT NULL,</span><br><span class=\"line\">    `LAST_MODIFY_AT`    timestamp(3)    NOT NULL    DEFAULT CURRENT_TIMESTAMP(3)</span><br><span class=\"line\">) default charset=utf8mb4 collate=utf8mb4_general_ci;</span><br><span class=\"line\"> </span><br><span class=\"line\">CREATE TABLE `KMA_WEATHER_STATUS_DAY` (</span><br><span class=\"line\">    `REGION_CODE`   int(11) NOT NULL,</span><br><span class=\"line\">    `STATE` varchar(20) NOT NULL,</span><br><span class=\"line\">    `CITY`  varchar(20) NOT NULL,</span><br><span class=\"line\">    `DONG`  varchar(20) NOT NULL,</span><br><span class=\"line\">    `T1H`   varchar(10) NOT NULL,</span><br><span class=\"line\">    `RN1`   varchar(10) NOT NULL,</span><br><span class=\"line\">    `SKY`   varchar(10) NOT NULL,</span><br><span class=\"line\">    `UUU`   varchar(10) NOT NULL,</span><br><span class=\"line\">    `VVV`   varchar(10) NOT NULL,</span><br><span class=\"line\">    `REH`   varchar(10) NOT NULL,</span><br><span class=\"line\">    `PTY`   varchar(10) NOT NULL,</span><br><span class=\"line\">    `LGT`   varchar(10) NOT NULL,</span><br><span class=\"line\">    `VEC`   varchar(10) NOT NULL,</span><br><span class=\"line\">    `WSD`   varchar(10) NOT NULL,</span><br><span class=\"line\">    `REGISTER_AT`   timestamp(3)    NOT NULL,</span><br><span class=\"line\">    `LAST_MODIFY_AT`    timestamp(3)    NOT NULL    DEFAULT CURRENT_TIMESTAMP(3)</span><br><span class=\"line\">) default charset=utf8mb4 collate=utf8mb4_general_ci;</span><br><span class=\"line\"> </span><br><span class=\"line\">CREATE TABLE `KMA_WEATHER_STATUS_YDAY` (</span><br><span class=\"line\">    `REGION_CODE`   int(11) NOT NULL,</span><br><span class=\"line\">    `STATE` varchar(20) NOT NULL,</span><br><span class=\"line\">    `CITY`  varchar(20) NOT NULL,</span><br><span class=\"line\">    `DONG`  varchar(20) NOT NULL,</span><br><span class=\"line\">    `TODAY_TEMP`    decimal(3,1)    NULL,</span><br><span class=\"line\">    `YESTERDAY_TEMP`    decimal(3,1)    NULL,</span><br><span class=\"line\">    `TEMP_DIFF` decimal(3,1)    NULL,</span><br><span class=\"line\">    `REGISTER_AT`   timestamp(3)    NOT NULL,</span><br><span class=\"line\">    `LAST_MODIFY_AT`    timestamp(3)    NOT NULL    DEFAULT CURRENT_TIMESTAMP(3)</span><br><span class=\"line\">) default charset=utf8mb4 collate=utf8mb4_general_ci;</span><br><span class=\"line\"> </span><br><span class=\"line\">CREATE TABLE `WEATHER_VERSION` (</span><br><span class=\"line\">    `SERVICE_SEQ`   int(11) NOT NULL auto_increment COMMENT <span class=\"string\">'Auto Increment'</span>,</span><br><span class=\"line\">    `SERVICE_NAME`  varchar(100)    NULL,</span><br><span class=\"line\">    `SERVICE_VERSION`   varchar(100)    NULL,</span><br><span class=\"line\">    `DESCRIPTION`   varchar(100)    NULL,</span><br><span class=\"line\">    `REGISTER_AT`   timestamp(3)    NOT NULL,</span><br><span class=\"line\">    `LAST_MODIFY_AT`    timestamp(3)    NOT NULL    DEFAULT CURRENT_TIMESTAMP(3),</span><br><span class=\"line\">     CONSTRAINT `PK_WEATHER_VERSION` PRIMARY KEY (`SERVICE_SEQ`)</span><br><span class=\"line\">) default charset=utf8mb4 collate=utf8mb4_general_ci;</span><br><span class=\"line\"> </span><br><span class=\"line\">CREATE TABLE `KMA_WEATHER_STATUS_LOG` (</span><br><span class=\"line\">    `REGISTER_AT`   timestamp(3)    NOT NULL,</span><br><span class=\"line\">    `REGION_CODE`   int(11) NOT NULL,</span><br><span class=\"line\">    `STATE` varchar(20) NOT NULL,</span><br><span class=\"line\">    `CITY`  varchar(20) NOT NULL,</span><br><span class=\"line\">    `DONG`  varchar(20) NOT NULL,</span><br><span class=\"line\">    `T1H`   varchar(10) NOT NULL,</span><br><span class=\"line\">    `RN1`   varchar(10) NOT NULL,</span><br><span class=\"line\">    `SKY`   varchar(10) NOT NULL,</span><br><span class=\"line\">    `UUU`   varchar(10) NOT NULL,</span><br><span class=\"line\">    `VVV`   varchar(10) NOT NULL,</span><br><span class=\"line\">    `REH`   varchar(10) NOT NULL,</span><br><span class=\"line\">    `PTY`   varchar(10) NOT NULL,</span><br><span class=\"line\">    `LGT`   varchar(10) NOT NULL,</span><br><span class=\"line\">    `VEC`   varchar(10) NOT NULL,</span><br><span class=\"line\">    `WSD`   varchar(10) NOT NULL</span><br><span class=\"line\">) default charset=utf8mb4 collate=utf8mb4_general_ci;</span><br><span class=\"line\"> </span><br><span class=\"line\">CREATE TABLE `APP_UPDATE` (</span><br><span class=\"line\">    `APP_TARGET`    varchar(100)    NOT NULL,</span><br><span class=\"line\">    `APP_OS_TYPE`   tinyint(1)  NOT NULL,</span><br><span class=\"line\">    `APP_VERSION`   varchar(100)    NOT NULL,</span><br><span class=\"line\">    `FORCE_UPDATE`  tinyint(1)  NOT NULL,</span><br><span class=\"line\">    `REGISTER_AT`   timestamp(3)    NOT NULL,</span><br><span class=\"line\">    `LAST_MODIFY_AT`    timestamp(3)    NOT NULL    DEFAULT CURRENT_TIMESTAMP(3)</span><br><span class=\"line\">) default charset=utf8mb4 collate=utf8mb4_general_ci;</span><br><span class=\"line\"> </span><br><span class=\"line\">CREATE TABLE `APP_DOCUMENTS` (</span><br><span class=\"line\">    `SERVICE_CODE`  int(11) NOT NULL,</span><br><span class=\"line\">    `DOC_TYPE`  varchar(1)  NOT NULL    COMMENT <span class=\"string\">'문서 구분(P:개인정보취급방침, T:이용약관)'</span>,</span><br><span class=\"line\">    `REGISTER_AT`   timestamp(3)    NOT NULL,</span><br><span class=\"line\">    `DOC_TITLE` varchar(100)    NOT NULL,</span><br><span class=\"line\">    `DOC_CONTENTS`  text    NOT NULL    COMMENT <span class=\"string\">'앱에 표시'</span>,</span><br><span class=\"line\">    `LAST_MODIFY_AT`    timestamp(3)    NOT NULL    DEFAULT CURRENT_TIMESTAMP(3)</span><br><span class=\"line\">) default charset=utf8mb4 collate=utf8mb4_general_ci;</span><br><span class=\"line\"> </span><br><span class=\"line\">CREATE TABLE `SERVER_MAINTENANCE` (</span><br><span class=\"line\">    `SM_SEQ`    int(11) NOT NULL  auto_increment    COMMENT <span class=\"string\">'Auto Increment'</span>,</span><br><span class=\"line\">    `SM_YN` tinyint(1)  NOT NULL,</span><br><span class=\"line\">    `SM_TITLE`  varchar(100)    NULL,</span><br><span class=\"line\">    `SM_MSG`    varchar(100)    NULL,</span><br><span class=\"line\">    `SM_PERIOD` varchar(100)    NULL,</span><br><span class=\"line\">    `REGISTER_AT`   timestamp(3)    NOT NULL,</span><br><span class=\"line\">    `LAST_MODIFY_AT`    timestamp(3)    NOT NULL    DEFAULT CURRENT_TIMESTAMP(3),</span><br><span class=\"line\">    CONSTRAINT `PK_SERVER_MAINTENANCE` PRIMARY KEY (`SM_SEQ`)</span><br><span class=\"line\">) default charset=utf8mb4 collate=utf8mb4_general_ci;</span><br></pre></td></tr></table></figure></div></li>\n</ol>\n","text":"2016년 C#에 이어 Python으로 개발을 진행했었다.<br>특별한 시나리오는 없다.AWS Cloudwatch의 CRON 설정을 통해 매 시간 전국의 날씨 상황정보를 받아옴.DataBase에 저장API를 통하여 날씨 정보를 제공(추후) TAC 청정","link":"","raw":null,"photos":[],"categories":[{"name":"tip","slug":"tip","count":21,"path":"api/categories/tip.json"}],"tags":[{"name":"기상청","slug":"기상청","count":1,"path":"api/tags/기상청.json"},{"name":"Weather","slug":"Weather","count":1,"path":"api/tags/Weather.json"},{"name":"API","slug":"API","count":1,"path":"api/tags/API.json"}]}]}