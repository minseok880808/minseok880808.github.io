{"name":"python","slug":"python","count":3,"posts":[{"title":"Cloud9","slug":"Cloud9","date":"2020-05-07T06:12:11.000Z","updated":"2020-11-23T02:00:29.443Z","comments":true,"pin":null,"path":"api/articles/Cloud9.json","excerpt":"","keywords":null,"cover":"https://user-images.githubusercontent.com/62123161/81260722-8da20380-9075-11ea-9a81-3b4751bc2760.png","content":"<h2 id=\"개발환경-구축\"><a href=\"#개발환경-구축\" class=\"headerlink\" title=\"개발환경 구축\"></a>개발환경 구축</h2><p>※ 기본 개발환경</p>\n<ul>\n<li>IntelliJ</li>\n<li>Python</li>\n<li>AWS Console</li>\n</ul>\n<h2 id=\"설정\"><a href=\"#설정\" class=\"headerlink\" title=\"설정\"></a>설정</h2><h3 id=\"1-DashBoard\"><a href=\"#1-DashBoard\" class=\"headerlink\" title=\"1) DashBoard\"></a>1) DashBoard</h3><p><a href=\"https://user-images.githubusercontent.com/62123161/81260722-8da20380-9075-11ea-9a81-3b4751bc2760.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/81260722-8da20380-9075-11ea-9a81-3b4751bc2760.png\" alt=\"cloud9_01\"></a></p>\n<h3 id=\"2-Create-Environment-로-환경을-설정하자\"><a href=\"#2-Create-Environment-로-환경을-설정하자\" class=\"headerlink\" title=\"2) Create Environment 로 환경을 설정하자.\"></a>2) Create Environment 로 환경을 설정하자.</h3><p><a href=\"https://user-images.githubusercontent.com/62123161/81260721-8c70d680-9075-11ea-87dc-338df283100a.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/81260721-8c70d680-9075-11ea-87dc-338df283100a.png\" alt=\"cloud9_02\"></a><br><a href=\"https://user-images.githubusercontent.com/62123161/81260718-8aa71300-9075-11ea-9459-af1171bcec28.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/81260718-8aa71300-9075-11ea-9459-af1171bcec28.png\" alt=\"cloud9_03\"></a></p>\n<ul>\n<li>중요 : 인스턴스 용량이나 플랫폼환경은 마음대로 하면된다.<br>  But, Network Setting은 반드시 VPC를 통한 외부로 나갈 수 있도록 해주자.(날씨는 밖에서 데이터를 긁어와야 하기 때문에…)</li>\n<li>내부에서 private하게 돌릴거라면 Default VPC로 셋팅해도 아무 문제 없다.<br><a href=\"https://user-images.githubusercontent.com/62123161/81260708-87138c00-9075-11ea-8e58-201f496d3ad6.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/81260708-87138c00-9075-11ea-8e58-201f496d3ad6.png\" alt=\"cloud9_04\"></a></li>\n<li>자신없으면 기본셋팅으로 하자.</li>\n<li>셋팅 끝.</li>\n</ul>\n<h2 id=\"개발\"><a href=\"#개발\" class=\"headerlink\" title=\"개발\"></a>개발</h2><h3 id=\"1-로컬람다-생성\"><a href=\"#1-로컬람다-생성\" class=\"headerlink\" title=\"1) 로컬람다 생성\"></a>1) 로컬람다 생성</h3><p><a href=\"https://user-images.githubusercontent.com/62123161/81260705-84189b80-9075-11ea-8c13-869b2bce2ea4.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/81260705-84189b80-9075-11ea-8c13-869b2bce2ea4.png\" alt=\"cloud9_05\"></a></p>\n<ul>\n<li>로컬람다를 선택해서 개발을 진행해야 초기 환경이 자동으로 잘 잡힌다.</li>\n</ul>\n<h3 id=\"2-Import-할-라이브러리-추가\"><a href=\"#2-Import-할-라이브러리-추가\" class=\"headerlink\" title=\"2) Import 할 라이브러리 추가\"></a>2) Import 할 라이브러리 추가</h3><p><a href=\"https://user-images.githubusercontent.com/62123161/81260738-91358a80-9075-11ea-9a6b-d3340b584040.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/81260738-91358a80-9075-11ea-9a6b-d3340b584040.png\" alt=\"cloud9_06\"></a></p>\n<ul>\n<li><p>결과화면에서 보면 알겠지만 나는 우선 Boto3, pymysql, requests를 사용할 예정이다. </p>\n</li>\n<li><p>나머지 json이나 datetime등은 기본적으로 제공해주는 것으로 보인다.(내가 라이브러리 import하지 않았거든..)</p>\n<ul>\n<li>pymysql<ul>\n<li>python -m pip install –target=./ pymysql</li>\n</ul>\n</li>\n<li>requests<ul>\n<li>python -m pip install –target=./ requests</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>아, 참고로 위 1,2번 명령어는 소스내 바로 상위 폴더를 오른쪽버튼 클릭하여 “Open Terminal Here(Alt+L)” 을 누른뒤 입력한다. </p>\n</li>\n<li><p>알아서 깔아주니 그냥 입력하고 두어라.</p>\n</li>\n<li><p>다 되고나면 위 그림의 왼쪽 Explorer 창처럼 수많은 라이브러리가 등장하게 된다. (물론 소스까지 넣었고, 빌드해서 돌렸으니까 추가된것도 있고..)</p>\n</li>\n</ul>\n<h2 id=\"배포\"><a href=\"#배포\" class=\"headerlink\" title=\"배포\"></a>배포</h2><p><a href=\"https://user-images.githubusercontent.com/62123161/81260733-909cf400-9075-11ea-87cf-742f1549c702.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/81260733-909cf400-9075-11ea-87cf-742f1549c702.png\" alt=\"cloud9_07\"></a></p>\n<ul>\n<li>간단하게 돌려봤고, 올려도 되겠다 싶은 생각이 들때 위 사진처럼 Local Function을 Remote Function으로 배포해준다. (여담이지만, 이미 local Function으로 만들때 자동으로 Remote가 생성이 된다. 아무래도 Sync에 많은 신경을 쓴듯한 느낌이 듬.)</li>\n</ul>\n<h2 id=\"소스\"><a href=\"#소스\" class=\"headerlink\" title=\"소스\"></a>소스</h2><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><figcaption><span>Weather</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import boto3</span><br><span class=\"line\">import json</span><br><span class=\"line\">import pymysql</span><br><span class=\"line\">import requests</span><br><span class=\"line\">from datetime import datetime, timedelta</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># MySQL 접속정보</span></span><br><span class=\"line\">REGION = <span class=\"string\">'REGION'</span></span><br><span class=\"line\"></span><br><span class=\"line\">rds_host = <span class=\"string\">\"RDS_ENDPOINT\"</span></span><br><span class=\"line\">name = <span class=\"string\">\"ID\"</span></span><br><span class=\"line\">password = <span class=\"string\">\"PW\"</span></span><br><span class=\"line\">db_name = <span class=\"string\">\"DB_NAME\"</span></span><br><span class=\"line\">conn = pymysql.connect(rds_host, user=name, passwd=password, db=db_name, connect_timeout=5, charset=<span class=\"string\">'utf8'</span>,</span><br><span class=\"line\">                       cursorclass=pymysql.cursors.DictCursor)</span><br><span class=\"line\">                        </span><br><span class=\"line\"> </span><br><span class=\"line\">def lambda_handler(event, context):</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        <span class=\"comment\"># <span class=\"doctag\">TODO:</span>  1. MySQL에서 Region관련정보 받아오기</span></span><br><span class=\"line\">        result = [] <span class=\"comment\">#list</span></span><br><span class=\"line\">        dic = &#123;&#125;    <span class=\"comment\">#dictionary</span></span><br><span class=\"line\">        mysqlList = [] <span class=\"comment\">#list</span></span><br><span class=\"line\">        with conn.cursor(pymysql.cursors.DictCursor) as cur:</span><br><span class=\"line\">            cur.execute(<span class=\"string\">\"\"</span><span class=\"string\">\"select * from NEW_WEATHER_REGION_CD\"</span><span class=\"string\">\"\"</span>)</span><br><span class=\"line\">            conn.commit()</span><br><span class=\"line\">     </span><br><span class=\"line\">            <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> cur.fetchall():</span><br><span class=\"line\">                result.append(row)</span><br><span class=\"line\">     </span><br><span class=\"line\">            <span class=\"keyword\">for</span> jsons <span class=\"keyword\">in</span> result:</span><br><span class=\"line\">                loaded_json = json.loads(json.dumps(jsons, indent=4, sort_keys=True, default=str, ensure_ascii=False))</span><br><span class=\"line\">                <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> loaded_json:</span><br><span class=\"line\">                    dic[x]=loaded_json[x]</span><br><span class=\"line\">                grid_x = dic.get(<span class=\"string\">'GRID_X'</span>)</span><br><span class=\"line\">                grid_y = dic.get(<span class=\"string\">'GRID_Y'</span>)</span><br><span class=\"line\">     </span><br><span class=\"line\">                <span class=\"comment\"># <span class=\"doctag\">TODO:</span> 2. URL셋팅후 데이터 받기(초단기 예보)</span></span><br><span class=\"line\">                URL = <span class=\"string\">'http://apis.data.go.kr/1360000/VilageFcstInfoService/getUltraSrtFcst?serviceKey=SERVICE_KEY'</span></span><br><span class=\"line\">                params = &#123;</span><br><span class=\"line\">                    <span class=\"string\">'numOfRows'</span>: <span class=\"string\">'1000'</span>,</span><br><span class=\"line\">                    <span class=\"string\">'pageNo'</span>:<span class=\"string\">'1'</span>,</span><br><span class=\"line\">                    <span class=\"string\">'dataType'</span>:<span class=\"string\">'JSON'</span>,</span><br><span class=\"line\">                    <span class=\"string\">'base_date'</span>:datetime.today().strftime(<span class=\"string\">\"%Y%m%d\"</span>),</span><br><span class=\"line\">                    <span class=\"string\">'base_time'</span>:(datetime.today() + timedelta(hours=-1)).strftime(<span class=\"string\">\"%H00\"</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                res = requests.get(URL, params=params)</span><br><span class=\"line\">                URL = res.url</span><br><span class=\"line\">                <span class=\"comment\"># x, y 좌표 설정</span></span><br><span class=\"line\">                regionParam = &#123;</span><br><span class=\"line\">                    <span class=\"string\">'nx'</span>:grid_x, <span class=\"string\">'ny'</span>:grid_y</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                res = requests.get(URL, params=regionParam) <span class=\"comment\"># 실제 데이터 받기.</span></span><br><span class=\"line\">     </span><br><span class=\"line\">                <span class=\"comment\"># <span class=\"doctag\">TODO:</span> 3 데이터가 정상적으로 들어와있는지 확인하기(우선은 Header의 정보 중 ResultCode로 판단)</span></span><br><span class=\"line\">                resultCode = <span class=\"string\">\"\"</span></span><br><span class=\"line\">                resultMsg = <span class=\"string\">\"\"</span></span><br><span class=\"line\">                dict = json.loads(json.dumps(res.text, indent=4, sort_keys=True, default=str, ensure_ascii=False))</span><br><span class=\"line\">                dict = json.loads(dict)</span><br><span class=\"line\">                <span class=\"keyword\">for</span> resultJson <span class=\"keyword\">in</span> dict[<span class=\"string\">'response'</span>][<span class=\"string\">'header'</span>]:</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(resultJson == <span class=\"string\">\"resultCode\"</span>):</span><br><span class=\"line\">                        resultCode = dict[<span class=\"string\">'response'</span>][<span class=\"string\">'header'</span>][<span class=\"string\">'resultCode'</span>]</span><br><span class=\"line\">                    <span class=\"keyword\">elif</span>(resultJson == <span class=\"string\">\"resultMsg\"</span>):</span><br><span class=\"line\">                        resultMsg = dict[<span class=\"string\">'response'</span>][<span class=\"string\">'header'</span>][<span class=\"string\">'resultMsg'</span>]</span><br><span class=\"line\">     </span><br><span class=\"line\">                <span class=\"keyword\">if</span>(resultCode != <span class=\"string\">\"00\"</span>): <span class=\"comment\"># 00이 정상이고, 나머지가 에러다... 로그로 남기면 뭐가 좋지않을까 해서 남겨본다.</span></span><br><span class=\"line\">                    <span class=\"built_in\">print</span>(<span class=\"string\">\"ERROR_CD : \"</span> + resultCode + <span class=\"string\">\"   /   \"</span> + <span class=\"string\">\"ERROR_MSG : \"</span> + resultMsg)</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    dictionary = json.loads(json.dumps(res.text, sort_keys=True, default=str, ensure_ascii=False))</span><br><span class=\"line\">                    <span class=\"comment\"># 왜 dictionary가 2번이나 호출됫냐면... python특성인지 모르겠으나 형변환이 없으므로 강제 형변환을 위해 사용했음.</span></span><br><span class=\"line\">                    dictionary = json.loads(dictionary)</span><br><span class=\"line\">                    <span class=\"comment\"># 날씨item별 순차 읽기</span></span><br><span class=\"line\">                    weatherDic = &#123;&#125;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> weather <span class=\"keyword\">in</span> dictionary[<span class=\"string\">'response'</span>][<span class=\"string\">'body'</span>][<span class=\"string\">'items'</span>][<span class=\"string\">'item'</span>]:</span><br><span class=\"line\">                        <span class=\"comment\"># 넣고자 하는 시간 체크(현재시간이어야 한다)</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(weather[<span class=\"string\">'fcstTime'</span>] == (datetime.today().strftime(<span class=\"string\">\"%H00\"</span>))):</span><br><span class=\"line\">                            <span class=\"keyword\">if</span>(weather[<span class=\"string\">'category'</span>] == <span class=\"string\">\"LGT\"</span>): <span class=\"comment\"># 낙뢰</span></span><br><span class=\"line\">                                weatherDic[weather[<span class=\"string\">'category'</span>]]=weather[<span class=\"string\">\"fcstValue\"</span>]</span><br><span class=\"line\">     </span><br><span class=\"line\">                            <span class=\"keyword\">elif</span> (weather[<span class=\"string\">'category'</span>] == <span class=\"string\">\"PTY\"</span>): <span class=\"comment\"># 강수형태</span></span><br><span class=\"line\">                                weatherDic[weather[<span class=\"string\">'category'</span>]]=weather[<span class=\"string\">\"fcstValue\"</span>]</span><br><span class=\"line\">     </span><br><span class=\"line\">                            <span class=\"keyword\">elif</span> (weather[<span class=\"string\">'category'</span>] == <span class=\"string\">\"RN1\"</span>): <span class=\"comment\"># 1시간 강수량</span></span><br><span class=\"line\">                                weatherDic[weather[<span class=\"string\">'category'</span>]]=weather[<span class=\"string\">\"fcstValue\"</span>]</span><br><span class=\"line\">     </span><br><span class=\"line\">                            <span class=\"keyword\">elif</span> (weather[<span class=\"string\">'category'</span>] == <span class=\"string\">\"SKY\"</span>): <span class=\"comment\"># 하늘상태</span></span><br><span class=\"line\">                                weatherDic[weather[<span class=\"string\">'category'</span>]]=weather[<span class=\"string\">\"fcstValue\"</span>]</span><br><span class=\"line\">     </span><br><span class=\"line\">                            <span class=\"keyword\">elif</span> (weather[<span class=\"string\">'category'</span>] == <span class=\"string\">\"T1H\"</span>):<span class=\"comment\"># 기온</span></span><br><span class=\"line\">                                weatherDic[weather[<span class=\"string\">'category'</span>]]=weather[<span class=\"string\">\"fcstValue\"</span>]</span><br><span class=\"line\">     </span><br><span class=\"line\">                            <span class=\"keyword\">elif</span> (weather[<span class=\"string\">'category'</span>] == <span class=\"string\">\"REH\"</span>): <span class=\"comment\"># 습도</span></span><br><span class=\"line\">                                weatherDic[weather[<span class=\"string\">'category'</span>]]=weather[<span class=\"string\">\"fcstValue\"</span>]</span><br><span class=\"line\">     </span><br><span class=\"line\">                            <span class=\"keyword\">elif</span> (weather[<span class=\"string\">'category'</span>] == <span class=\"string\">\"UUU\"</span>): <span class=\"comment\"># 동서바람성분</span></span><br><span class=\"line\">                                weatherDic[weather[<span class=\"string\">'category'</span>]]=weather[<span class=\"string\">\"fcstValue\"</span>]</span><br><span class=\"line\">     </span><br><span class=\"line\">                            <span class=\"keyword\">elif</span> (weather[<span class=\"string\">'category'</span>] == <span class=\"string\">\"VVV\"</span>): <span class=\"comment\"># 남북바람성분</span></span><br><span class=\"line\">                                weatherDic[weather[<span class=\"string\">'category'</span>]]=weather[<span class=\"string\">\"fcstValue\"</span>]</span><br><span class=\"line\">     </span><br><span class=\"line\">                            <span class=\"keyword\">elif</span> (weather[<span class=\"string\">'category'</span>] == <span class=\"string\">\"VEC\"</span>): <span class=\"comment\"># 풍향</span></span><br><span class=\"line\">                                weatherDic[weather[<span class=\"string\">'category'</span>]]=weather[<span class=\"string\">\"fcstValue\"</span>]</span><br><span class=\"line\">     </span><br><span class=\"line\">                            <span class=\"keyword\">elif</span> (weather[<span class=\"string\">'category'</span>] == <span class=\"string\">\"WSD\"</span>): <span class=\"comment\"># 풍속</span></span><br><span class=\"line\">                                weatherDic[weather[<span class=\"string\">'category'</span>]]=weather[<span class=\"string\">\"fcstValue\"</span>]</span><br><span class=\"line\">     </span><br><span class=\"line\">                    <span class=\"comment\"># <span class=\"doctag\">TODO:</span> 4. weatherDic에 저장되어 있는 값을 MySQL 에 저장하기 위해 List에 저장</span></span><br><span class=\"line\">                    string = dic.get(<span class=\"string\">'REGION_CD'</span>), dic.get(<span class=\"string\">'STATE_NAME'</span>), dic.get(<span class=\"string\">'CITY_NAME'</span>), weatherDic.get(<span class=\"string\">'SKY'</span>), weatherDic.get(<span class=\"string\">'T1H'</span>), weatherDic.get(<span class=\"string\">'REH'</span>), weatherDic.get(<span class=\"string\">'RN1'</span>), weatherDic.get(<span class=\"string\">'PTY'</span>), weatherDic.get(<span class=\"string\">'VEC'</span>), weatherDic.get(<span class=\"string\">'WSD'</span>)</span><br><span class=\"line\">                    mysqlList.append(string)</span><br><span class=\"line\">     </span><br><span class=\"line\">            cur.close()</span><br><span class=\"line\">     </span><br><span class=\"line\">        <span class=\"comment\"># <span class=\"doctag\">TODO:</span> 5. 기존에 저장된 MySQL의 날씨값 삭제.</span></span><br><span class=\"line\">        with conn.cursor(pymysql.cursors.DictCursor) as cur:</span><br><span class=\"line\">            query = <span class=\"string\">\"TRUNCATE NEW_WEATHER_STATUS;\"</span></span><br><span class=\"line\">            cur.execute(query)</span><br><span class=\"line\">            conn.commit()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"-------------\"</span>)</span><br><span class=\"line\">     </span><br><span class=\"line\">        <span class=\"comment\"># <span class=\"doctag\">TODO:</span> 6. 저장된 최종 List를 MySQL에 저장.</span></span><br><span class=\"line\">        with conn.cursor(pymysql.cursors.DictCursor) as cur:</span><br><span class=\"line\">            <span class=\"comment\"># 아무리 DB의 시스템시간을 바꾸어도 UTC+0인 시간만 오기에 어쩔 수 없이 \"DATE_ADD(NOW(), INTERVAL 9 HOUR)\" 를 넣었음.</span></span><br><span class=\"line\">            <span class=\"comment\"># 좋은 방법이 아니므로 다른 방법을 찾아야 하지 않을까? 지금 일단은 돌아감...</span></span><br><span class=\"line\">            query = <span class=\"string\">\"INSERT INTO NEW_WEATHER_STATUS (REGION_CD, STATE_NAME, CITY_NAME, ICON, TEMP, HUMI, RAINFALL, SNOWFALL, WINDDIR, WINDSPEED, REGISTER_AT) VALUES (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,DATE_ADD(NOW(), INTERVAL 9 HOUR));\"</span></span><br><span class=\"line\">            cur.executemany(query, mysqlList)</span><br><span class=\"line\">            conn.commit()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"-------------\"</span>)</span><br><span class=\"line\">     </span><br><span class=\"line\">    except ImportError as exc:</span><br><span class=\"line\">        raise ImportError(</span><br><span class=\"line\">            <span class=\"string\">\"Couldn't import Django. Are you sure it's installed and \"</span></span><br><span class=\"line\">            <span class=\"string\">\"available on your PYTHONPATH environment variable? Did you \"</span></span><br><span class=\"line\">            <span class=\"string\">\"forget to activate a virtual environment?\"</span></span><br><span class=\"line\">        ) from exc</span><br></pre></td></tr></table></figure></div>\n<ul>\n<li>소스는 주석도 넣어놨고, 굳이 이정도까지 설명해야 하나 싶을정도여서, 따로 설명하지 않겠다.</li>\n</ul>\n<h2 id=\"결과화면\"><a href=\"#결과화면\" class=\"headerlink\" title=\"결과화면\"></a>결과화면</h2><p><a href=\"https://user-images.githubusercontent.com/62123161/81513300-6f345480-9362-11ea-96fb-fad4d3532da1.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/81513300-6f345480-9362-11ea-96fb-fad4d3532da1.png\" alt=\"cloud9_08\"></a><br><a href=\"https://user-images.githubusercontent.com/62123161/81513298-6d6a9100-9362-11ea-880e-c24f94df6ecb.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/81513298-6d6a9100-9362-11ea-880e-c24f94df6ecb.png\" alt=\"cloud9_09\"></a></p>\n","text":"개발환경 구축※ 기본 개발환경IntelliJPythonAWS Console설정1) DashBoard [Figure] ","link":"","raw":null,"photos":[],"categories":[{"name":"aws","slug":"aws","count":12,"path":"api/categories/aws.json"}],"tags":[{"name":"AWS","slug":"AWS","count":14,"path":"api/tags/AWS.json"},{"name":"Cloud9","slug":"Cloud9","count":1,"path":"api/tags/Cloud9.json"},{"name":"Web","slug":"Web","count":1,"path":"api/tags/Web.json"},{"name":"Debugger","slug":"Debugger","count":1,"path":"api/tags/Debugger.json"},{"name":"python","slug":"python","count":3,"path":"api/tags/python.json"}]},{"title":"Lambda Python ColdStart Test","slug":"LambdaPythonColdStart","date":"2020-05-06T23:38:19.000Z","updated":"2020-11-23T01:31:25.287Z","comments":true,"pin":null,"path":"api/articles/LambdaPythonColdStart.json","excerpt":"","keywords":null,"cover":"https://user-images.githubusercontent.com/62123161/81248123-a9e27800-9056-11ea-9be2-3d469e5aca52.png","content":"<h2 id=\"개발환경-구축\"><a href=\"#개발환경-구축\" class=\"headerlink\" title=\"개발환경 구축\"></a>개발환경 구축</h2><p>※ 기본 개발환경</p>\n<ul>\n<li>IntelliJ</li>\n<li>Python</li>\n<li>AWS Console</li>\n</ul>\n<h2 id=\"Lambda-Python-설명\"><a href=\"#Lambda-Python-설명\" class=\"headerlink\" title=\"Lambda Python 설명\"></a>Lambda Python 설명</h2><ul>\n<li>팀장님께서 조사하신 내용을 토대로 Java가 콜드스타트에서 많은 시간을 소모한다는 점에 착안하여 Python으로 시도해보기로 함.</li>\n<li>Node로도 Python과 큰 차이없는 성능을 보여주었던 만큼 기대하고 테스트를 진행함.</li>\n</ul>\n<h2 id=\"설정\"><a href=\"#설정\" class=\"headerlink\" title=\"설정\"></a>설정</h2><ol>\n<li>pymysql 라이브러리를 Python 코드에 넣어야 함.</li>\n<li>가능하면 Layer에 넎어주는 편이 좋다.</li>\n</ol>\n<h3 id=\"개발\"><a href=\"#개발\" class=\"headerlink\" title=\"개발\"></a>개발</h3><h4 id=\"1-Lambda-접속\"><a href=\"#1-Lambda-접속\" class=\"headerlink\" title=\"1) Lambda 접속\"></a>1) Lambda 접속</h4><p><a href=\"https://user-images.githubusercontent.com/62123161/81248123-a9e27800-9056-11ea-9be2-3d469e5aca52.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/81248123-a9e27800-9056-11ea-9be2-3d469e5aca52.png\" alt=\"lambdapython_01\"></a></p>\n<h4 id=\"2-Create-Function-클릭-및-IAM권한까지-해서-함수생성\"><a href=\"#2-Create-Function-클릭-및-IAM권한까지-해서-함수생성\" class=\"headerlink\" title=\"2) Create Function 클릭 및 IAM권한까지 해서 함수생성\"></a>2) Create Function 클릭 및 IAM권한까지 해서 함수생성</h4><p><a href=\"https://user-images.githubusercontent.com/62123161/81248121-a949e180-9056-11ea-8148-4a19eb45aa0e.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/81248121-a949e180-9056-11ea-8148-4a19eb45aa0e.png\" alt=\"lambdapython_02\"></a></p>\n<h4 id=\"3-Layer이라는-곳이-있음\"><a href=\"#3-Layer이라는-곳이-있음\" class=\"headerlink\" title=\"3) Layer이라는 곳이 있음.\"></a>3) Layer이라는 곳이 있음.</h4><ul>\n<li>자주쓰는 라이브러리들을 여기에 등록해서 땡겨쓰는건데, 필요하면 이 부분은 따로 설명하는 부분을 만들어야 할 듯.</li>\n<li>기본개념은 람다 밑에 계층을 만들어서 계층 내의 라이브러리를 저장해서 필요할때마다 import 해서 쓰는 개념.</li>\n<li>(참고로 아직 제대로 써보는 방법도 못찾아봤음)<br><a href=\"https://user-images.githubusercontent.com/62123161/81248120-a7801e00-9056-11ea-8709-a15ce1cbda8b.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/81248120-a7801e00-9056-11ea-8709-a15ce1cbda8b.png\" alt=\"lambdapython_03\"></a></li>\n</ul>\n<h4 id=\"4-Code-entry-type을-Upload-zip-file로-변경하고-밑의-Upload를-선택하여-위에-다운받은-파일을-넣는다\"><a href=\"#4-Code-entry-type을-Upload-zip-file로-변경하고-밑의-Upload를-선택하여-위에-다운받은-파일을-넣는다\" class=\"headerlink\" title=\"4) Code entry type을 Upload zip file로 변경하고 밑의 Upload를 선택하여 위에 다운받은 파일을 넣는다.\"></a>4) Code entry type을 Upload zip file로 변경하고 밑의 Upload를 선택하여 위에 다운받은 파일을 넣는다.</h4><p><a href=\"https://user-images.githubusercontent.com/62123161/81248125-ab13a500-9056-11ea-8c95-ae25e76cf132.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/81248125-ab13a500-9056-11ea-8c95-ae25e76cf132.png\" alt=\"lambdapython_04\"></a></p>\n<ul>\n<li>(중요!!) 넣고 반드시 우측상단 Save노란색 버튼을 눌러줘야 한다. 안누르면 그냥 아무것도 안한상태가 됨.</li>\n</ul>\n<h4 id=\"5-저장-후-Code-entry-type을-Edit-code-inline으로-만들면-아래와-같은-화면이-나오고-코드를-직접-수정할-수-있다\"><a href=\"#5-저장-후-Code-entry-type을-Edit-code-inline으로-만들면-아래와-같은-화면이-나오고-코드를-직접-수정할-수-있다\" class=\"headerlink\" title=\"5) 저장 후 Code entry type을 Edit code inline으로 만들면 아래와 같은 화면이 나오고, 코드를 직접 수정할 수 있다.\"></a>5) 저장 후 Code entry type을 Edit code inline으로 만들면 아래와 같은 화면이 나오고, 코드를 직접 수정할 수 있다.</h4><p><a href=\"https://user-images.githubusercontent.com/62123161/81248124-aa7b0e80-9056-11ea-9d30-8a7fef821dea.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/81248124-aa7b0e80-9056-11ea-9d30-8a7fef821dea.png\" alt=\"lambdapython_05\"></a></p>\n<ul>\n<li>(중요!!) Handler에 main.main 으로 넣고 세이브한다.</li>\n</ul>\n<h4 id=\"6-우측상단의-테스트케이스를-만들어서-테스트를-돌리면된다\"><a href=\"#6-우측상단의-테스트케이스를-만들어서-테스트를-돌리면된다\" class=\"headerlink\" title=\"6) 우측상단의 테스트케이스를 만들어서 테스트를 돌리면된다.\"></a>6) 우측상단의 테스트케이스를 만들어서 테스트를 돌리면된다.</h4><h3 id=\"끝\"><a href=\"#끝\" class=\"headerlink\" title=\"-끝-\"></a>-끝-</h3><h3 id=\"소스\"><a href=\"#소스\" class=\"headerlink\" title=\"소스\"></a>소스</h3><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><figcaption><span>Full Source</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># A lambda function to interact with AWS RDS MySQL</span></span><br><span class=\"line\">import json</span><br><span class=\"line\">import pymysql</span><br><span class=\"line\">import sys</span><br><span class=\"line\"> </span><br><span class=\"line\">REGION = <span class=\"string\">'ap-northeast-2'</span></span><br><span class=\"line\"> </span><br><span class=\"line\">rds_host  = <span class=\"string\">\"RDS_ENDPOINT\"</span></span><br><span class=\"line\">name = <span class=\"string\">\"ID\"</span></span><br><span class=\"line\">password = <span class=\"string\">\"PW\"</span></span><br><span class=\"line\">db_name = <span class=\"string\">\"DATABASE_NAME\"</span></span><br><span class=\"line\"> </span><br><span class=\"line\">def save_events(event):</span><br><span class=\"line\">    <span class=\"string\">\"\"</span><span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">    This function fetches content from mysql RDS instance</span></span><br><span class=\"line\"><span class=\"string\">    \"</span><span class=\"string\">\"\"</span></span><br><span class=\"line\">    result = []</span><br><span class=\"line\">    conn = pymysql.connect(rds_host, user=name, passwd=password, db=db_name, connect_timeout=5)</span><br><span class=\"line\">    with conn.cursor() as cur:</span><br><span class=\"line\">        <span class=\"comment\"># cur.execute(\"\"\"insert into test (id, name) values( %s, '%s')\"\"\" % (event['id'], event['name']))</span></span><br><span class=\"line\">        cur.execute(<span class=\"string\">\"\"</span><span class=\"string\">\"select * from [TABLE_NAME]\"</span><span class=\"string\">\"\"</span>)</span><br><span class=\"line\">        conn.commit()</span><br><span class=\"line\">        cur.close()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> cur:</span><br><span class=\"line\">            result.append(list(row))</span><br><span class=\"line\">        <span class=\"comment\"># print \"Data from RDS...\"</span></span><br><span class=\"line\">        <span class=\"built_in\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"string\">'statusCode'</span>: 200,</span><br><span class=\"line\">        <span class=\"string\">'body'</span>: json.dumps(result)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">        <span class=\"comment\"># print result</span></span><br><span class=\"line\"> </span><br><span class=\"line\">def main(event, context):</span><br><span class=\"line\">    save_events(event)</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"테스트-결과\"><a href=\"#테스트-결과\" class=\"headerlink\" title=\"테스트 결과\"></a>테스트 결과</h3><h4 id=\"1-자바의-Cold-Start-이후-지속호출\"><a href=\"#1-자바의-Cold-Start-이후-지속호출\" class=\"headerlink\" title=\"1) 자바의 Cold Start 이후 지속호출\"></a>1) 자바의 Cold Start 이후 지속호출</h4><p>REPORT RequestId: e48ab981-212a-41c9-96e2-ed07b3f50d8d Duration: 2624.96 ms Billed Duration: 2700 ms Memory Size: 2048 MB Max Memory Used: 157 MB Init Duration: 314.42 ms<br>REPORT RequestId: 25754b1d-1eb5-4e47-b281-8f7f25f86b0e Duration: 2.34 ms Billed Duration: 100 ms Memory Size: 2048 MB Max Memory Used: 157 MB<br>REPORT RequestId: 8e4b7664-f8bd-43bb-a93a-1ce762ff9e08 Duration: 8.53 ms Billed Duration: 100 ms Memory Size: 2048 MB Max Memory Used: 157 MB<br>REPORT RequestId: c75c69c3-c25d-4ca1-a89f-b47568db2b32 Duration: 2.35 ms Billed Duration: 100 ms Memory Size: 2048 MB Max Memory Used: 157 MB<br>REPORT RequestId: a8579b00-6799-4805-b20e-2bda8233f3bf Duration: 2.51 ms Billed Duration: 100 ms Memory Size: 2048 MB Max Memory Used: 157 MB</p>\n<h4 id=\"2-Python의-Cold-Start-이후-지속호출\"><a href=\"#2-Python의-Cold-Start-이후-지속호출\" class=\"headerlink\" title=\"2) Python의 Cold Start 이후 지속호출\"></a>2) Python의 Cold Start 이후 지속호출</h4><p>REPORT RequestId: d9e08910-f520-46f1-998d-dc464ab906d4 Duration: 89.94 ms Billed Duration: 100 ms Memory Size: 128 MB Max Memory Used: 52 MB Init Duration: 178.14 ms<br>REPORT RequestId: 3b38dbe2-50ef-4fa0-914f-fbe8f537fdda Duration: 56.36 ms Billed Duration: 100 ms Memory Size: 128 MB Max Memory Used: 53 MB<br>REPORT RequestId: f9943532-58b0-422e-b040-0e71a7f38837 Duration: 57.04 ms Billed Duration: 100 ms Memory Size: 128 MB Max Memory Used: 52 MB<br>REPORT RequestId: b53b4659-db4a-44c6-aca4-aacca7897648 Duration: 90.57 ms Billed Duration: 100 ms Memory Size: 128 MB Max Memory Used: 52 MB Init Duration: 163.13 ms<br>REPORT RequestId: ef27297d-b738-44eb-b75f-a180ff58abc1 Duration: 187.70 ms Billed Duration: 200 ms Memory Size: 128 MB Max Memory Used: 52 MB Init Duration: 164.85 ms</p>\n<h3 id=\"리포팅\"><a href=\"#리포팅\" class=\"headerlink\" title=\"리포팅\"></a>리포팅</h3><ol>\n<li>파이선 특징</li>\n</ol>\n<ul>\n<li>라이브러리를 모두 직접 등록해줘야 하는 단점…&lt;Maven, Gradle이 그립다.&gt;</li>\n<li>파일을 직접 넣어줘야하고, 지원되는 라이브러리가 생각보다 별로없다.</li>\n<li>디버깅이 어렵다.(이건 툴 문제)</li>\n</ul>\n<ol start=\"2\">\n<li>람다의 특성</li>\n</ol>\n<ul>\n<li>참고로 람다는 복사&lt;똑같은 람다 이름만바꿔서 생성&gt;가 안된다. 할거라면 새로 만들어야 한다. AWS정책임.</li>\n<li>Layer이라는 개념을 스크립트언어에서는 반드시 써줘야 하는데, 내생각보다 좀 좋은 기능으로 보인다.</li>\n</ul>\n","text":"개발환경 구축※ 기본 개발환경IntelliJPythonAWS ConsoleLambda Python 설명팀장님께서 조사하신 내용을 토대로 Java가 콜드스타트에서 많은 시간을 소모한다는 점에 착안하여 Python으로 시도해보기로 함.Node로도 Pyth","link":"","raw":null,"photos":[],"categories":[{"name":"aws","slug":"aws","count":12,"path":"api/categories/aws.json"}],"tags":[{"name":"AWS","slug":"AWS","count":14,"path":"api/tags/AWS.json"},{"name":"python","slug":"python","count":3,"path":"api/tags/python.json"},{"name":"cold start","slug":"cold-start","count":1,"path":"api/tags/cold-start.json"},{"name":"hot start","slug":"hot-start","count":1,"path":"api/tags/hot-start.json"}]},{"title":"Python 개발을 위한 IntelliJ 설정","slug":"LambdaPythonIntelliJ","date":"2020-05-11T05:26:08.000Z","updated":"2020-11-23T01:31:25.288Z","comments":true,"pin":null,"path":"api/articles/LambdaPythonIntelliJ.json","excerpt":"","keywords":null,"cover":"https://user-images.githubusercontent.com/62123161/81527423-2ba70e00-9395-11ea-919a-eb4abd661e5d.png","content":"<h2 id=\"개발환경-구축\"><a href=\"#개발환경-구축\" class=\"headerlink\" title=\"개발환경 구축\"></a>개발환경 구축</h2><p>※ 기본 개발환경</p>\n<ul>\n<li>IntelliJ, Django</li>\n<li>Python</li>\n<li>AWS Console, SAM(Serverless Application Model), RDS(MySQL)</li>\n</ul>\n<h2 id=\"개요\"><a href=\"#개요\" class=\"headerlink\" title=\"개요\"></a>개요</h2><ul>\n<li>파이썬 개발을 진행하고자 하면, 설정이 50%다. </li>\n<li>설정이 꼬여버리면 어떻게든 개발이 진행되지 않으므로, 설정에 유의하자. (돈이 상관없다면 Cloud9을 사용하는 것도 좋다.)</li>\n</ul>\n<h2 id=\"설정\"><a href=\"#설정\" class=\"headerlink\" title=\"설정\"></a>설정</h2><h3 id=\"IntelliJ-설치\"><a href=\"#IntelliJ-설치\" class=\"headerlink\" title=\"IntelliJ 설치\"></a>IntelliJ 설치</h3><ul>\n<li>원하는 버전을 설치해도 상관없겠지만, 1년씩 정기구독하면서 업데이트를 지원받는 IntelliJ IDEA Ultimate 를 사용하려 하였다.</li>\n<li>물론 Visual Studio도 지원을 해준다. 난 개인적으로 IDE는 IntelliJ 를 사용하고자 하였고, 이를 여기에 기록으로 남긴다.<br><a href=\"https://user-images.githubusercontent.com/62123161/81527423-2ba70e00-9395-11ea-919a-eb4abd661e5d.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/81527423-2ba70e00-9395-11ea-919a-eb4abd661e5d.png\" alt=\"LambdaPythonIntelliJ_01\"></a><br>IntelliJ에서는 아래와 같은 링크에서 보고 따라하기만 하면된다. Plugin 설치임.<br>(<a href=\"https://whitefrost-developer.tistory.com/7\" target=\"_blank\" rel=\"noopener\">https://whitefrost-developer.tistory.com/7</a>)</li>\n</ul>\n<h3 id=\"Python-설치\"><a href=\"#Python-설치\" class=\"headerlink\" title=\"Python 설치\"></a>Python 설치</h3><ul>\n<li>작성일자까지 확인해본 바로는 현재 Python은 3.8.2버전이 마지막 버전이다. </li>\n<li>설치방법은 아래 참고하자.<ol>\n<li><a href=\"http://www.python.org에서\" target=\"_blank\" rel=\"noopener\">www.python.org에서</a> 다운로드 메뉴 - Python 3.5이상 선택해서 다운로드</li>\n<li>설치 과정에서 Add Python 3.5 to Path 반드시 체크</li>\n<li>설치 확인 윈도우키 + R을 눌러서 나오는 창에 powershell이라고 치고, 확인을 눌러서 powershell실행<br><a href=\"https://user-images.githubusercontent.com/62123161/81527422-2b0e7780-9395-11ea-9f50-d801c3d11225.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/81527422-2b0e7780-9395-11ea-9f50-d801c3d11225.png\" alt=\"LambdaPythonIntelliJ_02\"></a></li>\n</ol>\n</li>\n</ul>\n<h3 id=\"SAM-설치\"><a href=\"#SAM-설치\" class=\"headerlink\" title=\"SAM 설치\"></a>SAM 설치</h3><p><a href=\"https://github.com/awslabs/aws-sam-cli/releases\" target=\"_blank\" rel=\"noopener\">https://github.com/awslabs/aws-sam-cli/releases</a></p>\n<h3 id=\"RDS-및-Dynamo-설정\"><a href=\"#RDS-및-Dynamo-설정\" class=\"headerlink\" title=\"RDS 및 Dynamo 설정\"></a>RDS 및 Dynamo 설정</h3><p>MySQL 설정 : <a href=\"https://docs.aws.amazon.com/ko_kr/AmazonRDS/latest/UserGuide/CHAP_MySQL.html\" target=\"_blank\" rel=\"noopener\">https://docs.aws.amazon.com/ko_kr/AmazonRDS/latest/UserGuide/CHAP_MySQL.html</a><br>DynamoDB 설정 : <a href=\"https://aws.amazon.com/ko/dynamodb/getting-started/\" target=\"_blank\" rel=\"noopener\">https://aws.amazon.com/ko/dynamodb/getting-started/</a></p>\n<h4 id=\"MySQL-기타설정-Optional\"><a href=\"#MySQL-기타설정-Optional\" class=\"headerlink\" title=\"MySQL 기타설정(Optional)\"></a>MySQL 기타설정(Optional)</h4><ul>\n<li>우선 기본적으로 ap-northeast-2(Seoul)에 설정하면, 당연히 SysDate()나 Now() 함수를 호출하여 현재 한국의 시간을 받아올 수 있을 줄 알았다.</li>\n<li>말도 안되겠지만, 시간을 조회하면 UTC+0이 들어온다. (그리니치 천문대 : 영국)</li>\n<li>그래서 아래와 같은 세팅을 해주어야 한다.<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><figcaption><span>Timezone 체크 쿼리(SQL)</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT @@global.time_zone, @@session.time_zone;  --현재 시스템과 세션에 설정된 타임존 보기</span><br><span class=\"line\">SET time_zone = <span class=\"string\">'Asia/Seoul'</span>; --현재 시스템의 타임존 바꿔버리기.</span><br></pre></td></tr></table></figure></div>\n위 내용은 가장 간단해서 쓴거고.. 다른방법도 있다.(어차피 RDS환경에서 다른방법은 답이없을듯.)<br>쓸거면 여기 링크 참고(<a href=\"https://jwkim96.tistory.com/23\" target=\"_blank\" rel=\"noopener\">https://jwkim96.tistory.com/23</a>)</li>\n</ul>\n<h3 id=\"Django-설치-Optional\"><a href=\"#Django-설치-Optional\" class=\"headerlink\" title=\"Django 설치(Optional)\"></a>Django 설치(Optional)</h3><p>공식 Document : <a href=\"https://docs.djangoproject.com/en/3.0/topics/install/\" target=\"_blank\" rel=\"noopener\">https://docs.djangoproject.com/en/3.0/topics/install/</a><br>문서보고 설치하면 된다.</p>\n<h2 id=\"개발\"><a href=\"#개발\" class=\"headerlink\" title=\"개발\"></a>개발</h2><p>모든 설정은 끝났다. 이제 개발만 하면되겟지만, 디버깅 모드에 관해서만 남기고 글을 마무리한다.<br>위 내용 중에 IntelliJ 설정이 완료가 되었다면 아래와 같은 화면을 볼 수 있을 것이다.</p>\n<h3 id=\"IntelliJ-프로젝트-생성\"><a href=\"#IntelliJ-프로젝트-생성\" class=\"headerlink\" title=\"IntelliJ 프로젝트 생성\"></a>IntelliJ 프로젝트 생성</h3><p><a href=\"https://user-images.githubusercontent.com/62123161/81527416-2a75e100-9395-11ea-815d-fabac97f59f4.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/81527416-2a75e100-9395-11ea-815d-fabac97f59f4.png\" alt=\"LambdaPythonIntelliJ_03\"></a></p>\n<ol>\n<li>Django를 선택해준다.<ul>\n<li>SQL Support 선택하지 않은 이유 : 보통 우리는 대부분의 서비스를 DB와 같이 쓴다. 하지만, 당장 pymysql만을 사용하겠다라고 하면 체크할 필요는 없을 것으로 판단이 되며,</li>\n<li>필요한 항목이 있을 경우 그때그때 import 해서 쓰면 된다는 생각이 들었기에 따로 체크하지 않는다.(물론 체크해서 사용해도 상관없다. 그냥 프로그램이 조금더 무거워질수도 있겠지..큰차이는 없다)</li>\n</ul>\n</li>\n<li>Next 클릭</li>\n<li>기존의 Flash Project Template가 없을것이다. 그냥 Next.</li>\n<li>프로젝트의 이름과 경로등이 정확히 들어갔는지 확인하고 Finish.</li>\n</ol>\n<h3 id=\"IntelliJ-프로젝트-디버깅\"><a href=\"#IntelliJ-프로젝트-디버깅\" class=\"headerlink\" title=\"IntelliJ 프로젝트 디버깅\"></a>IntelliJ 프로젝트 디버깅</h3><p><img src=\"https://user-images.githubusercontent.com/62123161/81527426-2c3fa480-9395-11ea-990d-e56f2c82150d.png\" alt=\"LambdaPythonIntelliJ_04\"></p>\n<ul>\n<li>이전 과정을 거치고 나면 위와 같은 화면을 마주하게 될 것이다.</li>\n<li>manage.py가 기본 Default main소스라고 보면 된다.</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/62123161/81527425-2c3fa480-9395-11ea-9063-c2786f3f9c3b.png\" alt=\"LambdaPythonIntelliJ_05\"></p>\n<ul>\n<li>디버깅이 잘 적용되는걸 볼 수 있다.</li>\n<li>저 os관련된 라이브러리는 크게 필요없으니 지워도된다. 알아서 정리해서 써보시길..</li>\n</ul>\n","text":"개발환경 구축※ 기본 개발환경IntelliJ, DjangoPythonAWS Console, SAM(Serverless Application Model), RDS(MySQL)개요파이썬 개발을 진행하고자 하면, 설정이 50%다. 설정이 꼬여버리면 어떻게든","link":"","raw":null,"photos":[],"categories":[{"name":"aws","slug":"aws","count":12,"path":"api/categories/aws.json"}],"tags":[{"name":"AWS","slug":"AWS","count":14,"path":"api/tags/AWS.json"},{"name":"python","slug":"python","count":3,"path":"api/tags/python.json"},{"name":"IntelliJ","slug":"IntelliJ","count":1,"path":"api/tags/IntelliJ.json"}]}]}