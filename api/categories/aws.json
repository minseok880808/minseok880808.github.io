{"name":"AWS","slug":"AWS","count":3,"posts":[{"title":"DocumentDB(MongoDB) Setting","slug":"DocumentDB-MongoDB-Setting","date":"2020-12-18T05:36:38.000Z","updated":"2021-02-09T03:51:34.842Z","comments":true,"pin":null,"path":"api/articles/DocumentDB-MongoDB-Setting.json","excerpt":"","keywords":null,"cover":"https://user-images.githubusercontent.com/56995911/107305217-e6e80900-6ac5-11eb-9b86-081655884a9a.png","content":"<h2 id=\"서문\"><a href=\"#서문\" class=\"headerlink\" title=\"서문\"></a>서문</h2><ul>\n<li>시작에 앞서 DocumentDB를 사용하게 된 사유는 MongoDB &amp; AWS DocumentDB 에 나와있듯이 1000만 Row 이하의 데이터의 경우 DocumentDB가 훨씬 이득이었다.</li>\n<li>이득인 사유<br>1) 1000만 row 이하로 사용하는 서비스가 대부분임.<br>2) 자동 백업, 복구 스토리지 제공(Snapshot)<br>3) 인스턴스 &amp; 클러스터 관리 거의 불필요(설정과 관리는 다른개념)</li>\n<li>툴은 AWS에서도 가이드로 제공해주는 툴 중에 요즘 뜨고 있는 툴이라고 생각되어 Studio 3T를 사용.</li>\n<li>최근 정정(2021-01-20) : Studio 3T는 무료가 아니라 유료 라이센스이며, 간단한 정도라면 MongoDB에서 무료로 제공중인 Compass를 사용하는 것이 좋음.<br><a href=\"https://user-images.githubusercontent.com/56995911/107305217-e6e80900-6ac5-11eb-9b86-081655884a9a.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107305217-e6e80900-6ac5-11eb-9b86-081655884a9a.png\" alt=\"image\"></a></li>\n</ul>\n<h2 id=\"본문\"><a href=\"#본문\" class=\"headerlink\" title=\"본문\"></a>본문</h2><h3 id=\"1-EC2-설정-설치\"><a href=\"#1-EC2-설정-설치\" class=\"headerlink\" title=\"1. EC2 설정(설치)\"></a>1. EC2 설정(설치)</h3><ul>\n<li>깔끔하게 Linux로 가보자.</li>\n<li>(제목은 DocumentDB면서 왜 갑자기 EC2를 설치하냐고 물어볼 수 있는데, Windows가 있어야 카카오톡을 깔 수 있듯이 OS가 있어야한다는 개념으로 생각하면 편하다.)</li>\n</ul>\n<h4 id=\"1-메인화면에서-EC2생성-클릭\"><a href=\"#1-메인화면에서-EC2생성-클릭\" class=\"headerlink\" title=\"1) 메인화면에서 EC2생성 클릭\"></a>1) 메인화면에서 EC2생성 클릭</h4><p><a href=\"https://user-images.githubusercontent.com/56995911/107311500-cd4cbe80-6ad1-11eb-8657-60dd6818a3f9.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107311500-cd4cbe80-6ad1-11eb-8657-60dd6818a3f9.png\" alt=\"image\"></a></p>\n<h4 id=\"2-EC2엔진-설정\"><a href=\"#2-EC2엔진-설정\" class=\"headerlink\" title=\"2) EC2엔진 설정\"></a>2) EC2엔진 설정</h4><p><a href=\"https://user-images.githubusercontent.com/56995911/107311634-0d13a600-6ad2-11eb-8d85-aefd481a5fb0.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107311634-0d13a600-6ad2-11eb-8d85-aefd481a5fb0.png\" alt=\"image\"></a></p>\n<ul>\n<li>EC2의 수많은 OS를 선택할 수 있었지만, 난 스펙은 사실 잘 모른다. 잘 돌아가기만 하면 된다고 생각하기에…</li>\n<li>따라서, 가이드와 동일하게 Linux 2 AMI를 사용하기로 한다.</li>\n<li>뒤로 t3.micro를 씀으로 일단은 저렴한 걸로 생성해보고자 한다.</li>\n<li>이후, [Review and Launch] 버튼 클릭해서 총 7단계인 복잡한놈을 빨리 끝내기로 한다.</li>\n</ul>\n<h4 id=\"3-EC2그룹설정\"><a href=\"#3-EC2그룹설정\" class=\"headerlink\" title=\"3) EC2그룹설정\"></a>3) EC2그룹설정</h4><p><a href=\"https://user-images.githubusercontent.com/56995911/107311743-38969080-6ad2-11eb-8ba1-42c26d3bf022.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107311743-38969080-6ad2-11eb-8ba1-42c26d3bf022.png\" alt=\"image\"></a></p>\n<ul>\n<li><p>다른건 모르겠고, 일단 7단계로 건너뛰어 왔다. </p>\n</li>\n<li><p>AWS에서 가장 중요하게 생각하는 권한과 보안중의 한 축을 담당하는 Security Group을 설정하자.(아래 사진처럼 이름넣고 Source만 수정해주면 끝난다)<br><a href=\"https://user-images.githubusercontent.com/56995911/107311775-4ba96080-6ad2-11eb-99f7-e888ad89c100.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107311775-4ba96080-6ad2-11eb-99f7-e888ad89c100.png\" alt=\"image\"></a></p>\n</li>\n<li><p>설정이 끝났으면 [Review and Launch]버튼을 가차없이 누른다.</p>\n</li>\n</ul>\n<h4 id=\"4-검토-및-설치\"><a href=\"#4-검토-및-설치\" class=\"headerlink\" title=\"4) 검토 및 설치\"></a>4) 검토 및 설치</h4><p><a href=\"https://user-images.githubusercontent.com/56995911/107311827-6c71b600-6ad2-11eb-8576-7d2551c1f053.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107311827-6c71b600-6ad2-11eb-8576-7d2551c1f053.png\" alt=\"image\"></a></p>\n<ul>\n<li>설정한 내용들을 확인한 후 [Launch]버튼을 클릭한다.<br><img src=\"https://user-images.githubusercontent.com/56995911/107311894-975c0a00-6ad2-11eb-8ad1-bb52fc3eecba.png\" alt=\"image\"></li>\n<li>시간이 좀 흐른 뒤에 위와 같이 하나의 Linux 서버가 만들어 진 것을 확인할 수 있다.</li>\n</ul>\n<h3 id=\"2-보안그룹-생성\"><a href=\"#2-보안그룹-생성\" class=\"headerlink\" title=\"2. 보안그룹 생성\"></a>2. 보안그룹 생성</h3><ul>\n<li>자, 이제 클러스터(DocumentDB)와 연결할 보안그룹을 만들어보자.</li>\n<li>참고로, 아까 EC2만들면서 만든 보안그룹은 EC2에서 사용하는 보안그룹이다. (착각하지말자)</li>\n</ul>\n<p><a href=\"https://user-images.githubusercontent.com/56995911/107311951-b78bc900-6ad2-11eb-91dd-f32bf4b6eaa1.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107311951-b78bc900-6ad2-11eb-91dd-f32bf4b6eaa1.png\" alt=\"image\"></a></p>\n<ul>\n<li>보안그룹은 별내용없다. </li>\n<li>[이름입력] → [Custom TCP : 27017] → source 설정 하면 끝난다. 그림으로 대체한다.<br><a href=\"https://user-images.githubusercontent.com/56995911/107311981-ca060280-6ad2-11eb-883d-0d92ec57f2bd.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107311981-ca060280-6ad2-11eb-883d-0d92ec57f2bd.png\" alt=\"image\"></a></li>\n</ul>\n<h3 id=\"3-Document-Cluster-생성\"><a href=\"#3-Document-Cluster-생성\" class=\"headerlink\" title=\"3. Document Cluster 생성\"></a>3. Document Cluster 생성</h3><ul>\n<li>EC2인지 뭔지를 지나 결국 목적지에 왔지만, 이제 본게임이라고 생각할 것이다.</li>\n<li>하지만, 걱정말자. 너무 쉽다.</li>\n</ul>\n<h4 id=\"1-클러스터-생성\"><a href=\"#1-클러스터-생성\" class=\"headerlink\" title=\"1) 클러스터 생성\"></a>1) 클러스터 생성</h4><p><a href=\"https://user-images.githubusercontent.com/56995911/107312022-e144f000-6ad2-11eb-8ea9-269406a851ed.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107312022-e144f000-6ad2-11eb-8ea9-269406a851ed.png\" alt=\"image\"></a></p>\n<ul>\n<li>가이드에 맞춰 검은색으로 칠해진 모든 곳을 입력하자.</li>\n<li>테스트용도라면 Instance class 와 Number of instance 는 가급적 가장 낮은 사양으로 했으면 한다. </li>\n</ul>\n<h4 id=\"2-추가설정\"><a href=\"#2-추가설정\" class=\"headerlink\" title=\"2) 추가설정\"></a>2) 추가설정</h4><p><img src=\"https://user-images.githubusercontent.com/56995911/107312076-f6ba1a00-6ad2-11eb-9c8c-629e249a503e.png\" alt=\"image\"></p>\n<ul>\n<li>버튼클릭하면 어마어마한 옵션설정이 나온다.</li>\n</ul>\n<h5 id=\"i-Network-Settings\"><a href=\"#i-Network-Settings\" class=\"headerlink\" title=\"i) Network Settings\"></a>i) Network Settings</h5><p><a href=\"https://user-images.githubusercontent.com/56995911/107312104-076a9000-6ad3-11eb-98f7-ab6722bccc2e.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107312104-076a9000-6ad3-11eb-98f7-ab6722bccc2e.png\" alt=\"image\"></a></p>\n<ul>\n<li>아까 2번에서 생성했던 보안그룹이 생각나는가? 그걸 여기 쓰면 된다. </li>\n<li>다시말하지만, 처음 EC2에서 보안그룹을 생성했던건 EC2에서 끝난다. 2번에서 생성한 것은 Cluster에서 사용하기 위한 용도이다.</li>\n</ul>\n<h5 id=\"ii-Cluster-Options\"><a href=\"#ii-Cluster-Options\" class=\"headerlink\" title=\"ii) Cluster Options\"></a>ii) Cluster Options</h5><p><a href=\"https://user-images.githubusercontent.com/56995911/107312141-1c472380-6ad3-11eb-923f-1b00dcfdb91f.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107312141-1c472380-6ad3-11eb-923f-1b00dcfdb91f.png\" alt=\"image\"></a></p>\n<ul>\n<li>이 Cluster Parameter Group 셋팅법은 따로 아래에서 설명하겠다.</li>\n<li>사용하는 이유는, 우린 툴을 쓸거니까…….툴에 맞춘 사양이 들어가야 하니까…..</li>\n</ul>\n<h5 id=\"iii-Etc\"><a href=\"#iii-Etc\" class=\"headerlink\" title=\"iii) Etc\"></a>iii) Etc</h5><p><a href=\"https://user-images.githubusercontent.com/56995911/107312202-3123b700-6ad3-11eb-98bb-4de25042a2f4.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107312202-3123b700-6ad3-11eb-98bb-4de25042a2f4.png\" alt=\"image\"></a><br><a href=\"https://user-images.githubusercontent.com/56995911/107312217-3a148880-6ad3-11eb-97d0-23789966611e.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107312217-3a148880-6ad3-11eb-97d0-23789966611e.png\" alt=\"image\"></a></p>\n<ul>\n<li>기타 등등이라고 명칭한 이유는, 기본값을 쓸거기때문에..</li>\n<li>태그는 설정해주면 검색하기 좋을 것이고, Protection은 클러스터를 보호해주는 역할이다.<br>나중에 체크를 풀어줄 수도 있지만, 인스턴스와 클러스터를 지우지 못하게 방어막을 한번 걸어주는 것이다. </li>\n<li>테스트이므로 풀어주어도 상관없다.</li>\n</ul>\n<h5 id=\"iv-클러스터-확인\"><a href=\"#iv-클러스터-확인\" class=\"headerlink\" title=\"iv) 클러스터 확인\"></a>iv) 클러스터 확인</h5><p><a href=\"https://user-images.githubusercontent.com/56995911/107312253-4c8ec200-6ad3-11eb-88a0-7978bd757975.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107312253-4c8ec200-6ad3-11eb-88a0-7978bd757975.png\" alt=\"image\"></a></p>\n<h3 id=\"4-EC2-내에서-클러스터-연결-및-설정\"><a href=\"#4-EC2-내에서-클러스터-연결-및-설정\" class=\"headerlink\" title=\"4. EC2 내에서 클러스터 연결 및 설정\"></a>4. EC2 내에서 클러스터 연결 및 설정</h3><p><a href=\"https://user-images.githubusercontent.com/56995911/107312284-5ca6a180-6ad3-11eb-8e9c-ede43d055fcb.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107312284-5ca6a180-6ad3-11eb-8e9c-ede43d055fcb.png\" alt=\"image\"></a></p>\n<ul>\n<li><p>인스턴스를 선택하고 Connect하면 웹페이지로 linux서버를 들어갈 수 있는 Terminal이 생긴다.<br><a href=\"https://user-images.githubusercontent.com/56995911/107312307-6c25ea80-6ad3-11eb-9d9e-a04e810fb022.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107312307-6c25ea80-6ad3-11eb-9d9e-a04e810fb022.png\" alt=\"image\"></a></p>\n</li>\n<li><p>To install the mongo shell on Amazon Linux</p>\n</li>\n<li><p>1)Create the repository file. At the command line of your EC2 instance, execute the follow command:</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"[mongodb-org-3.6] \\nname=MongoDB Repository\\nbaseurl=https://repo.mongodb.org/yum/amazon/2013.03/mongodb-org/3.6/x86_64/\\ngpgcheck=1 \\nenabled=1 \\ngpgkey=https://www.mongodb.org/static/pgp/server-3.6.asc\"</span> | sudo tee /etc/yum.repos.d/mongodb-org-3.6.repo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"[mongodb-org-4.0] \\nname=MongoDB Repository\\nbaseurl=https://repo.mongodb.org/yum/amazon/2013.03/mongodb-org/4.0/x86_64/\\ngpgcheck=1 \\nenabled=1 \\ngpgkey=https://www.mongodb.org/static/pgp/server-4.0.asc\"</span> | sudo tee /etc/yum.repos.d/mongodb-org-4.0.repo</span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p>2)When it is complete, install the mongo shell by executing the following command:</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install -y mongodb-org-shell</span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p>3)Download the CA certificate for Amazon DocumentDB</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://s3.amazonaws.com/rds-downloads/rds-combined-ca-bundle.pem</span><br></pre></td></tr></table></figure></div>\n\n\n</li>\n</ul>\n<ul>\n<li>아래 사진의 [Connect to this cluster with the mongo shell] 의 값을 Linux Terminal 환경에서 동작시키면 비밀번호 설정이 나온다<br><a href=\"https://user-images.githubusercontent.com/56995911/107312451-cc1c9100-6ad3-11eb-9781-23f81607c345.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107312451-cc1c9100-6ad3-11eb-9781-23f81607c345.png\" alt=\"image\"></a></li>\n<li>사용할 비밀번호를 입력하면  rs0:PRIMARY&gt; 라는Prompt가 나오면서 각종 명령어를 쳐볼 수 있다.</li>\n<li>[Connect to this cluster with an application] 값은 아래 5번에서 사용한다.</li>\n</ul>\n<h3 id=\"5-Studio-3T-에서-사용\"><a href=\"#5-Studio-3T-에서-사용\" class=\"headerlink\" title=\"5. Studio 3T 에서 사용\"></a>5. Studio 3T 에서 사용</h3><ul>\n<li><p>여기서 한참 헤멘거같다.</p>\n</li>\n<li><p>연결이 되지 않으니 EC2인스턴스를 생성했다 지웠다를 반복한듯.<br><a href=\"https://user-images.githubusercontent.com/56995911/107312498-eeaeaa00-6ad3-11eb-8587-ad2874b069a1.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107312498-eeaeaa00-6ad3-11eb-8587-ad2874b069a1.png\" alt=\"image\"></a></p>\n</li>\n<li><p>메인화면에서 Connect를 누르면 위와 같은 창이 나오는데 [From URI…] 를 선택하고 [Connect to this cluster with an application] 에 나와있는 값에서 비밀번호를 수정하고 확인을 누른다.</p>\n</li>\n<li><p>이후 화면들을 아래와 같이 동일하게 설정해주면 된다.<br><a href=\"https://user-images.githubusercontent.com/56995911/107312526-0128e380-6ad4-11eb-8f6e-be11ad2d7a2e.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107312526-0128e380-6ad4-11eb-8f6e-be11ad2d7a2e.png\" alt=\"image\"></a><br><a href=\"https://user-images.githubusercontent.com/56995911/107312540-04bc6a80-6ad4-11eb-8418-997a0a3b1ca2.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107312540-04bc6a80-6ad4-11eb-8418-997a0a3b1ca2.png\" alt=\"image\"></a><br><a href=\"https://user-images.githubusercontent.com/56995911/107312547-0a19b500-6ad4-11eb-8ccc-b3b216131a14.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107312547-0a19b500-6ad4-11eb-8ccc-b3b216131a14.png\" alt=\"image\"></a></p>\n</li>\n<li><p>3번째 사진의 값은 아래와 같다<br>1) SSH Address는 1번에서 생성한 EC2의 [Public IPv4 address]<br>2) SSH User name 도 1번에서 생성할 때 사용자 이름으로 넣었던 이름.<br>3) SSH Auth Mode는 EC2생성시 PK생성한 값이 있으므로 Private Key로 설정<br>4) Private Key는 해당 서버 *.pem 파일을 넣음.</p>\n</li>\n</ul>\n<h2 id=\"결론\"><a href=\"#결론\" class=\"headerlink\" title=\"결론\"></a>결론</h2><ul>\n<li>이로써, 구성을 끝냈다.<br><a href=\"https://user-images.githubusercontent.com/56995911/107312613-29184700-6ad4-11eb-9269-0916ed69f9b5.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107312613-29184700-6ad4-11eb-9269-0916ed69f9b5.png\" alt=\"image\"></a></li>\n<li>보안적으로 좀 아쉬운 부분은 있지만, 테스트 상으로는 크게 문제가 되지 않을 것으로 보인다.</li>\n</ul>\n<h2 id=\"별첨\"><a href=\"#별첨\" class=\"headerlink\" title=\"별첨\"></a>별첨</h2><h3 id=\"1-Parameter-Group-설정\"><a href=\"#1-Parameter-Group-설정\" class=\"headerlink\" title=\"1.Parameter Group 설정\"></a>1.Parameter Group 설정</h3><p><a href=\"https://user-images.githubusercontent.com/56995911/107312664-44835200-6ad4-11eb-98a6-7a8e5bb20709.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107312664-44835200-6ad4-11eb-98a6-7a8e5bb20709.png\" alt=\"image\"></a></p>\n<h4 id=\"1-Create\"><a href=\"#1-Create\" class=\"headerlink\" title=\"1) Create\"></a>1) Create</h4><p><a href=\"https://user-images.githubusercontent.com/56995911/107312695-536a0480-6ad4-11eb-934a-8d23d2c4ecca.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107312695-536a0480-6ad4-11eb-934a-8d23d2c4ecca.png\" alt=\"image\"></a></p>\n<h4 id=\"2-Setting\"><a href=\"#2-Setting\" class=\"headerlink\" title=\"2) Setting\"></a>2) Setting</h4><p><a href=\"https://user-images.githubusercontent.com/56995911/107312715-61b82080-6ad4-11eb-878e-a5bf796b1719.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107312715-61b82080-6ad4-11eb-878e-a5bf796b1719.png\" alt=\"image\"></a></p>\n<ul>\n<li>tls와 ttl_monitor를 Disable로 맞춰주어야 한다고 한다.</li>\n<li>이유는 나도 공부를 해서 찾아본 뒤 적도록 하겠다.(암호화 통신을 설정하면 어떻게되지?)</li>\n</ul>\n<h3 id=\"2-관련자료\"><a href=\"#2-관련자료\" class=\"headerlink\" title=\"2. 관련자료\"></a>2. 관련자료</h3><p><a href=\"https://docs.aws.amazon.com/documentdb/latest/developerguide/connect-ec2.html#connect-ec2.security-group\" target=\"_blank\" rel=\"noopener\">https://docs.aws.amazon.com/documentdb/latest/developerguide/connect-ec2.html#connect-ec2.security-group</a><br><a href=\"https://docs.aws.amazon.com/ko_kr/documentdb/latest/developerguide/studio3t.html\" target=\"_blank\" rel=\"noopener\">https://docs.aws.amazon.com/ko_kr/documentdb/latest/developerguide/studio3t.html</a><br><a href=\"https://stackoverflow.com/questions/54384253/aws-documentdb-with-robo-3t-robomongo\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/54384253/aws-documentdb-with-robo-3t-robomongo</a><br><a href=\"https://geekflare.com/nosql-client/\" target=\"_blank\" rel=\"noopener\">https://geekflare.com/nosql-client/</a><br><a href=\"https://aws.amazon.com/ko/blogs/database/part-1-getting-started-with-amazon-documentdb-using-amazon-ec2/\" target=\"_blank\" rel=\"noopener\">https://aws.amazon.com/ko/blogs/database/part-1-getting-started-with-amazon-documentdb-using-amazon-ec2/</a></p>\n","text":"서문시작에 앞서 DocumentDB를 사용하게 된 사유는 MongoDB &amp; AWS DocumentDB 에 나와있듯이 1000만 Row 이하의 데이터의 경우 DocumentDB가 훨씬 이득이었다.이득인 사유<br>1) 1000만 row 이하로 사","link":"","raw":null,"photos":[],"categories":[{"name":"AWS","slug":"AWS","count":3,"path":"api/categories/AWS.json"}],"tags":[{"name":"Document DB","slug":"Document-DB","count":3,"path":"api/tags/Document-DB.json"},{"name":"Mongo","slug":"Mongo","count":3,"path":"api/tags/Mongo.json"}]},{"title":"MongoDB Compass Guide","slug":"MongoDB-Compass-Guide","date":"2021-02-09T05:29:14.000Z","updated":"2021-02-09T05:48:25.666Z","comments":true,"pin":null,"path":"api/articles/MongoDB-Compass-Guide.json","excerpt":"","keywords":null,"cover":"https://user-images.githubusercontent.com/56995911/107320066-515b7200-6ae3-11eb-8007-1266bbad72a9.png","content":"<h2 id=\"서문\"><a href=\"#서문\" class=\"headerlink\" title=\"서문\"></a>서문</h2><p>Document DB 사용을 원활하게 하기 위하여 MongoDB Compass를 활용해보기로 한다.<br>Studio 3T와 달리 무료이며 MongoDB에서 기본적으로 제공하는 툴이다.(<a href=\"https://www.mongodb.com/try/download/compass\" target=\"_blank\" rel=\"noopener\">https://www.mongodb.com/try/download/compass</a>)<br>연결설정방법을 가이드한다.<br>Collection을 생성하고 index 작업 및 CRUD 작업에 대하여 툴에서 사용하는 방법을 가이드한다.<br>모든 가이드의 출처는 <a href=\"https://docs.mongodb.com/compass/master/를\" target=\"_blank\" rel=\"noopener\">https://docs.mongodb.com/compass/master/를</a> 참고하여 작성하였다.</p>\n<h2 id=\"본문\"><a href=\"#본문\" class=\"headerlink\" title=\"본문\"></a>본문</h2><h3 id=\"1-시작\"><a href=\"#1-시작\" class=\"headerlink\" title=\"1. 시작\"></a>1. 시작</h3><p><a href=\"https://user-images.githubusercontent.com/56995911/107320066-515b7200-6ae3-11eb-8007-1266bbad72a9.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107320066-515b7200-6ae3-11eb-8007-1266bbad72a9.png\" alt=\"image\"></a></p>\n<ul>\n<li>URI를 통해 접속하는 방법이 Default로 나온다.</li>\n<li>URI는 앞서 설명한 Studio 3T에서 나오긴한다.</li>\n<li>URI를 쉽게 추출하고 싶다면 Studio 3T를 사용해야하며, 반드시 비밀번호 포함과 각종옵션 추가 체크를 해주어야 한다.</li>\n</ul>\n<h3 id=\"2-Connection-Setting-Step-by-Step\"><a href=\"#2-Connection-Setting-Step-by-Step\" class=\"headerlink\" title=\"2. Connection Setting(Step by Step)\"></a>2. Connection Setting(Step by Step)</h3><h4 id=\"1-Studio-3T-URI를-활용하는-방법\"><a href=\"#1-Studio-3T-URI를-활용하는-방법\" class=\"headerlink\" title=\"1) Studio 3T URI를 활용하는 방법\"></a>1) Studio 3T URI를 활용하는 방법</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><figcaption><span>3T URI</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongodb:&#x2F;&#x2F;administrator:##KDnetworkER1@docdb-2021-01-08-06-18-46.cluster-ccjhfbfchw3b.ap-northeast-2.docdb.amazonaws.com:27017&#x2F;admin?authSource&#x3D;admin&amp;connectTimeoutMS&#x3D;10000&amp;readPreference&#x3D;secondaryPreferred&amp;authMechanism&#x3D;SCRAM-SHA-1&amp;appname&#x3D;MongoDB%20Compass&amp;ssl&#x3D;true</span><br></pre></td></tr></table></figure></div>\n\n<h5 id=\"i-MongoDB-홈페이지에-나와있듯이-구조는-아래와-같다-https-docs-mongodb-com-manual-reference-connection-string\"><a href=\"#i-MongoDB-홈페이지에-나와있듯이-구조는-아래와-같다-https-docs-mongodb-com-manual-reference-connection-string\" class=\"headerlink\" title=\"i) MongoDB 홈페이지에 나와있듯이, 구조는 아래와 같다.(https://docs.mongodb.com/manual/reference/connection-string/)\"></a>i) MongoDB 홈페이지에 나와있듯이, 구조는 아래와 같다.(<a href=\"https://docs.mongodb.com/manual/reference/connection-string/\" target=\"_blank\" rel=\"noopener\">https://docs.mongodb.com/manual/reference/connection-string/</a>)</h5><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongodb://[username:password@]host1[:port1][,...hostN[:portN]][/[defaultauthdb][?options]]</span><br></pre></td></tr></table></figure></div>\n\n<h5 id=\"ii-완성된-URI를-Connect-위의-TextBox에-삽입한다\"><a href=\"#ii-완성된-URI를-Connect-위의-TextBox에-삽입한다\" class=\"headerlink\" title=\"ii) 완성된 URI를 Connect 위의 TextBox에 삽입한다.\"></a>ii) 완성된 URI를 Connect 위의 TextBox에 삽입한다.</h5><h5 id=\"iii-화면상단에-Fill-in-connection-fields-individually-를-선택한-뒤-상세-옵션설정을-한다\"><a href=\"#iii-화면상단에-Fill-in-connection-fields-individually-를-선택한-뒤-상세-옵션설정을-한다\" class=\"headerlink\" title=\"iii) 화면상단에 Fill in connection fields individually 를 선택한 뒤 상세 옵션설정을 한다.\"></a>iii) 화면상단에 Fill in connection fields individually 를 선택한 뒤 상세 옵션설정을 한다.</h5><h5 id=\"iv-URI를-통해-기본적인-Connection-옵션은-이미-채워져있음을-확인할-수-있다\"><a href=\"#iv-URI를-통해-기본적인-Connection-옵션은-이미-채워져있음을-확인할-수-있다\" class=\"headerlink\" title=\"iv) URI를 통해 기본적인 Connection 옵션은 이미 채워져있음을 확인할 수 있다.\"></a>iv) URI를 통해 기본적인 Connection 옵션은 이미 채워져있음을 확인할 수 있다.</h5><p><a href=\"https://user-images.githubusercontent.com/56995911/107320190-97b0d100-6ae3-11eb-8067-803c25ea900d.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107320190-97b0d100-6ae3-11eb-8067-803c25ea900d.png\" alt=\"image\"></a></p>\n<h5 id=\"v-SSL-SSH-설정부가-제일-중요하다-아래와-같이-설정해주도록-한다-SSH-Passphrase는-설정하지-않아도-된다\"><a href=\"#v-SSL-SSH-설정부가-제일-중요하다-아래와-같이-설정해주도록-한다-SSH-Passphrase는-설정하지-않아도-된다\" class=\"headerlink\" title=\"v) SSL, SSH 설정부가 제일 중요하다. 아래와 같이 설정해주도록 한다. (SSH Passphrase는 설정하지 않아도 된다)\"></a>v) SSL, SSH 설정부가 제일 중요하다. 아래와 같이 설정해주도록 한다. (SSH Passphrase는 설정하지 않아도 된다)</h5><p><a href=\"https://user-images.githubusercontent.com/56995911/107320230-aa2b0a80-6ae3-11eb-9b83-150b7c98c41f.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107320230-aa2b0a80-6ae3-11eb-9b83-150b7c98c41f.png\" alt=\"image\"></a></p>\n<h5 id=\"vi-접속이-완료됨을-확인할-수-있다\"><a href=\"#vi-접속이-완료됨을-확인할-수-있다\" class=\"headerlink\" title=\"vi) 접속이 완료됨을 확인할 수 있다.\"></a>vi) 접속이 완료됨을 확인할 수 있다.</h5><p><a href=\"https://user-images.githubusercontent.com/56995911/107320268-b8792680-6ae3-11eb-94c9-df61de612654.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107320268-b8792680-6ae3-11eb-94c9-df61de612654.png\" alt=\"image\"></a></p>\n<h4 id=\"2-수동입력방법-Studio-3T-에서-URI의-지원을-받을-수-없을-경우-사용\"><a href=\"#2-수동입력방법-Studio-3T-에서-URI의-지원을-받을-수-없을-경우-사용\" class=\"headerlink\" title=\"2) 수동입력방법(Studio 3T 에서 URI의 지원을 받을 수 없을 경우 사용)\"></a>2) 수동입력방법(Studio 3T 에서 URI의 지원을 받을 수 없을 경우 사용)</h4><h5 id=\"i-host-정보-입력\"><a href=\"#i-host-정보-입력\" class=\"headerlink\" title=\"i) host 정보 입력\"></a>i) host 정보 입력</h5><p><a href=\"https://user-images.githubusercontent.com/56995911/107320338-d9da1280-6ae3-11eb-8004-bd9aa916a146.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107320338-d9da1280-6ae3-11eb-8004-bd9aa916a146.png\" alt=\"image\"></a></p>\n<h5 id=\"ii-추가옵션-선택\"><a href=\"#ii-추가옵션-선택\" class=\"headerlink\" title=\"ii) 추가옵션 선택\"></a>ii) 추가옵션 선택</h5><p><a href=\"https://user-images.githubusercontent.com/56995911/107320375-e9595b80-6ae3-11eb-8228-8500160bb361.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107320375-e9595b80-6ae3-11eb-8228-8500160bb361.png\" alt=\"image\"></a></p>\n<h3 id=\"3-Database-생성\"><a href=\"#3-Database-생성\" class=\"headerlink\" title=\"3. Database 생성\"></a>3. Database 생성</h3><h4 id=\"1-UI로-생성하는-방법\"><a href=\"#1-UI로-생성하는-방법\" class=\"headerlink\" title=\"1) UI로 생성하는 방법\"></a>1) UI로 생성하는 방법</h4><p><a href=\"https://user-images.githubusercontent.com/56995911/107320410-fe35ef00-6ae3-11eb-9056-0d7f0acf3a00.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107320410-fe35ef00-6ae3-11eb-9056-0d7f0acf3a00.png\" alt=\"image\"></a><br><a href=\"https://user-images.githubusercontent.com/56995911/107320436-0857ed80-6ae4-11eb-81ec-bc996b81a4d3.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107320436-0857ed80-6ae4-11eb-81ec-bc996b81a4d3.png\" alt=\"image\"></a></p>\n<h4 id=\"2-프로그램으로-생성\"><a href=\"#2-프로그램으로-생성\" class=\"headerlink\" title=\"2) 프로그램으로 생성\"></a>2) 프로그램으로 생성</h4><h5 id=\"i-https-docs-aws-amazon-com-ko-kr-documentdb-latest-developerguide-connect-programmatically-html\"><a href=\"#i-https-docs-aws-amazon-com-ko-kr-documentdb-latest-developerguide-connect-programmatically-html\" class=\"headerlink\" title=\"i) https://docs.aws.amazon.com/ko_kr/documentdb/latest/developerguide/connect_programmatically.html\"></a>i) <a href=\"https://docs.aws.amazon.com/ko_kr/documentdb/latest/developerguide/connect_programmatically.html\" target=\"_blank\" rel=\"noopener\">https://docs.aws.amazon.com/ko_kr/documentdb/latest/developerguide/connect_programmatically.html</a></h5><h3 id=\"4-Collection-생성\"><a href=\"#4-Collection-생성\" class=\"headerlink\" title=\"4. Collection 생성\"></a>4. Collection 생성</h3><h4 id=\"1-UI로-생성하는-방법-1\"><a href=\"#1-UI로-생성하는-방법-1\" class=\"headerlink\" title=\"1) UI로 생성하는 방법\"></a>1) UI로 생성하는 방법</h4><h5 id=\"i-Capped-Collection은-컬렉션에-크기제한을-두는것이므로-예제상에서는-따로-제한을-두지-않음\"><a href=\"#i-Capped-Collection은-컬렉션에-크기제한을-두는것이므로-예제상에서는-따로-제한을-두지-않음\" class=\"headerlink\" title=\"i) Capped Collection은 컬렉션에 크기제한을 두는것이므로 예제상에서는 따로 제한을 두지 않음.\"></a>i) Capped Collection은 컬렉션에 크기제한을 두는것이므로 예제상에서는 따로 제한을 두지 않음.</h5><ul>\n<li>Use Custom Collection은 컬렉션 내에 프로파일들에 대한 각 형을 정해주는것. 예→ varchar(45), datetime, boolean 등..<br><a href=\"https://user-images.githubusercontent.com/56995911/107320539-363d3200-6ae4-11eb-85ad-5222a7e039bc.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107320539-363d3200-6ae4-11eb-85ad-5222a7e039bc.png\" alt=\"image\"></a><br><a href=\"https://user-images.githubusercontent.com/56995911/107320548-3f2e0380-6ae4-11eb-843a-ee8c7bde20e6.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107320548-3f2e0380-6ae4-11eb-843a-ee8c7bde20e6.png\" alt=\"image\"></a></li>\n</ul>\n<h4 id=\"2-프로그램으로-생성-1\"><a href=\"#2-프로그램으로-생성-1\" class=\"headerlink\" title=\"2) 프로그램으로 생성\"></a>2) 프로그램으로 생성</h4><h5 id=\"i-https-docs-aws-amazon-com-ko-kr-documentdb-latest-developerguide-connect-programmatically-html-1\"><a href=\"#i-https-docs-aws-amazon-com-ko-kr-documentdb-latest-developerguide-connect-programmatically-html-1\" class=\"headerlink\" title=\"i) https://docs.aws.amazon.com/ko_kr/documentdb/latest/developerguide/connect_programmatically.html\"></a>i) <a href=\"https://docs.aws.amazon.com/ko_kr/documentdb/latest/developerguide/connect_programmatically.html\" target=\"_blank\" rel=\"noopener\">https://docs.aws.amazon.com/ko_kr/documentdb/latest/developerguide/connect_programmatically.html</a></h5><h3 id=\"5-Indexing-생성\"><a href=\"#5-Indexing-생성\" class=\"headerlink\" title=\"5. Indexing 생성\"></a>5. Indexing 생성</h3><ul>\n<li>우선, Collection을 생성하면 기본으로 _id 라는 키값이 자동으로 잡힌다. </li>\n<li>아마도 DocumentDB내에서 자체 인덱싱을 위해 쓰는 것으로 보여지며, 이걸 생성안한다고 하면 Collection이 아예 생성되지 않는다.</li>\n</ul>\n<h4 id=\"1-UI로-생성하는-방법-2\"><a href=\"#1-UI로-생성하는-방법-2\" class=\"headerlink\" title=\"1) UI로 생성하는 방법\"></a>1) UI로 생성하는 방법</h4><h5 id=\"i-생성하고자-하는-Collection-마우스우클릭-→-Add-Index-Drop-Index-는-삭제\"><a href=\"#i-생성하고자-하는-Collection-마우스우클릭-→-Add-Index-Drop-Index-는-삭제\" class=\"headerlink\" title=\"i) 생성하고자 하는 Collection (마우스우클릭)→ (Add Index..)  [Drop Index 는 삭제]\"></a>i) 생성하고자 하는 Collection (마우스우클릭)→ (Add Index..)  [Drop Index 는 삭제]</h5><h4 id=\"2-Linux에서-Cmd로-생성하는-방법\"><a href=\"#2-Linux에서-Cmd로-생성하는-방법\" class=\"headerlink\" title=\"2) Linux에서 Cmd로 생성하는 방법\"></a>2) Linux에서 Cmd로 생성하는 방법</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rs0:PRIMARY&gt;    </span><br><span class=\"line\"> </span><br><span class=\"line\">db.[COLLECTION_NAME].createIndex(&#123;[KEY]:-1&#125;, &#123;background: <span class=\"literal\">true</span>&#125;); //1은 ascending, -1은 descending / background는 아래 설명</span><br></pre></td></tr></table></figure></div>\n\n<p><a href=\"https://user-images.githubusercontent.com/56995911/107320639-743a5600-6ae4-11eb-8a50-60fd25e705eb.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107320639-743a5600-6ae4-11eb-8a50-60fd25e705eb.png\" alt=\"image\"></a></p>\n<h3 id=\"6-CRUD\"><a href=\"#6-CRUD\" class=\"headerlink\" title=\"6. CRUD\"></a>6. CRUD</h3><h4 id=\"1-SELECT\"><a href=\"#1-SELECT\" class=\"headerlink\" title=\"1) SELECT\"></a>1) SELECT</h4><h5 id=\"i-UI를-통한-Select\"><a href=\"#i-UI를-통한-Select\" class=\"headerlink\" title=\"i) UI를 통한 Select\"></a>i) UI를 통한 Select</h5><p><a href=\"https://user-images.githubusercontent.com/56995911/107320692-8ddb9d80-6ae4-11eb-89d4-888e5ab4f634.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107320692-8ddb9d80-6ae4-11eb-89d4-888e5ab4f634.png\" alt=\"image\"></a></p>\n<ul>\n<li><p>Filter : 조건검색, SQL의 WHERE절</p>\n</li>\n<li><p>Project : 표시항목, SQL의 * 이나 컬럼이름(1: 표시, 0:생략)</p>\n</li>\n<li><p>Sort : 순서정렬, SQL의 ORDER BY(1:오름차순, -1:내림차순)</p>\n</li>\n<li><p>Max Time MS : Millisecond이며 Default 5000이 맞음. 60초까지 넣을 필욘 없지만 쿼리복잡도에 따라 시간이 더 필요할 경우 늘려주면됨.</p>\n</li>\n<li><p>Skip : 페이징처리 할때 좋음. (갯수에 따라 pass되고 나머지 것이 표시됨)</p>\n</li>\n<li><p>LIMIT : 출력하고자 하는 한계를 설정, MySQL의 LIMIT / MSSQL의 TOP 과 비슷한 기능.</p>\n</li>\n</ul>\n<h4 id=\"2-UPDATE\"><a href=\"#2-UPDATE\" class=\"headerlink\" title=\"2) UPDATE\"></a>2) UPDATE</h4><h5 id=\"i-다수-Update\"><a href=\"#i-다수-Update\" class=\"headerlink\" title=\"i) 다수 Update\"></a>i) 다수 Update</h5><ul>\n<li>업데이트 예정</li>\n</ul>\n<h5 id=\"ii-일부-Update\"><a href=\"#ii-일부-Update\" class=\"headerlink\" title=\"ii) 일부 Update\"></a>ii) 일부 Update</h5><p><a href=\"https://user-images.githubusercontent.com/56995911/107320766-aea3f300-6ae4-11eb-9b88-913be1391b2d.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107320766-aea3f300-6ae4-11eb-9b88-913be1391b2d.png\" alt=\"image\"></a></p>\n<ul>\n<li>수정하고자 하는 행을 더블클릭만 하고 Update 버튼으로 적용하면 된다.</li>\n</ul>\n<h4 id=\"3-INSERT\"><a href=\"#3-INSERT\" class=\"headerlink\" title=\"3) INSERT\"></a>3) INSERT</h4><h5 id=\"i-다수-Insert\"><a href=\"#i-다수-Insert\" class=\"headerlink\" title=\"i) 다수 Insert\"></a>i) 다수 Insert</h5><p><a href=\"https://user-images.githubusercontent.com/56995911/107320816-c67b7700-6ae4-11eb-90fa-381795b739c2.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107320816-c67b7700-6ae4-11eb-90fa-381795b739c2.png\" alt=\"image\"></a></p>\n<ul>\n<li>JSON File을 만들어서 동시에 Insert 시킬 수 있음.(Json Array)</li>\n</ul>\n<h5 id=\"ii-단일-Insert\"><a href=\"#ii-단일-Insert\" class=\"headerlink\" title=\"ii) 단일 Insert\"></a>ii) 단일 Insert</h5><p><a href=\"https://user-images.githubusercontent.com/56995911/107320838-d7c48380-6ae4-11eb-8376-5ab019f2913a.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107320838-d7c48380-6ae4-11eb-8376-5ab019f2913a.png\" alt=\"image\"></a></p>\n<h4 id=\"4-DELETE\"><a href=\"#4-DELETE\" class=\"headerlink\" title=\"4) DELETE\"></a>4) DELETE</h4><h5 id=\"i-일부-Delete\"><a href=\"#i-일부-Delete\" class=\"headerlink\" title=\"i) 일부 Delete\"></a>i) 일부 Delete</h5><p><a href=\"https://user-images.githubusercontent.com/56995911/107320881-ee6ada80-6ae4-11eb-829a-26a9eaabaa32.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107320881-ee6ada80-6ae4-11eb-829a-26a9eaabaa32.png\" alt=\"image\"></a></p>\n","text":"서문Document DB 사용을 원활하게 하기 위하여 MongoDB Compass를 활용해보기로 한다.<br>Studio 3T와 달리 무료이며 MongoDB에서 기본적으로 제공하는 툴이다.(https://www.mongodb.com/try/downlo","link":"","raw":null,"photos":[],"categories":[{"name":"AWS","slug":"AWS","count":3,"path":"api/categories/AWS.json"}],"tags":[{"name":"Document DB","slug":"Document-DB","count":3,"path":"api/tags/Document-DB.json"},{"name":"Mongo","slug":"Mongo","count":3,"path":"api/tags/Mongo.json"}]},{"title":"Studio 3T Guide","slug":"Studio-3T-Guide","date":"2021-01-12T03:45:15.000Z","updated":"2021-02-09T05:52:37.650Z","comments":true,"pin":null,"path":"api/articles/Studio-3T-Guide.json","excerpt":"","keywords":null,"cover":"https://user-images.githubusercontent.com/56995911/107318394-09871b80-6ae0-11eb-854a-cad27c7a6b0e.png","content":"<h2 id=\"서문\"><a href=\"#서문\" class=\"headerlink\" title=\"서문\"></a>서문</h2><ul>\n<li>Document DB 사용을 원활하게 하기 위하여 Studio 3T를 활용해보기로 한다.</li>\n<li>우선, 해당 툴은 유료툴인데 돈이 아깝지 않은 성능을 보여준다.</li>\n<li>Collection을 생성하고 index 작업 및 CRUD 작업에 대하여 툴에서 사용하는 방법과 Back-End에서 사용하는 법을 정의한다.</li>\n</ul>\n<h2 id=\"본문\"><a href=\"#본문\" class=\"headerlink\" title=\"본문\"></a>본문</h2><h3 id=\"1-시작\"><a href=\"#1-시작\" class=\"headerlink\" title=\"1. 시작\"></a>1. 시작</h3><p><a href=\"https://user-images.githubusercontent.com/56995911/107318394-09871b80-6ae0-11eb-854a-cad27c7a6b0e.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107318394-09871b80-6ae0-11eb-854a-cad27c7a6b0e.png\" alt=\"image\"></a></p>\n<p><a href=\"https://user-images.githubusercontent.com/56995911/107318424-173ca100-6ae0-11eb-8645-27c3613ba3c7.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107318424-173ca100-6ae0-11eb-8645-27c3613ba3c7.png\" alt=\"image\"></a></p>\n<ul>\n<li>Connect 로 해당 DB접속</li>\n</ul>\n<h3 id=\"2-Database-생성\"><a href=\"#2-Database-생성\" class=\"headerlink\" title=\"2. Database 생성\"></a>2. Database 생성</h3><h4 id=\"1-UI로-생성하는-방법\"><a href=\"#1-UI로-생성하는-방법\" class=\"headerlink\" title=\"1) UI로 생성하는 방법\"></a>1) UI로 생성하는 방법</h4><ul>\n<li>i) replica set으로 보이는 전체 데이터베이스 (마우스우클릭)→ (Add Database)</li>\n</ul>\n<h4 id=\"2-Linux에서-Cmd로-생성하는-방법\"><a href=\"#2-Linux에서-Cmd로-생성하는-방법\" class=\"headerlink\" title=\"2) Linux에서 Cmd로 생성하는 방법\"></a>2) Linux에서 Cmd로 생성하는 방법</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rs0:PRIMARY&gt;    </span><br><span class=\"line\"> </span><br><span class=\"line\">show dbs                            //Database 목록 확인용</span><br><span class=\"line\">use [DATABASE_NAME]                 //데이터베이스 사용or생성</span><br><span class=\"line\">switched to db [DATABASE_NAME]      //데이터베이스를 상대로 변경</span><br><span class=\"line\">db.runCommand( &#123; serverStatus: 1 &#125;) //데이터베이스 상태확인</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"3-프로그램으로-생성\"><a href=\"#3-프로그램으로-생성\" class=\"headerlink\" title=\"3) 프로그램으로 생성\"></a>3) 프로그램으로 생성</h4><ul>\n<li>i) <a href=\"https://docs.aws.amazon.com/ko_kr/documentdb/latest/developerguide/connect_programmatically.html\" target=\"_blank\" rel=\"noopener\">https://docs.aws.amazon.com/ko_kr/documentdb/latest/developerguide/connect_programmatically.html</a></li>\n</ul>\n<h3 id=\"3-Collection-생성\"><a href=\"#3-Collection-생성\" class=\"headerlink\" title=\"3. Collection 생성\"></a>3. Collection 생성</h3><h4 id=\"1-UI로-생성하는-방법-1\"><a href=\"#1-UI로-생성하는-방법-1\" class=\"headerlink\" title=\"1) UI로 생성하는 방법\"></a>1) UI로 생성하는 방법</h4><ul>\n<li>i) 폴더모양의 Collections를 (마우스우클릭)→ (Add Collection)</li>\n</ul>\n<h4 id=\"2-Linux에서-Cmd로-생성하는-방법-1\"><a href=\"#2-Linux에서-Cmd로-생성하는-방법-1\" class=\"headerlink\" title=\"2) Linux에서 Cmd로 생성하는 방법\"></a>2) Linux에서 Cmd로 생성하는 방법</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rs0:PRIMARY&gt;    </span><br><span class=\"line\"> </span><br><span class=\"line\">db.[COLLECTION_NAME]</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"3-프로그램으로-생성-1\"><a href=\"#3-프로그램으로-생성-1\" class=\"headerlink\" title=\"3) 프로그램으로 생성\"></a>3) 프로그램으로 생성</h4><ul>\n<li>i) <a href=\"https://docs.aws.amazon.com/ko_kr/documentdb/latest/developerguide/connect_programmatically.html\" target=\"_blank\" rel=\"noopener\">https://docs.aws.amazon.com/ko_kr/documentdb/latest/developerguide/connect_programmatically.html</a></li>\n</ul>\n<h3 id=\"4-Indexing-생성\"><a href=\"#4-Indexing-생성\" class=\"headerlink\" title=\"4. Indexing 생성\"></a>4. Indexing 생성</h3><ul>\n<li>우선, Collection을 생성하면 기본으로 _id 라는 키값이 자동으로 잡힌다. </li>\n<li>아마도 DocumentDB내에서 자체 인덱싱을 위해 쓰는 것으로 보여지며, 이걸 생성안한다고 하면 Collection이 아예 생성되지 않는다.</li>\n</ul>\n<h4 id=\"1-UI로-생성하는-방법-2\"><a href=\"#1-UI로-생성하는-방법-2\" class=\"headerlink\" title=\"1) UI로 생성하는 방법\"></a>1) UI로 생성하는 방법</h4><ul>\n<li>i) 생성하고자 하는 Collection (마우스우클릭)→ (Add Index..)  [Drop Index 는 삭제]</li>\n</ul>\n<h4 id=\"2-Linux에서-Cmd로-생성하는-방법-2\"><a href=\"#2-Linux에서-Cmd로-생성하는-방법-2\" class=\"headerlink\" title=\"2) Linux에서 Cmd로 생성하는 방법\"></a>2) Linux에서 Cmd로 생성하는 방법</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rs0:PRIMARY&gt;    </span><br><span class=\"line\"> </span><br><span class=\"line\">db.[COLLECTION_NAME].createIndex(&#123;[KEY]:-1&#125;, &#123;background: <span class=\"literal\">true</span>&#125;); //1은 ascending, -1은 descending / background는 아래 설명</span><br></pre></td></tr></table></figure></div>\n\n<p><a href=\"(https://user-images.githubusercontent.com/56995911/107318654-97fb9d00-6ae0-11eb-8a56-6f2921e6a40d.png)\"><img src=\"https://user-images.githubusercontent.com/56995911/107318654-97fb9d00-6ae0-11eb-8a56-6f2921e6a40d.png\" alt=\"image\"></a></p>\n<h3 id=\"5-CRUD\"><a href=\"#5-CRUD\" class=\"headerlink\" title=\"5. CRUD\"></a>5. CRUD</h3><h4 id=\"1-SELECT\"><a href=\"#1-SELECT\" class=\"headerlink\" title=\"1) SELECT\"></a>1) SELECT</h4><h5 id=\"i-UI를-통한-Select\"><a href=\"#i-UI를-통한-Select\" class=\"headerlink\" title=\"i) UI를 통한 Select\"></a>i) UI를 통한 Select</h5><p><a href=\"https://user-images.githubusercontent.com/56995911/107318707-b2ce1180-6ae0-11eb-8ff8-d01453b8f7cb.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107318707-b2ce1180-6ae0-11eb-8ff8-d01453b8f7cb.png\" alt=\"image\"></a><br><a href=\"https://user-images.githubusercontent.com/56995911/107318732-c6797800-6ae0-11eb-88df-97fc6d6fe3dc.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107318732-c6797800-6ae0-11eb-88df-97fc6d6fe3dc.png\" alt=\"image\"></a></p>\n<ul>\n<li>MongoDB와 같은 Docuent성 NoSQL을 처음 쓴다면, UI로 자동완성 시켜주는 쿼리메이커가 유용히 쓰일 수 있다.</li>\n<li>또한, Query Code탭을 통해 각종언어에 따른 예제를 만들어낼 수 있다.(실제 구동이 된다)</li>\n<li>Function 기반 Call에 익숙치 않다면, SQL 탭에서 기존에 쓰던 Select 문을 통해 자동완성 된 코드를 받아볼 수 있다.</li>\n</ul>\n<p><a href=\"https://user-images.githubusercontent.com/56995911/107318761-d5f8c100-6ae0-11eb-9527-a57f7fd7b190.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/107318761-d5f8c100-6ae0-11eb-9527-a57f7fd7b190.png\" alt=\"image\"></a></p>\n<h5 id=\"ii-쿼리Function을-통한-Select\"><a href=\"#ii-쿼리Function을-통한-Select\" class=\"headerlink\" title=\"ii) 쿼리Function을 통한 Select\"></a>ii) 쿼리Function을 통한 Select</h5><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rs0:PRIMARY&gt;    </span><br><span class=\"line\">// 전체 Select</span><br><span class=\"line\">db.[COLLECTION_NAME].find();</span><br><span class=\"line\"> </span><br><span class=\"line\">// 조건 Select</span><br><span class=\"line\">db.[COLLECTION_NAME].find(&#123;<span class=\"string\">'name'</span>:<span class=\"string\">'Frank'</span>&#125;);</span><br><span class=\"line\">db.[COLLECTION_NAME].find(&#123;<span class=\"string\">'status'</span>:&#123;<span class=\"variable\">$in</span>:[<span class=\"string\">'active'</span>]&#125;&#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">// 조건+옵션</span><br><span class=\"line\">// https://docs.mongodb.com/manual/reference/method/</span><br><span class=\"line\">db.getCollection(<span class=\"string\">\"profiles\"</span>).find(&#123;<span class=\"string\">\"status\"</span> : <span class=\"string\">\"active\"</span>&#125;).skip(1).<span class=\"built_in\">limit</span>(1).pretty();</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"2-UPDATE\"><a href=\"#2-UPDATE\" class=\"headerlink\" title=\"2) UPDATE\"></a>2) UPDATE</h4><h5 id=\"i-다수-Update\"><a href=\"#i-다수-Update\" class=\"headerlink\" title=\"i) 다수 Update\"></a>i) 다수 Update</h5><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rs0:PRIMARY&gt;    </span><br><span class=\"line\">// nice컬럼과 meet 컬럼에 to,you 인 값을 포함하고 있는 document는 전부 meet컬럼을 me로 수정.</span><br><span class=\"line\">db.[COLLECTION_NAME].findAndModify(&#123;query:&#123;nice:<span class=\"string\">\"to\"</span>,meet:<span class=\"string\">\"you\"</span>&#125;,update:&#123;<span class=\"variable\">$set</span>:&#123;meet:<span class=\"string\">\"me\"</span>&#125;&#125;, upsert:<span class=\"literal\">true</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">// 어떤컬럼이건 상관없이 meet컬럼을 모두 me로 업데이트</span><br><span class=\"line\">db.[COLLECTION_NAME].findAndModify(&#123;query:&#123;&#125;,update:&#123;<span class=\"variable\">$set</span>:&#123;meet:<span class=\"string\">\"me\"</span>&#125;&#125;, upsert:<span class=\"literal\">true</span>);</span><br></pre></td></tr></table></figure></div>\n\n<h5 id=\"ii-일부-Update\"><a href=\"#ii-일부-Update\" class=\"headerlink\" title=\"ii) 일부 Update\"></a>ii) 일부 Update</h5><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rs0:PRIMARY&gt;    </span><br><span class=\"line\">// nice컬럼과 meet 컬럼에 to,you 인 값을 포함하고 있는 document는 전부 meet컬럼을 me로 수정.</span><br><span class=\"line\">db.[COLLECTION_NAME].findAndModify(&#123;query:&#123;nice:<span class=\"string\">\"to\"</span>,meet:<span class=\"string\">\"you\"</span>&#125;,update:&#123;<span class=\"variable\">$set</span>:&#123;meet:<span class=\"string\">\"me\"</span>&#125;&#125;, upsert:<span class=\"literal\">true</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">// status 가 active이면서 name이 Karen일 경우 status를 inactive로 변경</span><br><span class=\"line\">db.[COLLECTION_NAME].findOneAndUpdate(&#123;status : <span class=\"string\">'active'</span>, name:<span class=\"string\">'Karen'</span>&#125;, &#123;<span class=\"variable\">$set</span>:&#123;status:<span class=\"string\">'inactive'</span>&#125;&#125;);</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"3-INSERT\"><a href=\"#3-INSERT\" class=\"headerlink\" title=\"3) INSERT\"></a>3) INSERT</h4><h5 id=\"i-단일-Insert\"><a href=\"#i-단일-Insert\" class=\"headerlink\" title=\"i) 단일 Insert\"></a>i) 단일 Insert</h5><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rs0:PRIMARY&gt;    </span><br><span class=\"line\"> </span><br><span class=\"line\">db.[COLLECTION_NAME].insert(&#123;<span class=\"string\">\"nice\"</span>:<span class=\"string\">\"to\"</span>,<span class=\"string\">\"meet\"</span>:<span class=\"string\">\"you\"</span>&#125;);</span><br></pre></td></tr></table></figure></div>\n\n<h5 id=\"ii-다수-Insert\"><a href=\"#ii-다수-Insert\" class=\"headerlink\" title=\"ii) 다수 Insert\"></a>ii) 다수 Insert</h5><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rs0:PRIMARY&gt;    </span><br><span class=\"line\"> </span><br><span class=\"line\">db.[COLLECTION_NAME].insert([&#123;<span class=\"string\">\"nice\"</span>:<span class=\"string\">\"to\"</span>,<span class=\"string\">\"meet\"</span>:<span class=\"string\">\"you\"</span>&#125;, &#123;..........&#125;]);</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"4-DELETE\"><a href=\"#4-DELETE\" class=\"headerlink\" title=\"4) DELETE\"></a>4) DELETE</h4><h5 id=\"i-전체-Delete\"><a href=\"#i-전체-Delete\" class=\"headerlink\" title=\"i) 전체 Delete\"></a>i) 전체 Delete</h5><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rs0:PRIMARY&gt;    </span><br><span class=\"line\"> </span><br><span class=\"line\">db.[COLLECTION_NAME].remove( &#123; &#125; )</span><br></pre></td></tr></table></figure></div>\n\n<h5 id=\"ii-조건-Delete\"><a href=\"#ii-조건-Delete\" class=\"headerlink\" title=\"ii) 조건 Delete\"></a>ii) 조건 Delete</h5><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rs0:PRIMARY&gt;    </span><br><span class=\"line\"> </span><br><span class=\"line\">//1개의 조건</span><br><span class=\"line\">db.[COLLECTION_NAME].remove( &#123; name: <span class=\"string\">\"Frank\"</span> &#125; );</span><br><span class=\"line\"> </span><br><span class=\"line\">//2개 이상 조건</span><br><span class=\"line\">db.[COLLECTION_NAME].remove( &#123; nice : <span class=\"string\">\"to\"</span>, meet : <span class=\"string\">\"you\"</span>&#125; );</span><br></pre></td></tr></table></figure></div>\n","text":"서문Document DB 사용을 원활하게 하기 위하여 Studio 3T를 활용해보기로 한다.우선, 해당 툴은 유료툴인데 돈이 아깝지 않은 성능을 보여준다.Collection을 생성하고 index 작업 및 CRUD 작업에 대하여 툴에서 사용하는 방법과 ","link":"","raw":null,"photos":[],"categories":[{"name":"AWS","slug":"AWS","count":3,"path":"api/categories/AWS.json"}],"tags":[{"name":"Document DB","slug":"Document-DB","count":3,"path":"api/tags/Document-DB.json"},{"name":"Mongo","slug":"Mongo","count":3,"path":"api/tags/Mongo.json"}]}]}<span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import boto3</span><br><span class=\"line\">import json</span><br><span class=\"line\">import pymysql</span><br><span class=\"line\">import requests</span><br><span class=\"line\">from datetime import datetime, timedelta</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># MySQL 접속정보</span></span><br><span class=\"line\">REGION = <span class=\"string\">'REGION'</span></span><br><span class=\"line\"></span><br><span class=\"line\">rds_host = <span class=\"string\">\"RDS_ENDPOINT\"</span></span><br><span class=\"line\">name = <span class=\"string\">\"ID\"</span></span><br><span class=\"line\">password = <span class=\"string\">\"PW\"</span></span><br><span class=\"line\">db_name = <span class=\"string\">\"DB_NAME\"</span></span><br><span class=\"line\">conn = pymysql.connect(rds_host, user=name, passwd=password, db=db_name, connect_timeout=5, charset=<span class=\"string\">'utf8'</span>,</span><br><span class=\"line\">                       cursorclass=pymysql.cursors.DictCursor)</span><br><span class=\"line\">                        </span><br><span class=\"line\"> </span><br><span class=\"line\">def lambda_handler(event, context):</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        <span class=\"comment\"># <span class=\"doctag\">TODO:</span>  1. MySQL에서 Region관련정보 받아오기</span></span><br><span class=\"line\">        result = [] <span class=\"comment\">#list</span></span><br><span class=\"line\">        dic = &#123;&#125;    <span class=\"comment\">#dictionary</span></span><br><span class=\"line\">        mysqlList = [] <span class=\"comment\">#list</span></span><br><span class=\"line\">        with conn.cursor(pymysql.cursors.DictCursor) as cur:</span><br><span class=\"line\">            cur.execute(<span class=\"string\">\"\"</span><span class=\"string\">\"select * from NEW_WEATHER_REGION_CD\"</span><span class=\"string\">\"\"</span>)</span><br><span class=\"line\">            conn.commit()</span><br><span class=\"line\">     </span><br><span class=\"line\">            <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> cur.fetchall():</span><br><span class=\"line\">                result.append(row)</span><br><span class=\"line\">     </span><br><span class=\"line\">            <span class=\"keyword\">for</span> jsons <span class=\"keyword\">in</span> result:</span><br><span class=\"line\">                loaded_json = json.loads(json.dumps(jsons, indent=4, sort_keys=True, default=str, ensure_ascii=False))</span><br><span class=\"line\">                <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> loaded_json:</span><br><span class=\"line\">                    dic[x]=loaded_json[x]</span><br><span class=\"line\">                grid_x = dic.get(<span class=\"string\">'GRID_X'</span>)</span><br><span class=\"line\">                grid_y = dic.get(<span class=\"string\">'GRID_Y'</span>)</span><br><span class=\"line\">     </span><br><span class=\"line\">                <span class=\"comment\"># <span class=\"doctag\">TODO:</span> 2. URL셋팅후 데이터 받기(초단기 예보)</span></span><br><span class=\"line\">                URL = <span class=\"string\">'http://apis.data.go.kr/1360000/VilageFcstInfoService/getUltraSrtFcst?serviceKey=SERVICE_KEY'</span></span><br><span class=\"line\">                params = &#123;</span><br><span class=\"line\">                    <span class=\"string\">'numOfRows'</span>: <span class=\"string\">'1000'</span>,</span><br><span class=\"line\">                    <span class=\"string\">'pageNo'</span>:<span class=\"string\">'1'</span>,</span><br><span class=\"line\">                    <span class=\"string\">'dataType'</span>:<span class=\"string\">'JSON'</span>,</span><br><span class=\"line\">                    <span class=\"string\">'base_date'</span>:datetime.today().strftime(<span class=\"string\">\"%Y%m%d\"</span>),</span><br><span class=\"line\">                    <span class=\"string\">'base_time'</span>:(datetime.today() + timedelta(hours=-1)).strftime(<span class=\"string\">\"%H00\"</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                res = requests.get(URL, params=params)</span><br><span class=\"line\">                URL = res.url</span><br><span class=\"line\">                <span class=\"comment\"># x, y 좌표 설정</span></span><br><span class=\"line\">                regionParam = &#123;</span><br><span class=\"line\">                    <span class=\"string\">'nx'</span>:grid_x, <span class=\"string\">'ny'</span>:grid_y</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                res = requests.get(URL, params=regionParam) <span class=\"comment\"># 실제 데이터 받기.</span></span><br><span class=\"line\">     </span><br><span class=\"line\">                <span class=\"comment\"># <span class=\"doctag\">TODO:</span> 3 데이터가 정상적으로 들어와있는지 확인하기(우선은 Header의 정보 중 ResultCode로 판단)</span></span><br><span class=\"line\">                resultCode = <span class=\"string\">\"\"</span></span><br><span class=\"line\">                resultMsg = <span class=\"string\">\"\"</span></span><br><span class=\"line\">                dict = json.loads(json.dumps(res.text, indent=4, sort_keys=True, default=str, ensure_ascii=False))</span><br><span class=\"line\">                dict = json.loads(dict)</span><br><span class=\"line\">                <span class=\"keyword\">for</span> resultJson <span class=\"keyword\">in</span> dict[<span class=\"string\">'response'</span>][<span class=\"string\">'header'</span>]:</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(resultJson == <span class=\"string\">\"resultCode\"</span>):</span><br><span class=\"line\">                        resultCode = dict[<span class=\"string\">'response'</span>][<span class=\"string\">'header'</span>][<span class=\"string\">'resultCode'</span>]</span><br><span class=\"line\">                    <span class=\"keyword\">elif</span>(resultJson == <span class=\"string\">\"resultMsg\"</span>):</span><br><span class=\"line\">                        resultMsg = dict[<span class=\"string\">'response'</span>][<span class=\"string\">'header'</span>][<span class=\"string\">'resultMsg'</span>]</span><br><span class=\"line\">     </span><br><span class=\"line\">                <span class=\"keyword\">if</span>(resultCode != <span class=\"string\">\"00\"</span>): <span class=\"comment\"># 00이 정상이고, 나머지가 에러다... 로그로 남기면 뭐가 좋지않을까 해서 남겨본다.</span></span><br><span class=\"line\">                    <span class=\"built_in\">print</span>(<span class=\"string\">\"ERROR_CD : \"</span> + resultCode + <span class=\"string\">\"   /   \"</span> + <span class=\"string\">\"ERROR_MSG : \"</span> + resultMsg)</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    dictionary = json.loads(json.dumps(res.text, sort_keys=True, default=str, ensure_ascii=False))</span><br><span class=\"line\">                    <span class=\"comment\"># 왜 dictionary가 2번이나 호출됫냐면... python특성인지 모르겠으나 형변환이 없으므로 강제 형변환을 위해 사용했음.</span></span><br><span class=\"line\">                    dictionary = json.loads(dictionary)</span><br><span class=\"line\">                    <span class=\"comment\"># 날씨item별 순차 읽기</span></span><br><span class=\"line\">                    weatherDic = &#123;&#125;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> weather <span class=\"keyword\">in</span> dictionary[<span class=\"string\">'response'</span>][<span class=\"string\">'body'</span>][<span class=\"string\">'items'</span>][<span class=\"string\">'item'</span>]:</span><br><span class=\"line\">                        <span class=\"comment\"># 넣고자 하는 시간 체크(현재시간이어야 한다)</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(weather[<span class=\"string\">'fcstTime'</span>] == (datetime.today().strftime(<span class=\"string\">\"%H00\"</span>))):</span><br><span class=\"line\">                            <span class=\"keyword\">if</span>(weather[<span class=\"string\">'category'</span>] == <span class=\"string\">\"LGT\"</span>): <span class=\"comment\"># 낙뢰</span></span><br><span class=\"line\">                                weatherDic[weather[<span class=\"string\">'category'</span>]]=weather[<span class=\"string\">\"fcstValue\"</span>]</span><br><span class=\"line\">     </span><br><span class=\"line\">                            <span class=\"keyword\">elif</span> (weather[<span class=\"string\">'category'</span>] == <span class=\"string\">\"PTY\"</span>): <span class=\"comment\"># 강수형태</span></span><br><span class=\"line\">                                weatherDic[weather[<span class=\"string\">'category'</span>]]=weather[<span class=\"string\">\"fcstValue\"</span>]</span><br><span class=\"line\">     </span><br><span class=\"line\">                            <span class=\"keyword\">elif</span> (weather[<span class=\"string\">'category'</span>] == <span class=\"string\">\"RN1\"</span>): <span class=\"comment\"># 1시간 강수량</span></span><br><span class=\"line\">                                weatherDic[weather[<span class=\"string\">'category'</span>]]=weather[<span class=\"string\">\"fcstValue\"</span>]</span><br><span class=\"line\">     </span><br><span class=\"line\">                            <span class=\"keyword\">elif</span> (weather[<span class=\"string\">'category'</span>] == <span class=\"string\">\"SKY\"</span>): <span class=\"comment\"># 하늘상태</span></span><br><span class=\"line\">                                weatherDic[weather[<span class=\"string\">'category'</span>]]=weather[<span class=\"string\">\"fcstValue\"</span>]</span><br><span class=\"line\">     </span><br><span class=\"line\">                            <span class=\"keyword\">elif</span> (weather[<span class=\"string\">'category'</span>] == <span class=\"string\">\"T1H\"</span>):<span class=\"comment\"># 기온</span></span><br><span class=\"line\">                                weatherDic[weather[<span class=\"string\">'category'</span>]]=weather[<span class=\"string\">\"fcstValue\"</span>]</span><br><span class=\"line\">     </span><br><span class=\"line\">                            <span class=\"keyword\">elif</span> (weather[<span class=\"string\">'category'</span>] == <span class=\"string\">\"REH\"</span>): <span class=\"comment\"># 습도</span></span><br><span class=\"line\">                                weatherDic[weather[<span class=\"string\">'category'</span>]]=weather[<span class=\"string\">\"fcstValue\"</span>]</span><br><span class=\"line\">     </span><br><span class=\"line\">                            <span class=\"keyword\">elif</span> (weather[<span class=\"string\">'category'</span>] == <span class=\"string\">\"UUU\"</span>): <span class=\"comment\"># 동서바람성분</span></span><br><span class=\"line\">                                weatherDic[weather[<span class=\"string\">'category'</span>]]=weather[<span class=\"string\">\"fcstValue\"</span>]</span><br><span class=\"line\">     </span><br><span class=\"line\">                            <span class=\"keyword\">elif</span> (weather[<span class=\"string\">'category'</span>] == <span class=\"string\">\"VVV\"</span>): <span class=\"comment\"># 남북바람성분</span></span><br><span class=\"line\">                                weatherDic[weather[<span class=\"string\">'category'</span>]]=weather[<span class=\"string\">\"fcstValue\"</span>]</span><br><span class=\"line\">     </span><br><span class=\"line\">                            <span class=\"keyword\">elif</span> (weather[<span class=\"string\">'category'</span>] == <span class=\"string\">\"VEC\"</span>): <span class=\"comment\"># 풍향</span></span><br><span class=\"line\">                                weatherDic[weather[<span class=\"string\">'category'</span>]]=weather[<span class=\"string\">\"fcstValue\"</span>]</span><br><span class=\"line\">     </span><br><span class=\"line\">                            <span class=\"keyword\">elif</span> (weather[<span class=\"string\">'category'</span>] == <span class=\"string\">\"WSD\"</span>): <span class=\"comment\"># 풍속</span></span><br><span class=\"line\">                                weatherDic[weather[<span class=\"string\">'category'</span>]]=weather[<span class=\"string\">\"fcstValue\"</span>]</span><br><span class=\"line\">     </span><br><span class=\"line\">                    <span class=\"comment\"># <span class=\"doctag\">TODO:</span> 4. weatherDic에 저장되어 있는 값을 MySQL 에 저장하기 위해 List에 저장</span></span><br><span class=\"line\">                    string = dic.get(<span class=\"string\">'REGION_CD'</span>), dic.get(<span class=\"string\">'STATE_NAME'</span>), dic.get(<span class=\"string\">'CITY_NAME'</span>), weatherDic.get(<span class=\"string\">'SKY'</span>), weatherDic.get(<span class=\"string\">'T1H'</span>), weatherDic.get(<span class=\"string\">'REH'</span>), weatherDic.get(<span class=\"string\">'RN1'</span>), weatherDic.get(<span class=\"string\">'PTY'</span>), weatherDic.get(<span class=\"string\">'VEC'</span>), weatherDic.get(<span class=\"string\">'WSD'</span>)</span><br><span class=\"line\">                    mysqlList.append(string)</span><br><span class=\"line\">     </span><br><span class=\"line\">            cur.close()</span><br><span class=\"line\">     </span><br><span class=\"line\">        <span class=\"comment\"># <span class=\"doctag\">TODO:</span> 5. 기존에 저장된 MySQL의 날씨값 삭제.</span></span><br><span class=\"line\">        with conn.cursor(pymysql.cursors.DictCursor) as cur:</span><br><span class=\"line\">            query = <span class=\"string\">\"TRUNCATE NEW_WEATHER_STATUS;\"</span></span><br><span class=\"line\">            cur.execute(query)</span><br><span class=\"line\">            conn.commit()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"-------------\"</span>)</span><br><span class=\"line\">     </span><br><span class=\"line\">        <span class=\"comment\"># <span class=\"doctag\">TODO:</span> 6. 저장된 최종 List를 MySQL에 저장.</span></span><br><span class=\"line\">        with conn.cursor(pymysql.cursors.DictCursor) as cur:</span><br><span class=\"line\">            <span class=\"comment\"># 아무리 DB의 시스템시간을 바꾸어도 UTC+0인 시간만 오기에 어쩔 수 없이 \"DATE_ADD(NOW(), INTERVAL 9 HOUR)\" 를 넣었음.</span></span><br><span class=\"line\">            <span class=\"comment\"># 좋은 방법이 아니므로 다른 방법을 찾아야 하지 않을까? 지금 일단은 돌아감...</span></span><br><span class=\"line\">            query = <span class=\"string\">\"INSERT INTO NEW_WEATHER_STATUS (REGION_CD, STATE_NAME, CITY_NAME, ICON, TEMP, HUMI, RAINFALL, SNOWFALL, WINDDIR, WINDSPEED, REGISTER_AT) VALUES (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,DATE_ADD(NOW(), INTERVAL 9 HOUR));\"</span></span><br><span class=\"line\">            cur.executemany(query, mysqlList)</span><br><span class=\"line\">            conn.commit()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"-------------\"</span>)</span><br><span class=\"line\">     </span><br><span class=\"line\">    except ImportError as exc:</span><br><span class=\"line\">        raise ImportError(</span><br><span class=\"line\">            <span class=\"string\">\"Couldn't import Django. Are you sure it's installed and \"</span></span><br><span class=\"line\">            <span class=\"string\">\"available on your PYTHONPATH environment variable? Did you \"</span></span><br><span class=\"line\">            <span class=\"string\">\"forget to activate a virtual environment?\"</span></span><br><span class=\"line\">        ) from exc</span><br></pre></td></tr></table></figure></div>\n<ul>\n<li>소스는 주석도 넣어놨고, 굳이 이정도까지 설명해야 하나 싶을정도여서, 따로 설명하지 않겠다.</li>\n</ul>\n<h2 id=\"결과화면\"><a href=\"#결과화면\" class=\"headerlink\" title=\"결과화면\"></a>결과화면</h2><p><a href=\"https://user-images.githubusercontent.com/62123161/81513300-6f345480-9362-11ea-96fb-fad4d3532da1.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/81513300-6f345480-9362-11ea-96fb-fad4d3532da1.png\" alt=\"cloud9_08\"></a><br><a href=\"https://user-images.githubusercontent.com/62123161/81513298-6d6a9100-9362-11ea-880e-c24f94df6ecb.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/81513298-6d6a9100-9362-11ea-880e-c24f94df6ecb.png\" alt=\"cloud9_09\"></a></p>\n","text":"개발환경 구축※ 기본 개발환경IntelliJPythonAWS Console설정1) DashBoard [Figure] ","link":"","raw":null,"photos":[],"categories":[{"name":"aws","slug":"aws","count":16,"path":"api/categories/aws.json"}],"tags":[{"name":"AWS","slug":"AWS","count":18,"path":"api/tags/AWS.json"},{"name":"Cloud9","slug":"Cloud9","count":2,"path":"api/tags/Cloud9.json"},{"name":"Web","slug":"Web","count":2,"path":"api/tags/Web.json"},{"name":"Debugger","slug":"Debugger","count":2,"path":"api/tags/Debugger.json"},{"name":"python","slug":"python","count":4,"path":"api/tags/python.json"}]},{"title":"DynamoDB","slug":"DynamoDB","date":"2020-05-06T02:26:44.000Z","updated":"2020-11-23T01:31:25.287Z","comments":true,"pin":null,"path":"api/articles/DynamoDB.json","excerpt":"","keywords":null,"cover":"https://user-images.githubusercontent.com/62123161/81145311-fd01ef80-8fb0-11ea-9fe7-e2455a219030.png","content":"<h2 id=\"개발환경-구축\"><a href=\"#개발환경-구축\" class=\"headerlink\" title=\"개발환경 구축\"></a>개발환경 구축</h2><p>※ 기본 개발환경</p>\n<ul>\n<li>IntelliJ</li>\n<li>Java, Spring</li>\n<li>AWS Console</li>\n</ul>\n<h2 id=\"DynamoDB-설명\"><a href=\"#DynamoDB-설명\" class=\"headerlink\" title=\"DynamoDB 설명\"></a>DynamoDB 설명</h2><ol>\n<li>다 필요없다. 서버쪽 공부한 사람이라면 No SQL이라는 단어 하나만으로도 설명이 된다.</li>\n<li>RDB보다 아주 상당히 비싸다. 요금 기준이 읽기, 쓰기니까 그냥 한번 Access에도 요금이 발생한다.</li>\n<li>현재는 DynamoDB를 사용하기보다는 RDB를 사용하거나 Kinesis, SQS등 대체자원들을 검토중이다.</li>\n<li>솔직히 NoSQL의 특징을 여기에 쓰기에는 구글에 너무 많고 좋은 내용이 많으니 검색해보기 바란다.(검색의 생활화)</li>\n</ol>\n<h3 id=\"1-테이블-만들기\"><a href=\"#1-테이블-만들기\" class=\"headerlink\" title=\"1) 테이블 만들기\"></a>1) 테이블 만들기</h3><p><a href=\"https://user-images.githubusercontent.com/62123161/81145311-fd01ef80-8fb0-11ea-9fe7-e2455a219030.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/81145311-fd01ef80-8fb0-11ea-9fe7-e2455a219030.png\" alt=\"dynamodb_01\"></a></p>\n<ul>\n<li>별내용 없다. Table Name과 PK(PrimaryKey), SK(SortKey)를 지정해주면 된다.</li>\n<li>주의할 점은, Sort키를 잘 지정해야 한다는 것이다. 테이블이 로그성 테이블이 될지, 최신정보를 가질지 여부는 SK에 달려있으며, 조회에도 사용이 된다.(조회를 원활하게 하기 위해서는 SortKey를 지정 안해도된다.)</li>\n</ul>\n<h3 id=\"2-테이블-리스트-화면\"><a href=\"#2-테이블-리스트-화면\" class=\"headerlink\" title=\"2. 테이블 리스트 화면\"></a>2. 테이블 리스트 화면</h3><p><a href=\"https://user-images.githubusercontent.com/62123161/81145375-1f940880-8fb1-11ea-927c-1181dffbf9a1.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/81145375-1f940880-8fb1-11ea-927c-1181dffbf9a1.png\" alt=\"dynamodb_02\"></a></p>\n<ul>\n<li>테이블 생성은 완료되었으며, 기본 설정 외에 Ondemand 설정, 백업설정, 글로벌테이블, 인덱싱 등 자질구레한 설정들이 있다.</li>\n<li>테이블 성격에 맞게 해당 기능을 설정하면 되고, 기본적으로 Matrix는 제공을 해주니 CloudWatch정도만 추가설정 해주면 Table에 문제가 생겼을 경우 알람을 받을 수 있다.</li>\n</ul>\n<h3 id=\"2-소스\"><a href=\"#2-소스\" class=\"headerlink\" title=\"2) 소스\"></a>2) 소스</h3><h4 id=\"Gradle\"><a href=\"#Gradle\" class=\"headerlink\" title=\"Gradle\"></a>Gradle</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><figcaption><span>Dependency</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    implementation <span class=\"string\">'com.amazonaws:aws-lambda-java-core:1.2.0'</span></span><br><span class=\"line\">    implementation <span class=\"string\">'com.amazonaws:aws-lambda-java-events:2.2.6'</span></span><br><span class=\"line\">    compile group: <span class=\"string\">'com.amazonaws'</span>, name: <span class=\"string\">'aws-java-sdk-dynamodb'</span>, version: <span class=\"string\">'1.11.584'</span></span><br><span class=\"line\">    compile group: <span class=\"string\">'org.projectlombok'</span>, name: <span class=\"string\">'lombok'</span>, version: <span class=\"string\">'1.16.20'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"Define\"><a href=\"#Define\" class=\"headerlink\" title=\"Define\"></a>Define</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><figcaption><span>기본 Static 설정(사실 Static으로 두지 않아도 된다... 그냥 난 편의상..)</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static AmazonDynamoDB client = AmazonDynamoDBClientBuilder.standard().withRegion(Regions.US_EAST_1).build();</span><br><span class=\"line\">static DynamoDB dynamoDB = new DynamoDB(client);</span><br><span class=\"line\"> </span><br><span class=\"line\">static String tableName = <span class=\"string\">\"(TABLENAME)\"</span>;</span><br><span class=\"line\">static Map&lt;String, String&gt; mapAttribute = new HashMap&lt;String, String&gt;();</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"GET-Table-Information\"><a href=\"#GET-Table-Information\" class=\"headerlink\" title=\"GET Table Information\"></a>GET Table Information</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><figcaption><span>Table 정보 획득</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AmazonDynamoDB client = AmazonDynamoDBClientBuilder.standard().withRegion(Regions.US_EAST_1).build();</span><br><span class=\"line\">DescribeTableRequest request = new DescribeTableRequest().withTableName(tableName);</span><br><span class=\"line\">DescribeTableResult response = client.describeTable(request);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">for</span>(int i= 0; i&lt; response.getTable().getAttributeDefinitions().size();i++)&#123;</span><br><span class=\"line\">    mapAttribute.put(response.getTable().getAttributeDefinitions().get(i).getAttributeName(), response.getTable().getAttributeDefinitions().get(i).getAttributeType());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"Items-Insert\"><a href=\"#Items-Insert\" class=\"headerlink\" title=\"Items Insert\"></a>Items Insert</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><figcaption><span>Insert [Table] into (KEY) VALUES (VALUE)</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    private static String createItems(DynamoDB dynamoDB, String tableName, String primaryKey, String primaryValue, String rangeKey, String rangeValue, String createKeyValue) &#123;</span><br><span class=\"line\">        Table table = dynamoDB.getTable(tableName);</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            String[] createArr;</span><br><span class=\"line\">            UpdateItemOutcome outcome=null;</span><br><span class=\"line\">            createArr = createKeyValue.split(<span class=\"string\">\",\"</span>);</span><br><span class=\"line\">            Map&lt;String, AttributeValue&gt; values = new HashMap&lt;String, AttributeValue&gt;();</span><br><span class=\"line\"> </span><br><span class=\"line\">            <span class=\"keyword\">if</span>((createArr.length &amp; 1) == 0) &#123;</span><br><span class=\"line\">                //Even(정상)</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(int i=0; i&lt;createArr.length;i++)&#123;</span><br><span class=\"line\">                    values.put(createArr[i], new AttributeValue().withS(createArr[i+1]));</span><br><span class=\"line\"> </span><br><span class=\"line\">                    i++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                values.put(primaryKey,new AttributeValue().withN(primaryValue));</span><br><span class=\"line\">                values.put(rangeKey, new AttributeValue().withS(rangeValue));</span><br><span class=\"line\"> </span><br><span class=\"line\">                PutItemResult result = client.putItem(new PutItemRequest(tableName, values));</span><br><span class=\"line\">                String str = result.getSdkResponseMetadata().toString();</span><br><span class=\"line\">//                Item item = new Item()</span><br><span class=\"line\">//                        .withPrimaryKey(primaryKey, primaryValue)</span><br><span class=\"line\">//                        .withString(rangeKey, rangeValue);</span><br><span class=\"line\">//</span><br><span class=\"line\">//                table.putItem(item);</span><br><span class=\"line\">                // Confirm</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"Displaying updated item...\"</span>);</span><br><span class=\"line\">                System.out.println(str);</span><br><span class=\"line\">                <span class=\"built_in\">return</span> str;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                //Odd(비정상)</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"UpdateArr Odd...\"</span>);</span><br><span class=\"line\">                <span class=\"built_in\">return</span> <span class=\"string\">\"UpdateArr Odd...\"</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            System.err.println(<span class=\"string\">\"Cannot create items.\"</span>);</span><br><span class=\"line\">            System.err.println(e.getMessage());</span><br><span class=\"line\">            <span class=\"built_in\">return</span> e.getMessage();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"Items-Update\"><a href=\"#Items-Update\" class=\"headerlink\" title=\"Items Update\"></a>Items Update</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><figcaption><span>UPDATE [TABLE] SET (KEY_VALUE)</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//업데이트</span><br><span class=\"line\">private static String updateItem(DynamoDB dynamoDB, String tableName, String primaryKey, String primaryValue, String rangeKey, String rangeValue, String updateKeyValue) &#123;</span><br><span class=\"line\">    Table table = dynamoDB.getTable(tableName);</span><br><span class=\"line\"> </span><br><span class=\"line\">    long time3 = (new Date()).getTime();</span><br><span class=\"line\">    Date date3 = new Date();</span><br><span class=\"line\">    date3.setTime(time3);</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        //2개 이상 업데이트를 진행할 때</span><br><span class=\"line\">        UpdateItemSpec updateItemSpec = new UpdateItemSpec()</span><br><span class=\"line\">                .withPrimaryKey(primaryKey, Integer.parseInt(primaryValue), rangeKey, rangeValue)</span><br><span class=\"line\">                .withReturnValues(ReturnValue.ALL_NEW);</span><br><span class=\"line\">        //split</span><br><span class=\"line\">        String[] updateArr;</span><br><span class=\"line\">        UpdateItemOutcome outcome=null;</span><br><span class=\"line\">        updateArr = updateKeyValue.split(<span class=\"string\">\",\"</span>);</span><br><span class=\"line\">        HashMap&lt;String, String&gt; nameMap = new HashMap&lt;String, String&gt;();</span><br><span class=\"line\">        HashMap&lt;String, Object&gt; valueMap = new HashMap&lt;String, Object&gt;();</span><br><span class=\"line\">        String expressionMessage = <span class=\"string\">\"set \"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>((updateArr.length &amp; 1) == 0) &#123;</span><br><span class=\"line\">            //Even(정상)</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(int i=0; i&lt;updateArr.length;i++)&#123;</span><br><span class=\"line\">                nameMap.put(<span class=\"string\">\"#\"</span>+updateArr[i], updateArr[i]);</span><br><span class=\"line\">                valueMap.put(<span class=\"string\">\":val\"</span>+updateArr[i],updateArr[i+1]);</span><br><span class=\"line\"> </span><br><span class=\"line\">                expressionMessage += <span class=\"string\">\"#\"</span>+updateArr[i] + <span class=\"string\">\"=\"</span>+<span class=\"string\">\":val\"</span>+updateArr[i];</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i/2&lt;updateArr.length/2 -1)&#123;</span><br><span class=\"line\">                    expressionMessage += <span class=\"string\">\" , \"</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            updateItemSpec.withUpdateExpression(expressionMessage)</span><br><span class=\"line\">                        .withNameMap(nameMap)</span><br><span class=\"line\">                        .withValueMap(valueMap);</span><br><span class=\"line\"> </span><br><span class=\"line\">            outcome =  table.updateItem(updateItemSpec);</span><br><span class=\"line\">            // Confirm</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"Displaying updated item...\"</span>);</span><br><span class=\"line\">            System.out.println(outcome.getItem().toJSONPretty());</span><br><span class=\"line\">            <span class=\"built_in\">return</span> outcome.getItem().toJSONPretty();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            //Odd(비정상)</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"UpdateArr Odd...\"</span>);</span><br><span class=\"line\">            <span class=\"built_in\">return</span> <span class=\"string\">\"UpdateArr Odd...\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; catch (Exception e) &#123;</span><br><span class=\"line\">        System.err.println(<span class=\"string\">\"Cannot add an attribute in \"</span> + tableName);</span><br><span class=\"line\">        System.err.println(e.getMessage());</span><br><span class=\"line\">        <span class=\"built_in\">return</span> e.getMessage();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"Items-Select-WHERE\"><a href=\"#Items-Select-WHERE\" class=\"headerlink\" title=\"Items Select(WHERE)\"></a>Items Select(WHERE)</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><figcaption><span>SELECT * FROM [TABLE] WHERE <String></span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Select(조건)</span><br><span class=\"line\">private static String selectWhereItem(DynamoDB dynamoDB, String tableName, String primaryKey, String primaryValue, String rangeKey, String rangeValue, String <span class=\"built_in\">where</span>) &#123;</span><br><span class=\"line\">    Table table = dynamoDB.getTable(tableName);</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        Item item = table.getItem(primaryKey,Integer.parseInt(primaryValue),rangeKey,rangeValue,<span class=\"built_in\">where</span>,null);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Displaying retrieved items...\"</span>);</span><br><span class=\"line\">        System.out.println(item.toJSONPretty());</span><br><span class=\"line\">        <span class=\"built_in\">return</span> item.toString();</span><br><span class=\"line\">    &#125; catch (Exception e) &#123;</span><br><span class=\"line\">        System.err.println(<span class=\"string\">\"Cannot retrieve items.\"</span>);</span><br><span class=\"line\">        System.err.println(e.getMessage());</span><br><span class=\"line\">        <span class=\"built_in\">return</span> e.getMessage();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"Items-Select\"><a href=\"#Items-Select\" class=\"headerlink\" title=\"Items Select\"></a>Items Select</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><figcaption><span>SELECT * FROM [TABLE] </span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Select(전체)</span><br><span class=\"line\">private static String selectItem(DynamoDB dynamoDB, String tableName, String primaryKey, String primaryValue, String rangeKey, String rangeValue) &#123;</span><br><span class=\"line\">    Table table = dynamoDB.getTable(tableName);</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        Item item = table.getItem(primaryKey,Integer.parseInt(primaryValue),rangeKey,rangeValue);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Displaying retrieved items...\"</span>);</span><br><span class=\"line\">        System.out.println(item.toJSONPretty());</span><br><span class=\"line\">        <span class=\"built_in\">return</span> item.toString();</span><br><span class=\"line\">    &#125; catch (Exception e) &#123;</span><br><span class=\"line\">        System.err.println(<span class=\"string\">\"Cannot retrieve items.\"</span>);</span><br><span class=\"line\">        System.err.println(e.getMessage());</span><br><span class=\"line\">        <span class=\"built_in\">return</span> e.getMessage();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"Items-Delete-당연히-조건-전체삭제는-테이블-Drop-Create-하는게-훨씬낫다\"><a href=\"#Items-Delete-당연히-조건-전체삭제는-테이블-Drop-Create-하는게-훨씬낫다\" class=\"headerlink\" title=\"Items Delete(당연히 조건- 전체삭제는 테이블 Drop/Create 하는게 훨씬낫다)\"></a>Items Delete(당연히 조건- 전체삭제는 테이블 Drop/Create 하는게 훨씬낫다)</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><figcaption><span>DELETE FROM [TABLE] WHERE <String></span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//삭제</span><br><span class=\"line\">    public static String deleteItem(DynamoDB dynamoDB, String tableName, String primaryKey, String primaryValue, String rangeKey, String rangeValue) &#123;</span><br><span class=\"line\">        Table table = dynamoDB.getTable(tableName);</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            DeleteItemSpec deleteItemSpec = new DeleteItemSpec()</span><br><span class=\"line\">                    .withPrimaryKey(primaryKey, Integer.parseInt(primaryValue), rangeKey, rangeValue)</span><br><span class=\"line\">//                    .withConditionExpression(<span class=\"string\">\"#ip = :val\"</span>)</span><br><span class=\"line\">//                    .withNameMap(new NameMap().with(<span class=\"string\">\"#ip\"</span>, <span class=\"string\">\"InProduction\"</span>))</span><br><span class=\"line\">//                    .withValueMap(new ValueMap().withBoolean(<span class=\"string\">\":val\"</span>, <span class=\"literal\">false</span>))</span><br><span class=\"line\">                    .withReturnValues(ReturnValue.ALL_OLD);</span><br><span class=\"line\">            DeleteItemOutcome outcome = table.deleteItem(deleteItemSpec);</span><br><span class=\"line\"> </span><br><span class=\"line\">            // Confirm</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"Displaying deleted item...\"</span>);</span><br><span class=\"line\">            System.out.println(outcome.getItem().toJSONPretty());</span><br><span class=\"line\">            <span class=\"built_in\">return</span> outcome.getItem().toJSONPretty();</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            System.err.println(<span class=\"string\">\"Cannot delete item in \"</span> + tableName);</span><br><span class=\"line\">            System.err.println(e.getMessage());</span><br><span class=\"line\">            <span class=\"built_in\">return</span> e.getMessage();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"3-결론\"><a href=\"#3-결론\" class=\"headerlink\" title=\"3) 결론\"></a>3) 결론</h3><ul>\n<li>솔직히, 비용만 아니면 이보다 더 좋을수 없다고 느낄정도로 퍼포먼스가 최상이다.</li>\n<li>원가절감을 최우선 과제중 하나로 생각하는 경동에서는 원가절감하자 그냥 ㅡㅡ… 개발자가 고생해서 퍼포먼스를 비슷한 수준까지 끌어올려야지 어떻게하겠나.</li>\n</ul>\n","text":"개발환경 구축※ 기본 개발환경IntelliJJava, SpringAWS ConsoleDynamoDB 설명다 필요없다. 서버쪽 공부한 사람이라면 No SQL이라는 단어 하나만으로도 설명이 된다.RDB보다 아주 상당히 비싸다. 요금 기준이 읽기, 쓰기니까","link":"","raw":null,"photos":[],"categories":[{"name":"aws","slug":"aws","count":16,"path":"api/categories/aws.json"}],"tags":[{"name":"AWS","slug":"AWS","count":18,"path":"api/tags/AWS.json"},{"name":"dynamo","slug":"dynamo","count":1,"path":"api/tags/dynamo.json"},{"name":"noSQL","slug":"noSQL","count":1,"path":"api/tags/noSQL.json"}]},{"title":"Fargate","slug":"Fargate","date":"2021-03-01T01:45:56.000Z","updated":"2021-02-23T01:50:19.654Z","comments":true,"pin":null,"path":"api/articles/Fargate.json","excerpt":"","keywords":null,"cover":null,"content":"<h3 id=\"Fargate란\"><a href=\"#Fargate란\" class=\"headerlink\" title=\"Fargate란?\"></a>Fargate란?</h3><ul>\n<li>ECS<sup>Elastic Container Service</sup> 의 하나의 옵션이었음.</li>\n<li>기존 ECS는 EC2의 인스턴스 클러스터를 관리, 사용률 모니터링 등을 사용자가 수행해야 했지만, EC2 자원관리를 AWS에 맡겨 서버의 프로비저닝이나 스케일링에 대해 생각하지 않고 컨테이너, Application에 집중해서 구축 할 수 있는 장점이 있음.</li>\n<li>서버를 관리하지 않는다는 관점에서 Lambda랑 비슷하기에 컨테이너버전의 Serverless라고 불리기도 함. (람다와 달리 성능, 시간제한같은게 없다.)</li>\n</ul>\n<h3 id=\"가격\"><a href=\"#가격\" class=\"headerlink\" title=\"가격?\"></a>가격?</h3><ul>\n<li>t2.Micro 보다 비싼편 ($0.00511USD/hour)</li>\n<li>다만, CPU를 0.25(1/4)로 사용이 가능하기에 어느정도 절약은 가능.</li>\n</ul>\n<h3 id=\"적용방법\"><a href=\"#적용방법\" class=\"headerlink\" title=\"적용방법\"></a>적용방법</h3><ol>\n<li>IAM 계정 생성</li>\n<li>도커 이미지 생성 및 ECR에 등록</li>\n</ol>\n<ul>\n<li>aws cli 환경설정</li>\n<li>Docker 이미지용 Application 작성</li>\n<li>ECR에 repository 생성</li>\n<li>ECR에 repository에 Docker Image 올리기</li>\n</ul>\n<ol start=\"3\">\n<li>작업 정의</li>\n</ol>\n<ul>\n<li>작업 정의 생성</li>\n<li>작업 정의에 컨테이너 추가</li>\n</ul>\n<ol start=\"4\">\n<li>클러스터 및 서비스 생성</li>\n</ol>\n<ul>\n<li>클러스터 생성</li>\n<li>서비스 생성</li>\n<li>서비스 확인</li>\n</ul>\n","text":"Fargate란?ECSElastic Container Service 의 하나의 옵션이었음.기존 ECS는 EC2의 인스턴스 클러스터를 관리, 사용률 모니터링 등을 사용자가 수행해야 했지만, EC2 자원관리를 AWS에 맡겨 서버의 프로비저닝이나 스케일링에","link":"","raw":null,"photos":[],"categories":[{"name":"aws","slug":"aws","count":16,"path":"api/categories/aws.json"}],"tags":[{"name":"AWS","slug":"AWS","count":18,"path":"api/tags/AWS.json"},{"name":"ECS","slug":"ECS","count":2,"path":"api/tags/ECS.json"},{"name":"fargate","slug":"fargate","count":1,"path":"api/tags/fargate.json"}]},{"title":"ECS","slug":"ECS","date":"2021-03-01T01:32:32.000Z","updated":"2021-02-23T01:48:58.895Z","comments":true,"pin":null,"path":"api/articles/ECS.json","excerpt":"","keywords":null,"cover":"https://user-images.githubusercontent.com/56995911/108791589-c68a7500-75c2-11eb-895d-07dc43f35c83.png","content":"<h3 id=\"ECSElastic-Container-Service란\"><a href=\"#ECSElastic-Container-Service란\" class=\"headerlink\" title=\"ECSElastic Container Service란 ?\"></a>ECS<sup>Elastic Container Service</sup>란 ?</h3><ul>\n<li>도커<sup>Docker</sup>는 응용프로그램들을 소프트웨어 컨테이너안에 배치시키고 이를 신속하게 구축, 테스트, 배포 가능한 소프트웨어 플랫폼</li>\n<li>컨테이너 가상화에 기반한 서비스</li>\n<li>엘라스틱 컨테이너 서비스<sup>Elastic Container Service</sup> 는 이런 Docker컨테이너를 관리해주는 오케스트레이션 도구.</li>\n<li>비슷한 오케스트레이션 도구로는 도커에서 만든 스웜<sup>Swarm</sup>, 구글<sup>Google</sup>의 노하우가 담겨있는 쿠버네티스<sup>Kubernetes</sup>, 하시코프의 노마드<sup>Nomad</sup> 등이 있음.</li>\n<li>Fargate 시작유형 / EC2 시작유형 으로 분리되어 있음.</li>\n</ul>\n<h3 id=\"ECSElastic-Container-Service사용시-이점\"><a href=\"#ECSElastic-Container-Service사용시-이점\" class=\"headerlink\" title=\"ECSElastic Container Service사용시 이점 ?\"></a>ECS<sup>Elastic Container Service</sup>사용시 이점 ?</h3><ul>\n<li>간단한 API 호출을 사용하여 컨테이너 기반 애플리케이션을 시작 및 중지할 수 있다.</li>\n<li>중앙 집중식 서비스를 사용하여 클러스터 상태를 확인할 수 있다</li>\n<li>다수의 친숙한 EC2 기능에 액세스할 수 있다.</li>\n<li>일관된 배포 및 구축 환경을 생성하고, 배치 및 ETL(Extract-Transform-Load) 워크로드를 관리 및 크기 조정하고, 마이크로 서비스 모델에 정교한 애플리케이션 아키텍처를 구축할 수 있다.</li>\n</ul>\n<h3 id=\"클러스터Cluster와-클러스터-인스턴스Cluster-Instance\"><a href=\"#클러스터Cluster와-클러스터-인스턴스Cluster-Instance\" class=\"headerlink\" title=\"클러스터Cluster와 클러스터 인스턴스Cluster Instance\"></a>클러스터<sup>Cluster</sup>와 클러스터 인스턴스<sup>Cluster Instance</sup></h3><p><a href=\"https://user-images.githubusercontent.com/56995911/108791589-c68a7500-75c2-11eb-895d-07dc43f35c83.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/108791589-c68a7500-75c2-11eb-895d-07dc43f35c83.png\" alt=\"image\"></a></p>\n<h4 id=\"클러스터Cluster\"><a href=\"#클러스터Cluster\" class=\"headerlink\" title=\"클러스터Cluster\"></a>클러스터<sup>Cluster</sup></h4><ul>\n<li>ECS의 가장 기본 단위는 Cluster</li>\n<li>도커 컨테이너를 실행할 수 있는 가상의 공간</li>\n<li>EC2와 다른점은 컴퓨팅자원을 기본적으로 갖고있지 않다는 것.</li>\n<li>A라는 기능(프로젝트)을 수행하는 컨테이너들은 A클러스트 내에서만 동작하고, B프로젝트 컨테이너들은 B클러스터 내에서만 동작하는 방식.</li>\n</ul>\n<h4 id=\"클러스터-인스턴스Cluster-Instance\"><a href=\"#클러스터-인스턴스Cluster-Instance\" class=\"headerlink\" title=\"클러스터 인스턴스Cluster Instance\"></a>클러스터 인스턴스<sup>Cluster Instance</sup></h4><ul>\n<li>클러스터에 연결된 EC2인스턴스</li>\n<li>EC2의 ecs-client라는 서비스를 활용해 특정 Cluster로 연결이 가능함.</li>\n<li>ecs-client는 컨테이너 인스턴스의 자원을 모니터링, 관리 등 적절하게 실행하는 역할을 해줌.</li>\n</ul>\n<h3 id=\"태스크Task와-태스크-디피니션Task-definition\"><a href=\"#태스크Task와-태스크-디피니션Task-definition\" class=\"headerlink\" title=\"태스크Task와 태스크 디피니션Task definition\"></a>태스크<sup>Task</sup>와 태스크 디피니션<sup>Task definition</sup></h3><p><a href=\"https://user-images.githubusercontent.com/56995911/108791719-1c5f1d00-75c3-11eb-9b0c-721c0dedccf1.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/108791719-1c5f1d00-75c3-11eb-9b0c-721c0dedccf1.png\" alt=\"image\"></a></p>\n<h4 id=\"태스크Task\"><a href=\"#태스크Task\" class=\"headerlink\" title=\"태스크Task\"></a>태스크<sup>Task</sup></h4><ul>\n<li>ECS에서 컨테이너를 실행하는 최소단위.</li>\n<li>컨테이너가 2개이상 모였을때 태스크로 구성가능함.</li>\n<li>같은 태스크 내에 있는 컨테이너들은 모두 같은 컨테이너 인스턴스에서 실행되는것이 보장됨.</li>\n</ul>\n<h4 id=\"태스크-디피니션Task-definition\"><a href=\"#태스크-디피니션Task-definition\" class=\"headerlink\" title=\"태스크 디피니션Task definition\"></a>태스크 디피니션<sup>Task definition</sup></h4><ul>\n<li>컨테이너 네트워크모드, 테스크 Role, 도커이미지, 실행명령어, CPU제한, 메모리 제한 등의 설정을 해주는 태스크관리 역할을 함.</li>\n<li>매번 설정을 해주기 번거로우니 미리 설정의 집합을 하나의 단위로 정의해놓고 사용.</li>\n<li>Task는 클러스터에 종속적이지만, Task Definition(리비전)은 클러스터에 종속되지 않음.<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"family\"</span>: <span class=\"string\">\"webserver\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"containerDefinitions\"</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"string\">\"name\"</span>: <span class=\"string\">\"web\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"image\"</span>: <span class=\"string\">\"nginx\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"memory\"</span>: <span class=\"string\">\"100\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"cpu\"</span>: <span class=\"string\">\"99\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">\"requiresCompatibilities\"</span>: [</span><br><span class=\"line\">        <span class=\"string\">\"FARGATE\"</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">\"networkMode\"</span>: <span class=\"string\">\"awsvpc\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"memory\"</span>: <span class=\"string\">\"512\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"cpu\"</span>: <span class=\"string\">\"256\"</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n</li>\n</ul>\n<h3 id=\"서비스Service\"><a href=\"#서비스Service\" class=\"headerlink\" title=\"서비스Service\"></a>서비스<sup>Service</sup></h3><p><a href=\"https://user-images.githubusercontent.com/56995911/108792157-fab26580-75c3-11eb-9946-8ca66a93547c.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/56995911/108792157-fab26580-75c3-11eb-9946-8ca66a93547c.png\" alt=\"image\"></a></p>\n<ol>\n<li>Task Definition을 사용하여 1회성으로 실행하는 방법.<br>1) 한번 실행되고 종료되며, 데몬위에서 프로세스로 돌아가는 상황에서 종료 스크립트가 없으면 컨테이너가 남아있을 수 있음.<br>2) 특수한 경우가 아니면 사용되지 않음.</li>\n<li>서비스를 정의하는 방법<br>1) 리플리카 타입</li>\n</ol>\n<ul>\n<li>테스크의 갯수를 지정해주면 자동으로 실행되도록 관리해줌.</li>\n<li>웹서버들에서 사용됨.<br>2) 데몬 타입</li>\n<li>모든 컨테이너 인스턴스에 해당 테스크가 하나씩 실행됨.</li>\n</ul>\n<h3 id=\"엘라스틱-컨테이너-레지스트리Elastic-Conatiner-Registry\"><a href=\"#엘라스틱-컨테이너-레지스트리Elastic-Conatiner-Registry\" class=\"headerlink\" title=\"엘라스틱 컨테이너 레지스트리Elastic Conatiner Registry\"></a>엘라스틱 컨테이너 레지스트리<sup>Elastic Conatiner Registry</sup></h3><ul>\n<li>줄여서 ECR</li>\n<li>도커이미지를 관리해줌.</li>\n<li>콘솔에서 보여줄 수 있으며, 바로 이미지를 불러올 수 있음.</li>\n<li>일반적으로는 Docker hub가 있지만, 무료로는 프라이빗한 이미지는 1개뿐이 저장이 되지 않음.</li>\n</ul>\n<h3 id=\"컨테이너-에이전트Container-Agent\"><a href=\"#컨테이너-에이전트Container-Agent\" class=\"headerlink\" title=\"컨테이너 에이전트Container Agent\"></a>컨테이너 에이전트<sup>Container Agent<sup></h3><ul>\n<li>ECS 클러스터의 각 인프라 Resource에서 실행.</li>\n<li>현재 실행중인 작업과 Resource 사용률에 대한 정보를 ECS로 전송하고 ECS는 Event가 들어올때마다 작업을 시작 or 중지.</li>\n</ul>\n","text":"ECSElastic Container Service란 ?도커Docker는 응용프로그램들을 소프트웨어 컨테이너안에 배치시키고 이를 신속하게 구축, 테스트, 배포 가능한 소프트웨어 플랫폼컨테이너 가상화에 기반한 서비스엘라스틱 컨테이너 서비스Elastic ","link":"","raw":null,"photos":[],"categories":[{"name":"aws","slug":"aws","count":16,"path":"api/categories/aws.json"}],"tags":[{"name":"AWS","slug":"AWS","count":18,"path":"api/tags/AWS.json"},{"name":"ECS","slug":"ECS","count":2,"path":"api/tags/ECS.json"},{"name":"EC2","slug":"EC2","count":1,"path":"api/tags/EC2.json"}]},{"title":"Kinesis WebRTC","slug":"Kinesis-WebRTC","date":"2021-03-11T07:10:56.000Z","updated":"2021-03-11T07:22:26.936Z","comments":true,"pin":null,"path":"api/articles/Kinesis-WebRTC.json","excerpt":"","keywords":null,"cover":"https://user-images.githubusercontent.com/62123161/110749545-99a5b580-8284-11eb-8fad-54274432de3a.png","content":"<h2 id=\"WebRTC-가격비교\"><a href=\"#WebRTC-가격비교\" class=\"headerlink\" title=\"WebRTC 가격비교\"></a>WebRTC 가격비교</h2><p>WebRTC 기능을 사용하면 해당 월의 활성 상태인 신호 채널 수, 송수신된 신호 메시지 수 및 미디어 중계에 사용된 TURN 스트리밍 분에 따라 부과됩니다.</p>\n<p>해당 월 기간에 언제든지 디바이스 또는 애플리케이션이 신호 채널에 연결되면 신호 채널은 활성으로 간주됩니다. TURN 스트리밍 분은 1분 간격으로 계량됩니다.</p>\n<p><a href=\"https://user-images.githubusercontent.com/62123161/110749545-99a5b580-8284-11eb-8fad-54274432de3a.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/110749545-99a5b580-8284-11eb-8fad-54274432de3a.png\" alt=\"image\"></a></p>\n<h2 id=\"WebRTC-검토\"><a href=\"#WebRTC-검토\" class=\"headerlink\" title=\"WebRTC 검토\"></a>WebRTC 검토</h2><h3 id=\"OverView\"><a href=\"#OverView\" class=\"headerlink\" title=\"OverView\"></a>OverView</h3><ul>\n<li>Official Site : <a href=\"https://webrtc.org\" target=\"_blank\" rel=\"noopener\">https://webrtc.org</a></li>\n<li>W3C Specification : <a href=\"https://w3c.github.io/webrtc-pc/\" target=\"_blank\" rel=\"noopener\">https://w3c.github.io/webrtc-pc/</a> (latest published version : WebRTC 1.0: Real-Time Communication Between Browsers (w3.org))</li>\n<li>Associated Test Suite (Browser base)</li>\n<li>wpt/webrtc at master · web-platform-tests/wpt · GitHub</li>\n<li>Web 기반, Peer to Peer 실시간 비디오/오디오 통신 Specification</li>\n</ul>\n<p><a href=\"https://user-images.githubusercontent.com/62123161/110749938-189aee00-8285-11eb-9227-93f4fc395e61.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/110749938-189aee00-8285-11eb-9227-93f4fc395e61.png\" alt=\"image\"></a></p>\n<ul>\n<li><p>각종 브라우저에서 기본 WebRTC Framework 을 지원하고 , 브라우저를 통해서는 별다른 설정없이 1:1 실시간 화상통화 기능은 즉시 사용가능함.<br>&nbsp;&nbsp; - 브라우저 자체엔진에서 WebRTC Framework 탑재.<br>&nbsp;&nbsp; - HTML 기반 API 제공하고 있음.<br>&nbsp;&nbsp; - OS or Browser Version 별 지원내역 ( ref&gt; wikipedia )<br>&nbsp;&nbsp;&nbsp;&nbsp; - Desktop Browser (MS-Edge 12+, Google Chrome 28+, Mozilla Firefox 22+, Safari 11+, Opera 18+, Vivaldi 1.9+)<br>&nbsp;&nbsp;&nbsp;&nbsp; - Android (Google Chrome 28+, Mozilla Firefox 24+, Opera Mobile 12+)<br>&nbsp;&nbsp;&nbsp;&nbsp; - Chrome OS / Firefox OS / BlackBerry 10<br>&nbsp;&nbsp;&nbsp;&nbsp; - iOS 11(MobileSafari/WebKit)<br>&nbsp;&nbsp;&nbsp;&nbsp; - Tizen 3.0</p>\n</li>\n<li><p>1:1 (Peer to Peer) 동작 지원이 기본 사양.</p>\n</li>\n<li><p>1:N 및 방화벽을 경유하는 영상/음성 전송을 제공하기 위해서는 별도의 서버(TURN/STUN) 를 구축 필요.<br>&nbsp;&nbsp; - 대부분의 방화벽모델은 Port Forwarding Rule 설정을 통해 해결됨.<br>&nbsp;&nbsp; - 방화벽이 Symmetric NAT 인 경우 Outbound IP Address 가 달라지므로, 외부에서 접속할 방법이 없어져 동작 불가능.<br>&nbsp;&nbsp; Solution) TURN Relay  : Public Domain 에 Relay Server 를 두고 이를 통해 영상/음성 Data 를 Routing 하는 것으로 해결.</p>\n</li>\n</ul>\n<h3 id=\"Protocol-Stack\"><a href=\"#Protocol-Stack\" class=\"headerlink\" title=\"Protocol Stack\"></a>Protocol Stack</h3><ul>\n<li>WebRTC 기능 개발시 RTCPeerConnection , RTCDataChannel API 는 아래와 같이 구성됨.</li>\n<li>Secure 채널을 제공하기위해 ICE/STUN/TURN 위에 DTLS 를 사용.(Mandatory feature)</li>\n<li>UDP 특성상 congestion control , flow control reliability 를 제공하지 않음에 따라</li>\n<li>SRTP / SCTP 를 통한 Connection setup / Data Delivery 를 사용함.</li>\n</ul>\n<p><a href=\"https://user-images.githubusercontent.com/62123161/110750295-9ced7100-8285-11eb-82a8-affa6f8e55d4.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/110750295-9ced7100-8285-11eb-82a8-affa6f8e55d4.png\" alt=\"image\"></a></p>\n<h3 id=\"APIs\"><a href=\"#APIs\" class=\"headerlink\" title=\"APIs\"></a>APIs</h3><p>WebRTC 의 주요 구성요소는 각 Platform ( Browser 기반, Android 기반, iOS 기반 ) 별로 표준화된(유사한) API 를 제공하고,<br>이를 통해 각 Client Application 을 제작, 배포 가능.</p>\n<h4 id=\"Interfaces\"><a href=\"#Interfaces\" class=\"headerlink\" title=\"Interfaces\"></a>Interfaces</h4><ul>\n<li>getUserMedia<br>&nbsp;&nbsp; - Webcam/audio등의 사용권한 요청.</li>\n<li>RTCPeerConnection<br>&nbsp;&nbsp; - ICE agent 역할을 수행하는 Object, Signaling channel을 통해 획득한 sdp/ice candidate등을 등록하여, ICE gathering수행.<br>&nbsp;&nbsp; - RTCIceCanddiate/ RTCConfiguration 객체등을 사용함.<br>&nbsp;&nbsp; - Peer와 컨넥션 생성 후 미디어 전송을 위한 RTCRtpSender/RTCRtpReceiver/RTCRtpTransceiver등을 획득할 수 있음.<br>&nbsp;&nbsp; - addTrack을 이용해서 전송하고자 하는 미디어 트랙을 추가 할 수 있음<br>&nbsp;&nbsp; - createDataChennel을 통해서 데이터 전송을 위한 커넥션 생성가능. (채팅/파일전송등)</li>\n<li>RTCDataChannel</li>\n<li>RTCDataChannelEvent</li>\n<li>RTCSessionDescription<br>&nbsp;&nbsp; - SDP정보</li>\n<li>RTCStatsReport</li>\n<li>RTCIceCandidate<br>&nbsp;&nbsp; - ICE candidate정보</li>\n<li>RTCIceTransport<br>&nbsp;&nbsp; - ICE agent의 상태확인 가능/ gathering state/ local, remote candidates, 이 Agent의 role./ selected candidate pair등</li>\n<li>RTCPeerConnectionIceEvent</li>\n<li>RTCRtpSender<br>&nbsp;&nbsp; - 주어진 MediaStreamTrack의 전송을 제어 할 수 있음.<br>&nbsp;&nbsp; - MediaStreamTrack변경<br>&nbsp;&nbsp; - 전송상태 확인가능</li>\n<li>RTCRtpReceiver<br>&nbsp;&nbsp; - 수신중인 MediaStream의 미디어속성/TLS속성/상태 확인가능.</li>\n<li>RTCTrackEvent</li>\n<li>RTCSctpTransport</li>\n</ul>\n<h3 id=\"Service-Component\"><a href=\"#Service-Component\" class=\"headerlink\" title=\"Service Component\"></a>Service Component</h3><p>WebRTC Service 는 다음 세가지로 구성되고 서비스 목적에 따라 각 구성 요소별 별도 Configuration 이 필요</p>\n<ul>\n<li><p>WebRTC Gateway<br>WebRTC 의 Signaling 방식은 Web 방식임에 따라 각 Peer 간의 initial Connection 을 위해 WebServer 가 필요함.<br>node.js 또는 XHR 처리가 가능한 Server 로 구성필요.</p>\n</li>\n<li><p>WebRTC Client</p>\n</li>\n<li><p>TURN/STUN Server</p>\n</li>\n</ul>\n","text":"WebRTC 가격비교WebRTC 기능을 사용하면 해당 월의 활성 상태인 신호 채널 수, 송수신된 신호 메시지 수 및 미디어 중계에 사용된 TURN 스트리밍 분에 따라 부과됩니다.해당 월 기간에 언제든지 디바이스 또는 애플리케이션이 신호 채널에 연결되면","link":"","raw":null,"photos":[],"categories":[{"name":"aws","slug":"aws","count":16,"path":"api/categories/aws.json"}],"tags":[{"name":"AWS","slug":"AWS","count":18,"path":"api/tags/AWS.json"},{"name":"Kinesis","slug":"Kinesis","count":4,"path":"api/tags/Kinesis.json"},{"name":"WebRTC","slug":"WebRTC","count":1,"path":"api/tags/WebRTC.json"}]},{"title":"Lambda Python ColdStart Test","slug":"LambdaPythonColdStart","date":"2020-05-06T23:38:19.000Z","updated":"2020-11-23T01:31:25.287Z","comments":true,"pin":null,"path":"api/articles/LambdaPythonColdStart.json","excerpt":"","keywords":null,"cover":"https://user-images.githubusercontent.com/62123161/81248123-a9e27800-9056-11ea-9be2-3d469e5aca52.png","content":"<h2 id=\"개발환경-구축\"><a href=\"#개발환경-구축\" class=\"headerlink\" title=\"개발환경 구축\"></a>개발환경 구축</h2><p>※ 기본 개발환경</p>\n<ul>\n<li>IntelliJ</li>\n<li>Python</li>\n<li>AWS Console</li>\n</ul>\n<h2 id=\"Lambda-Python-설명\"><a href=\"#Lambda-Python-설명\" class=\"headerlink\" title=\"Lambda Python 설명\"></a>Lambda Python 설명</h2><ul>\n<li>팀장님께서 조사하신 내용을 토대로 Java가 콜드스타트에서 많은 시간을 소모한다는 점에 착안하여 Python으로 시도해보기로 함.</li>\n<li>Node로도 Python과 큰 차이없는 성능을 보여주었던 만큼 기대하고 테스트를 진행함.</li>\n</ul>\n<h2 id=\"설정\"><a href=\"#설정\" class=\"headerlink\" title=\"설정\"></a>설정</h2><ol>\n<li>pymysql 라이브러리를 Python 코드에 넣어야 함.</li>\n<li>가능하면 Layer에 넎어주는 편이 좋다.</li>\n</ol>\n<h3 id=\"개발\"><a href=\"#개발\" class=\"headerlink\" title=\"개발\"></a>개발</h3><h4 id=\"1-Lambda-접속\"><a href=\"#1-Lambda-접속\" class=\"headerlink\" title=\"1) Lambda 접속\"></a>1) Lambda 접속</h4><p><a href=\"https://user-images.githubusercontent.com/62123161/81248123-a9e27800-9056-11ea-9be2-3d469e5aca52.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/81248123-a9e27800-9056-11ea-9be2-3d469e5aca52.png\" alt=\"lambdapython_01\"></a></p>\n<h4 id=\"2-Create-Function-클릭-및-IAM권한까지-해서-함수생성\"><a href=\"#2-Create-Function-클릭-및-IAM권한까지-해서-함수생성\" class=\"headerlink\" title=\"2) Create Function 클릭 및 IAM권한까지 해서 함수생성\"></a>2) Create Function 클릭 및 IAM권한까지 해서 함수생성</h4><p><a href=\"https://user-images.githubusercontent.com/62123161/81248121-a949e180-9056-11ea-8148-4a19eb45aa0e.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/81248121-a949e180-9056-11ea-8148-4a19eb45aa0e.png\" alt=\"lambdapython_02\"></a></p>\n<h4 id=\"3-Layer이라는-곳이-있음\"><a href=\"#3-Layer이라는-곳이-있음\" class=\"headerlink\" title=\"3) Layer이라는 곳이 있음.\"></a>3) Layer이라는 곳이 있음.</h4><ul>\n<li>자주쓰는 라이브러리들을 여기에 등록해서 땡겨쓰는건데, 필요하면 이 부분은 따로 설명하는 부분을 만들어야 할 듯.</li>\n<li>기본개념은 람다 밑에 계층을 만들어서 계층 내의 라이브러리를 저장해서 필요할때마다 import 해서 쓰는 개념.</li>\n<li>(참고로 아직 제대로 써보는 방법도 못찾아봤음)<br><a href=\"https://user-images.githubusercontent.com/62123161/81248120-a7801e00-9056-11ea-8709-a15ce1cbda8b.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/81248120-a7801e00-9056-11ea-8709-a15ce1cbda8b.png\" alt=\"lambdapython_03\"></a></li>\n</ul>\n<h4 id=\"4-Code-entry-type을-Upload-zip-file로-변경하고-밑의-Upload를-선택하여-위에-다운받은-파일을-넣는다\"><a href=\"#4-Code-entry-type을-Upload-zip-file로-변경하고-밑의-Upload를-선택하여-위에-다운받은-파일을-넣는다\" class=\"headerlink\" title=\"4) Code entry type을 Upload zip file로 변경하고 밑의 Upload를 선택하여 위에 다운받은 파일을 넣는다.\"></a>4) Code entry type을 Upload zip file로 변경하고 밑의 Upload를 선택하여 위에 다운받은 파일을 넣는다.</h4><p><a href=\"https://user-images.githubusercontent.com/62123161/81248125-ab13a500-9056-11ea-8c95-ae25e76cf132.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/81248125-ab13a500-9056-11ea-8c95-ae25e76cf132.png\" alt=\"lambdapython_04\"></a></p>\n<ul>\n<li>(중요!!) 넣고 반드시 우측상단 Save노란색 버튼을 눌러줘야 한다. 안누르면 그냥 아무것도 안한상태가 됨.</li>\n</ul>\n<h4 id=\"5-저장-후-Code-entry-type을-Edit-code-inline으로-만들면-아래와-같은-화면이-나오고-코드를-직접-수정할-수-있다\"><a href=\"#5-저장-후-Code-entry-type을-Edit-code-inline으로-만들면-아래와-같은-화면이-나오고-코드를-직접-수정할-수-있다\" class=\"headerlink\" title=\"5) 저장 후 Code entry type을 Edit code inline으로 만들면 아래와 같은 화면이 나오고, 코드를 직접 수정할 수 있다.\"></a>5) 저장 후 Code entry type을 Edit code inline으로 만들면 아래와 같은 화면이 나오고, 코드를 직접 수정할 수 있다.</h4><p><a href=\"https://user-images.githubusercontent.com/62123161/81248124-aa7b0e80-9056-11ea-9d30-8a7fef821dea.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/81248124-aa7b0e80-9056-11ea-9d30-8a7fef821dea.png\" alt=\"lambdapython_05\"></a></p>\n<ul>\n<li>(중요!!) Handler에 main.main 으로 넣고 세이브한다.</li>\n</ul>\n<h4 id=\"6-우측상단의-테스트케이스를-만들어서-테스트를-돌리면된다\"><a href=\"#6-우측상단의-테스트케이스를-만들어서-테스트를-돌리면된다\" class=\"headerlink\" title=\"6) 우측상단의 테스트케이스를 만들어서 테스트를 돌리면된다.\"></a>6) 우측상단의 테스트케이스를 만들어서 테스트를 돌리면된다.</h4><h3 id=\"끝\"><a href=\"#끝\" class=\"headerlink\" title=\"-끝-\"></a>-끝-</h3><h3 id=\"소스\"><a href=\"#소스\" class=\"headerlink\" title=\"소스\"></a>소스</h3><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><figcaption><span>Full Source</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># A lambda function to interact with AWS RDS MySQL</span></span><br><span class=\"line\">import json</span><br><span class=\"line\">import pymysql</span><br><span class=\"line\">import sys</span><br><span class=\"line\"> </span><br><span class=\"line\">REGION = <span class=\"string\">'ap-northeast-2'</span></span><br><span class=\"line\"> </span><br><span class=\"line\">rds_host  = <span class=\"string\">\"RDS_ENDPOINT\"</span></span><br><span class=\"line\">name = <span class=\"string\">\"ID\"</span></span><br><span class=\"line\">password = <span class=\"string\">\"PW\"</span></span><br><span class=\"line\">db_name = <span class=\"string\">\"DATABASE_NAME\"</span></span><br><span class=\"line\"> </span><br><span class=\"line\">def save_events(event):</span><br><span class=\"line\">    <span class=\"string\">\"\"</span><span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">    This function fetches content from mysql RDS instance</span></span><br><span class=\"line\"><span class=\"string\">    \"</span><span class=\"string\">\"\"</span></span><br><span class=\"line\">    result = []</span><br><span class=\"line\">    conn = pymysql.connect(rds_host, user=name, passwd=password, db=db_name, connect_timeout=5)</span><br><span class=\"line\">    with conn.cursor() as cur:</span><br><span class=\"line\">        <span class=\"comment\"># cur.execute(\"\"\"insert into test (id, name) values( %s, '%s')\"\"\" % (event['id'], event['name']))</span></span><br><span class=\"line\">        cur.execute(<span class=\"string\">\"\"</span><span class=\"string\">\"select * from [TABLE_NAME]\"</span><span class=\"string\">\"\"</span>)</span><br><span class=\"line\">        conn.commit()</span><br><span class=\"line\">        cur.close()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> cur:</span><br><span class=\"line\">            result.append(list(row))</span><br><span class=\"line\">        <span class=\"comment\"># print \"Data from RDS...\"</span></span><br><span class=\"line\">        <span class=\"built_in\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"string\">'statusCode'</span>: 200,</span><br><span class=\"line\">        <span class=\"string\">'body'</span>: json.dumps(result)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">        <span class=\"comment\"># print result</span></span><br><span class=\"line\"> </span><br><span class=\"line\">def main(event, context):</span><br><span class=\"line\">    save_events(event)</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"테스트-결과\"><a href=\"#테스트-결과\" class=\"headerlink\" title=\"테스트 결과\"></a>테스트 결과</h3><h4 id=\"1-자바의-Cold-Start-이후-지속호출\"><a href=\"#1-자바의-Cold-Start-이후-지속호출\" class=\"headerlink\" title=\"1) 자바의 Cold Start 이후 지속호출\"></a>1) 자바의 Cold Start 이후 지속호출</h4><p>REPORT RequestId: e48ab981-212a-41c9-96e2-ed07b3f50d8d Duration: 2624.96 ms Billed Duration: 2700 ms Memory Size: 2048 MB Max Memory Used: 157 MB Init Duration: 314.42 ms<br>REPORT RequestId: 25754b1d-1eb5-4e47-b281-8f7f25f86b0e Duration: 2.34 ms Billed Duration: 100 ms Memory Size: 2048 MB Max Memory Used: 157 MB<br>REPORT RequestId: 8e4b7664-f8bd-43bb-a93a-1ce762ff9e08 Duration: 8.53 ms Billed Duration: 100 ms Memory Size: 2048 MB Max Memory Used: 157 MB<br>REPORT RequestId: c75c69c3-c25d-4ca1-a89f-b47568db2b32 Duration: 2.35 ms Billed Duration: 100 ms Memory Size: 2048 MB Max Memory Used: 157 MB<br>REPORT RequestId: a8579b00-6799-4805-b20e-2bda8233f3bf Duration: 2.51 ms Billed Duration: 100 ms Memory Size: 2048 MB Max Memory Used: 157 MB</p>\n<h4 id=\"2-Python의-Cold-Start-이후-지속호출\"><a href=\"#2-Python의-Cold-Start-이후-지속호출\" class=\"headerlink\" title=\"2) Python의 Cold Start 이후 지속호출\"></a>2) Python의 Cold Start 이후 지속호출</h4><p>REPORT RequestId: d9e08910-f520-46f1-998d-dc464ab906d4 Duration: 89.94 ms Billed Duration: 100 ms Memory Size: 128 MB Max Memory Used: 52 MB Init Duration: 178.14 ms<br>REPORT RequestId: 3b38dbe2-50ef-4fa0-914f-fbe8f537fdda Duration: 56.36 ms Billed Duration: 100 ms Memory Size: 128 MB Max Memory Used: 53 MB<br>REPORT RequestId: f9943532-58b0-422e-b040-0e71a7f38837 Duration: 57.04 ms Billed Duration: 100 ms Memory Size: 128 MB Max Memory Used: 52 MB<br>REPORT RequestId: b53b4659-db4a-44c6-aca4-aacca7897648 Duration: 90.57 ms Billed Duration: 100 ms Memory Size: 128 MB Max Memory Used: 52 MB Init Duration: 163.13 ms<br>REPORT RequestId: ef27297d-b738-44eb-b75f-a180ff58abc1 Duration: 187.70 ms Billed Duration: 200 ms Memory Size: 128 MB Max Memory Used: 52 MB Init Duration: 164.85 ms</p>\n<h3 id=\"리포팅\"><a href=\"#리포팅\" class=\"headerlink\" title=\"리포팅\"></a>리포팅</h3><ol>\n<li>파이선 특징</li>\n</ol>\n<ul>\n<li>라이브러리를 모두 직접 등록해줘야 하는 단점…&lt;Maven, Gradle이 그립다.&gt;</li>\n<li>파일을 직접 넣어줘야하고, 지원되는 라이브러리가 생각보다 별로없다.</li>\n<li>디버깅이 어렵다.(이건 툴 문제)</li>\n</ul>\n<ol start=\"2\">\n<li>람다의 특성</li>\n</ol>\n<ul>\n<li>참고로 람다는 복사&lt;똑같은 람다 이름만바꿔서 생성&gt;가 안된다. 할거라면 새로 만들어야 한다. AWS정책임.</li>\n<li>Layer이라는 개념을 스크립트언어에서는 반드시 써줘야 하는데, 내생각보다 좀 좋은 기능으로 보인다.</li>\n</ul>\n","text":"개발환경 구축※ 기본 개발환경IntelliJPythonAWS ConsoleLambda Python 설명팀장님께서 조사하신 내용을 토대로 Java가 콜드스타트에서 많은 시간을 소모한다는 점에 착안하여 Python으로 시도해보기로 함.Node로도 Pyth","link":"","raw":null,"photos":[],"categories":[{"name":"aws","slug":"aws","count":16,"path":"api/categories/aws.json"}],"tags":[{"name":"AWS","slug":"AWS","count":18,"path":"api/tags/AWS.json"},{"name":"python","slug":"python","count":4,"path":"api/tags/python.json"},{"name":"cold start","slug":"cold-start","count":1,"path":"api/tags/cold-start.json"},{"name":"hot start","slug":"hot-start","count":1,"path":"api/tags/hot-start.json"}]},{"title":"Lambda","slug":"Lambda","date":"2020-05-07T02:49:14.000Z","updated":"2020-11-23T01:31:25.287Z","comments":true,"pin":null,"path":"api/articles/Lambda.json","excerpt":"","keywords":null,"cover":"https://user-images.githubusercontent.com/62123161/81253068-88878900-9062-11ea-87b3-9a3713b6bd1d.png","content":"<h2 id=\"개발환경-구축\"><a href=\"#개발환경-구축\" class=\"headerlink\" title=\"개발환경 구축\"></a>개발환경 구축</h2><p>※ 기본 개발환경</p>\n<ul>\n<li>IntelliJ</li>\n<li>Java 8, 11</li>\n<li>AWS Console</li>\n</ul>\n<h2 id=\"Lambda-설명\"><a href=\"#Lambda-설명\" class=\"headerlink\" title=\"Lambda 설명\"></a>Lambda 설명</h2><h3 id=\"1-람다는-메모리에-따라-돌아가는-환경이-달라진다\"><a href=\"#1-람다는-메모리에-따라-돌아가는-환경이-달라진다\" class=\"headerlink\" title=\"1. 람다는 메모리에 따라 돌아가는 환경이 달라진다.\"></a>1. 람다는 메모리에 따라 돌아가는 환경이 달라진다.</h3><ul>\n<li>m5-Large, t2-small 등.. OS환경은 모두 Linux 환경이지만, Node와 Python 등은 Linux2에서 동작하고, 대부분의 언어는 Linux환경에서 돌아간다.)<h3 id=\"2-a람다-b람다-a람다-콜도-가능하다\"><a href=\"#2-a람다-b람다-a람다-콜도-가능하다\" class=\"headerlink\" title=\"2. a람다-b람다-a람다 콜도 가능하다.\"></a>2. a람다-b람다-a람다 콜도 가능하다.</h3><h3 id=\"3-람다는-동기식-비동기식의-선택이-가능하다\"><a href=\"#3-람다는-동기식-비동기식의-선택이-가능하다\" class=\"headerlink\" title=\"3. 람다는 동기식, 비동기식의 선택이 가능하다.\"></a>3. 람다는 동기식, 비동기식의 선택이 가능하다.</h3></li>\n<li>경동에서 사용하는 람다들은 모두 동기식이다. 비동기식은 몇가지 안된다.</li>\n</ul>\n<h3 id=\"4-Node-js-Python\"><a href=\"#4-Node-js-Python\" class=\"headerlink\" title=\"4. Node.js, Python\"></a>4. Node.js, Python</h3><ul>\n<li>AWS Lambda 콘솔, Cloud9, IDE 플러그인이 포함된 Visual Studio/PyCharm으로 작성가능.</li>\n<li>Cloud9은 웹 자체에서 디버깅(BreakPoint 가능)이 가능하며, 동시에 여러명이서 수정이 된다.</li>\n<li>실시간으로 페이지가 갱신되므로 다른사람과 같이 작업하면, 다른사람이 작업한 내용의 수정내용을 볼 수 있다. </li>\n</ul>\n<h3 id=\"5-한도\"><a href=\"#5-한도\" class=\"headerlink\" title=\"5. 한도\"></a>5. 한도</h3><ul>\n<li><p>총 람다 동시실행 갯수: 1000개 / 75GB 가 한도이며, VPC당 인터페이스 250개까지 지원한다.</p>\n</li>\n<li><p>현재 동시실행 갯수를 운영서버계정은 2500개까지 열어두었다. </p>\n</li>\n<li><p>사실 리밋은 언제든지 Support팀에 요청하면 풀 수 있다. 리밋을 상향한다고 하여도 추가비용이 발생하지는 않는다.</p>\n</li>\n<li><p>기본적으로 1000개인 Limit을 5000개까지는 올리고 싶다. 용량 75GB는 상향의 필요성을 못느낀다.(개인생각)</p>\n</li>\n<li><p>각 람다 별 제한사항<br><a href=\"https://user-images.githubusercontent.com/62123161/81253068-88878900-9062-11ea-87b3-9a3713b6bd1d.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/81253068-88878900-9062-11ea-87b3-9a3713b6bd1d.png\" alt=\"lambda_01\"></a></p>\n</li>\n</ul>\n<h3 id=\"6-Trigger-출발점-과-Destination-목적점-을-직접-지정해줄-수도-있다\"><a href=\"#6-Trigger-출발점-과-Destination-목적점-을-직접-지정해줄-수도-있다\" class=\"headerlink\" title=\"6. Trigger(출발점)과 Destination(목적점)을 직접 지정해줄 수도 있다.\"></a>6. Trigger(출발점)과 Destination(목적점)을 직접 지정해줄 수도 있다.</h3><p><a href=\"https://user-images.githubusercontent.com/62123161/81251406-29277a00-905e-11ea-8afd-d501dfb1cbd0.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/81251406-29277a00-905e-11ea-8afd-d501dfb1cbd0.png\" alt=\"lambda_02\"></a></p>\n<ul>\n<li>Trigger / Destination List<br><a href=\"https://user-images.githubusercontent.com/62123161/81251405-288ee380-905e-11ea-9ed2-d6cdc2f61c0d.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/81251405-288ee380-905e-11ea-9ed2-d6cdc2f61c0d.png\" alt=\"lambda_03\"></a><br><a href=\"https://user-images.githubusercontent.com/62123161/81251404-288ee380-905e-11ea-80fa-3d4775ad102d.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/81251404-288ee380-905e-11ea-80fa-3d4775ad102d.png\" alt=\"lambda_04\"></a></li>\n</ul>\n<h3 id=\"7-람다를-내부에서-실행시켜-외부의-값을-가져오려고-할때는-아래와-같은-순서를-따르면-된다\"><a href=\"#7-람다를-내부에서-실행시켜-외부의-값을-가져오려고-할때는-아래와-같은-순서를-따르면-된다\" class=\"headerlink\" title=\"7. 람다를 내부에서 실행시켜 외부의 값을 가져오려고 할때는 아래와 같은 순서를 따르면 된다.\"></a>7. 람다를 내부에서 실행시켜 외부의 값을 가져오려고 할때는 아래와 같은 순서를 따르면 된다.</h3><ul>\n<li>온수매트의 Kweather정보는 상관없으나, TAC의 AirKorea는 반드시 이 설정을 해주어야 한다.</li>\n<li>Lambda 함수를 Private Subnet에 위치시키고,(콘솔화면 기준 : VPC - RouteTable - Lambda 함수가 설정된 VPC - Subnet의 RouteTable 설정)</li>\n<li>RouteTable 정책을 Lambda Subnet을 0.0.0.0/0 인터넷망을 나갈때 NAT Gateway를 통하도록 설정(VPC - NAT Gatewat 에서 IP 를 확인하시고, 해당 Elastic IP(고정 IP)를 Whitelist 로 넣어줌) <a href=\"https://www.slideshare.net/addnull/aws-lambdas-with-a-static-outgoing-ip\" target=\"_blank\" rel=\"noopener\">https://www.slideshare.net/addnull/aws-lambdas-with-a-static-outgoing-ip</a></li>\n</ul>\n<h3 id=\"8-모니터링\"><a href=\"#8-모니터링\" class=\"headerlink\" title=\"8. 모니터링\"></a>8. 모니터링</h3><ul>\n<li>아래 그림처럼 수행 구간별로 구분해서 분석이 가능함. (참고용… 중요하지 않음)<img width=\"420\" alt=\"lambda_05\" src=\"https://user-images.githubusercontent.com/62123161/81251472-56742800-905e-11ea-9142-0687f7ccb0de.png\">\n\n</li>\n</ul>\n<h3 id=\"9-SDK\"><a href=\"#9-SDK\" class=\"headerlink\" title=\"9. SDK\"></a>9. SDK</h3><ul>\n<li>Java에 적용된 SDK들은 이미 Node.js나 Python에 적용 되어 있다.</li>\n<li>우리가 쓰고자 하는 기능은 당연히 이미 SDK로 나와있다. 예) Dynamo 제어, S3 Bucket 제어, RDS 제어, Kinesis 제어 등등….  </li>\n<li>위 a번의 근거는, 람다를 스크립트언어로 사용하는 곳이 많기에 우선적으로 라이브러리를 지원해주기 때문.</li>\n<li>상대적으로 람다를 Java로 쓰는 곳은 그다지 많이 없다.(구동에 시간이 많이 들기에 빠른반응을 해줘야하는 서비스의 경우 Java를 안쓴다고 전해들었다.)</li>\n</ul>\n<h3 id=\"10-Lambda-RDS\"><a href=\"#10-Lambda-RDS\" class=\"headerlink\" title=\"10. Lambda - RDS\"></a>10. Lambda - RDS</h3><p>Python AWS 공식 자습서 예제 : <a href=\"https://docs.aws.amazon.com/ko_kr/lambda/latest/dg/services-rds-tutorial.html\" target=\"_blank\" rel=\"noopener\">https://docs.aws.amazon.com/ko_kr/lambda/latest/dg/services-rds-tutorial.html</a><br>일반 블로그 Node.js 예제 : <a href=\"https://grip.news/archives/1411\" target=\"_blank\" rel=\"noopener\">https://grip.news/archives/1411</a><br>Node.js AWS 공식 설명서 예제 : <a href=\"https://docs.aws.amazon.com/ko_kr/lambda/latest/dg/lambda-nodejs.html\" target=\"_blank\" rel=\"noopener\">https://docs.aws.amazon.com/ko_kr/lambda/latest/dg/lambda-nodejs.html</a></p>\n<h2 id=\"결론\"><a href=\"#결론\" class=\"headerlink\" title=\"결론\"></a>결론</h2><p>위와 같은 람다의 특성으로 미루어 볼 때, 체크해야될 리스트는 아래와 같다.</p>\n<ol>\n<li>람다→람다를 호출하는 과정이 있을 수 있을지 설계단에서 한번 보아야 한다.</li>\n</ol>\n<ul>\n<li>스마트톡에는 람다→ 람다를 호출하는 과정이 없이, 기능별로만 쪼개놓은 상황이고, 기능이 겹친다고 하더라도 다 따로 만들어주었다.</li>\n</ul>\n<ol start=\"2\">\n<li>여러사람이 개발을 진행해야 한다면, Script언어를 같이 개발할 수 있는 Cloud9검토가 필요하다.(디버깅이 가능하고, 동시개발이 가능한점이 큰 이점. 히스토리도 AWS가 갖고있다.)</li>\n<li>한도는 최대한으로 늘려놓는 것이 좋을 것 같다. 1000→ 5000개정도. 또한, 각 람다별 메모리도 일단은 1024 이상으로 올려 사용하다가 사용량을 비교하여 낮추는 방향도 고려필요.</li>\n<li>VPC위에 lambda를 올려 실행시키는 방법을 미리 고민해두어야 함.</li>\n<li>SDK는 모두 제공하므로 걱정안해도 됨.</li>\n</ol>\n","text":"개발환경 구축※ 기본 개발환경IntelliJJava 8, 11AWS ConsoleLambda 설명1. 람다는 메모리에 따라 돌아가는 환경이 달라진다.m5-Large, t2-small 등.. OS환경은 모두 Linux 환경이지만, Node와 Python","link":"","raw":null,"photos":[],"categories":[{"name":"aws","slug":"aws","count":16,"path":"api/categories/aws.json"}],"tags":[{"name":"AWS","slug":"AWS","count":18,"path":"api/tags/AWS.json"},{"name":"Lambda","slug":"Lambda","count":1,"path":"api/tags/Lambda.json"},{"name":"java","slug":"java","count":1,"path":"api/tags/java.json"}]},{"title":"SQS(Simple Queue Service)","slug":"SQS","date":"2020-05-02T04:54:16.000Z","updated":"2020-11-23T01:31:25.298Z","comments":true,"pin":null,"path":"api/articles/SQS.json","excerpt":"","keywords":null,"cover":"https://user-images.githubusercontent.com/62123161/80855560-14716d80-8c7d-11ea-9a58-fa748f417da0.png","content":"<ol>\n<li><p>Kinesis가 있으니 SQS를 쓸 일이 없겠다. 이걸 뭐하러 쓰나?</p>\n</li>\n<li><p>라고 생각했다면, 한참 더 공부해야한다. </p>\n</li>\n<li><p>우선 Kinesis와 SQS의 큰 차이점을 비교한다.</p>\n</li>\n</ol>\n<h3 id=\"Kinesis-vs-SQS\"><a href=\"#Kinesis-vs-SQS\" class=\"headerlink\" title=\"Kinesis vs SQS\"></a>Kinesis vs SQS</h3><ul>\n<li>Kinesis는 스트리밍 데이터 수집 서비스이고 SQS는 메시지 대기열이다.</li>\n<li>Kinesis는 대량의 스트리밍 데이터를 수집하도록 설계되었으며 SQS는 메시지 브로커, 디커플링 메커니즘으로 설계되었으며 이벤트 중심 아키텍처다.</li>\n<li>SQS를 사용하면 큐에서 메시지를 가져 와서 처리 중에 보이지 않는 것으로 표시 할 수 있습니다. 해당 소비자가 메시지를 큐에서 삭제하지 않으면 가시성 시간 초과가 만료 된 후에 메시지가 큐로 돌아가서 다른 소비자가 메시지를 처리 ​​할 수 ​​있습니다. SQS에는 데드 레터 큐가 내장되어 있습니다. 이러한 기능을 통해 다른 소비자가 대기열로 돌아갈 때 실패한 메시지 처리를 자동으로 재 시도 할 수 있습니다. SQS는 또한 많은 소비자가 대기열에서 메시지를 가져 와서 병렬로 처리 할 수 ​​있도록함으로써 병렬 또는 팬 아웃 처리 아키텍처를 지원합니다.</li>\n<li>Kinesis 및 Kinesis Firehose는 Elasticsearch, DynamoDB, S3 등과 같은 서비스 (데이터의 지속성 저장소)와 통합되는 반면 SQS는 Lambda, S3, SNS 등과 같은 서비스 (메시징 및 이벤트 중심 구성 요소)와 통합됩니다.</li>\n<li>이외에도 엄청나게 많은 차이점이 있지만, 링크 참고하면 더 큰 차이를 느낄 수 있음.</li>\n</ul>\n<h2 id=\"SQS는-최초의-AWS-서비스\"><a href=\"#SQS는-최초의-AWS-서비스\" class=\"headerlink\" title=\"SQS는 최초의 AWS 서비스!!!\"></a>SQS는 최초의 AWS 서비스!!!</h2><h3 id=\"1-SQS-서비스-만들기\"><a href=\"#1-SQS-서비스-만들기\" class=\"headerlink\" title=\"1) SQS 서비스 만들기.\"></a>1) SQS 서비스 만들기.</h3><p><a href=\"https://user-images.githubusercontent.com/62123161/80855560-14716d80-8c7d-11ea-9a58-fa748f417da0.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/80855560-14716d80-8c7d-11ea-9a58-fa748f417da0.png\" alt=\"sqs_01\"></a><br>끝.</p>\n<ul>\n<li>허무하지만 이게 끝 맞다. 소스로는 아래와 같이 추가해주면 된다.</li>\n</ul>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><figcaption><span>Standard Queue vs FIFO Queue</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Standard QUEUE의 경우</span><br><span class=\"line\">    //2-1. Standard Create Queue</span><br><span class=\"line\">    CreateQueueRequest create_request = new CreateQueueRequest(<span class=\"string\">\"minseoktestQueue\"</span>)</span><br><span class=\"line\">            .addAttributesEntry(<span class=\"string\">\"DelaySeconds\"</span>, <span class=\"string\">\"0\"</span>) //An <span class=\"built_in\">integer</span> from 0 to 900 seconds (15 minutes). Default: 0.</span><br><span class=\"line\">            .addAttributesEntry(<span class=\"string\">\"VisibilityTimeout\"</span>, <span class=\"string\">\"30\"</span>) // An <span class=\"built_in\">integer</span> from 0 to 43,200 (12 hours). Default: 30.</span><br><span class=\"line\">            .addAttributesEntry(<span class=\"string\">\"MessageRetentionPeriod\"</span>, <span class=\"string\">\"345600\"</span>) // An <span class=\"built_in\">integer</span> from 60 seconds (1 minute) to 1,209,600 seconds (14 days). Default: 345,600 (4 days).</span><br><span class=\"line\">            .addAttributesEntry(<span class=\"string\">\"MaximumMessageSize\"</span>, <span class=\"string\">\"262144\"</span>); //An <span class=\"built_in\">integer</span> from 1,024 bytes (1 KiB) to 262,144 bytes (256 KiB). Default: 262,144 (256 KiB).</span><br><span class=\"line\">    String standardQueueUrl = sqs.createQueue(create_request).getQueueUrl();</span><br><span class=\"line\"> </span><br><span class=\"line\">//FIFO QUEUE의 경우</span><br><span class=\"line\">    //1-1. FIFO Create Queue</span><br><span class=\"line\">    Map&lt;String, String&gt; queueAttributes = new HashMap&lt;&gt;();</span><br><span class=\"line\">    queueAttributes.put(<span class=\"string\">\"FifoQueue\"</span>, <span class=\"string\">\"true\"</span>);</span><br><span class=\"line\">    queueAttributes.put(<span class=\"string\">\"ContentBasedDeduplication\"</span>, <span class=\"string\">\"true\"</span>);</span><br><span class=\"line\">    queueAttributes.put(<span class=\"string\">\"VisibilityTimeout\"</span>, <span class=\"string\">\"1\"</span>);</span><br><span class=\"line\">    CreateQueueRequest createFifoQueueRequest = new CreateQueueRequest(</span><br><span class=\"line\">            <span class=\"string\">\"minseok1.fifo\"</span>).withAttributes(queueAttributes);</span><br><span class=\"line\">    String fifoQueueUrl = sqs.createQueue(createFifoQueueRequest)</span><br><span class=\"line\">            .getQueueUrl();</span><br></pre></td></tr></table></figure></div>\n<ul>\n<li>하지만, 이렇게 끝나면 정말 별거 없는 서비스가 될 우려가 있기에 많은 소스코드와 함께 지원되는 API를 검토하고 활용해보자.</li>\n<li>SQS도 Kinesis와 마찬가지로 큐에 데이터를 쌓는것이지만, SQS는 Console화면에서 데이터가 어떤것이 들어있는지 아주 매우 많이 쉽게 볼 수 있다.</li>\n<li>예제는 현재 Alive데이터를 담아두도록 설계해둔 SQS(2020-01-30 기준으로 폐쇄) alive-sqs-event 큐이다.<br><a href=\"https://user-images.githubusercontent.com/62123161/80855561-15a29a80-8c7d-11ea-99fe-dd9d95635b7e.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/80855561-15a29a80-8c7d-11ea-99fe-dd9d95635b7e.png\" alt=\"sqs_02\"></a> </li>\n<li>화면보면 알겠지만, 페이지별로 몇개의 Row를 볼 수 있는지와 Polling 주기를 선택할 수 있다.</li>\n</ul>\n<h3 id=\"2-기능\"><a href=\"#2-기능\" class=\"headerlink\" title=\"2) 기능\"></a>2) 기능</h3><h4 id=\"전체-큐-리스트\"><a href=\"#전체-큐-리스트\" class=\"headerlink\" title=\"전체 큐 리스트\"></a>전체 큐 리스트</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><figcaption><span>Queue List</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Standard QUEUE의 경우</span><br><span class=\"line\">    //1-2. Standard Queue List(All)</span><br><span class=\"line\">    ListQueuesResult lq_result = sqs.listQueues();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Your SQS Queue URLs:\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (String url : lq_result.getQueueUrls()) &#123;</span><br><span class=\"line\">        System.out.println(url);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">//FIFO QUEUE의 경우</span><br><span class=\"line\">    //1-2. FIFO Queue List(All)</span><br><span class=\"line\">    ListQueuesResult lq_result = sqs.listQueues();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Your SQS Queue URLs:\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (String url : lq_result.getQueueUrls()) &#123;</span><br><span class=\"line\">        System.out.println(url);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"특정키워드로-큐-찾기-여러개-검색해도-가능-→-Queue-이름이다-Queue의-데이터가-아니고\"><a href=\"#특정키워드로-큐-찾기-여러개-검색해도-가능-→-Queue-이름이다-Queue의-데이터가-아니고\" class=\"headerlink\" title=\"특정키워드로 큐 찾기(여러개 검색해도 가능) → Queue 이름이다. Queue의 데이터가 아니고!!\"></a>특정키워드로 큐 찾기(여러개 검색해도 가능) → Queue 이름이다. Queue의 데이터가 아니고!!</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><figcaption><span>Find Queue</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Standard QUEUE의 경우</span><br><span class=\"line\">    //1-3. Standard Queue Search(KEY_WORD)</span><br><span class=\"line\">    String name_prefix = <span class=\"string\">\"KEY_WORD_ENTER\"</span>;</span><br><span class=\"line\">    lq_result = sqs.listQueues(new ListQueuesRequest(name_prefix));</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Queue URLs with prefix: \"</span> + name_prefix);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (String url : lq_result.getQueueUrls()) &#123;</span><br><span class=\"line\">        System.out.println(url);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">//FIFO QUEUE의 경우</span><br><span class=\"line\">    //1-3. FIFO Queue Search(KEY_WORD)</span><br><span class=\"line\">    String name_prefix = <span class=\"string\">\"KEY_WORD_ENTER\"</span>;</span><br><span class=\"line\">    lq_result = sqs.listQueues(new ListQueuesRequest(name_prefix));</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Queue URLs with prefix: \"</span> + name_prefix);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (String url : lq_result.getQueueUrls()) &#123;</span><br><span class=\"line\">        System.out.println(url);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"큐-삭제\"><a href=\"#큐-삭제\" class=\"headerlink\" title=\"큐 삭제\"></a>큐 삭제</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><figcaption><span>Delete Queue</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Standard QUEUE의 경우</span><br><span class=\"line\">    //1-4. Standard Queue Delete(URL)</span><br><span class=\"line\">    sqs.deleteQueue(fifoQueueUrl);</span><br><span class=\"line\"> </span><br><span class=\"line\">//FIFO QUEUE의 경우</span><br><span class=\"line\">    //1-4. FIFO Queue Delete(URL)</span><br><span class=\"line\">    sqs.deleteQueue(fifoQueueUrl);</span><br></pre></td></tr></table></figure></div>\n<h4 id=\"단일-데이터-삽입\"><a href=\"#단일-데이터-삽입\" class=\"headerlink\" title=\"단일 데이터 삽입\"></a>단일 데이터 삽입</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><figcaption><span>Insert Single Message</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Standard QUEUE의 경우</span><br><span class=\"line\">    //1-5. Standard Posting a Message to a Queue</span><br><span class=\"line\">    SendMessageRequest send_msg_request = new SendMessageRequest()</span><br><span class=\"line\">            .withQueueUrl(fifoQueueUrl)</span><br><span class=\"line\">            .withMessageBody(<span class=\"string\">\"hello world\"</span>)</span><br><span class=\"line\">            .withDelaySeconds(0);</span><br><span class=\"line\">    sqs.sendMessage(send_msg_request);</span><br><span class=\"line\"> </span><br><span class=\"line\">//FIFO QUEUE의 경우</span><br><span class=\"line\">    //1-5. FIFO Posting a Message to a FIFO Queue</span><br><span class=\"line\">    SendMessageRequest send_msg_request = new SendMessageRequest()</span><br><span class=\"line\">            .withQueueUrl(fifoQueueUrl)</span><br><span class=\"line\">            .withMessageBody(<span class=\"string\">\"hello world\"</span>)</span><br><span class=\"line\">            .withMessageGroupId(<span class=\"string\">\"minseok-group-1\"</span>)</span><br><span class=\"line\">            .withDelaySeconds(0);</span><br><span class=\"line\">    sqs.sendMessage(send_msg_request);</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"여러-데이터-삽입\"><a href=\"#여러-데이터-삽입\" class=\"headerlink\" title=\"여러 데이터 삽입\"></a>여러 데이터 삽입</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><figcaption><span>Insert Multiple Data </span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Standard QUEUE의 경우</span><br><span class=\"line\">    //1-6. Standard Posting Multiple Messages to a Queue</span><br><span class=\"line\">    List&lt;SendMessageBatchRequestEntry&gt; messageEntries = new ArrayList&lt;&gt;();</span><br><span class=\"line\">    messageEntries.add(new SendMessageBatchRequestEntry()</span><br><span class=\"line\">            .withId(<span class=\"string\">\"id-1\"</span>)</span><br><span class=\"line\">            .withMessageBody(<span class=\"string\">\"batch-1\"</span>));</span><br><span class=\"line\">    messageEntries.add(new SendMessageBatchRequestEntry()</span><br><span class=\"line\">            .withId(<span class=\"string\">\"id-2\"</span>)</span><br><span class=\"line\">            .withMessageBody(<span class=\"string\">\"batch-2\"</span>));</span><br><span class=\"line\"> </span><br><span class=\"line\">    SendMessageBatchRequest sendMessageBatchRequest</span><br><span class=\"line\">            = new SendMessageBatchRequest(fifoQueueUrl, messageEntries);</span><br><span class=\"line\">    sqs.sendMessageBatch(sendMessageBatchRequest);</span><br><span class=\"line\"> </span><br><span class=\"line\">//FIFO QUEUE의 경우</span><br><span class=\"line\">    //1-6. FIFO Posting Multiple Messages to a Queue</span><br><span class=\"line\">    List&lt;SendMessageBatchRequestEntry&gt; messageEntries = new ArrayList&lt;&gt;();</span><br><span class=\"line\">    messageEntries.add(new SendMessageBatchRequestEntry()</span><br><span class=\"line\">            .withId(<span class=\"string\">\"id-1\"</span>)</span><br><span class=\"line\">            .withMessageBody(<span class=\"string\">\"batch-1\"</span>)</span><br><span class=\"line\">            .withMessageGroupId(<span class=\"string\">\"minseok-group-1\"</span>));</span><br><span class=\"line\">    messageEntries.add(new SendMessageBatchRequestEntry()</span><br><span class=\"line\">            .withId(<span class=\"string\">\"id-2\"</span>)</span><br><span class=\"line\">            .withMessageBody(<span class=\"string\">\"batch-2\"</span>)</span><br><span class=\"line\">            .withMessageGroupId(<span class=\"string\">\"minseok-group-1\"</span>));</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"큐-내의-데이터-읽기\"><a href=\"#큐-내의-데이터-읽기\" class=\"headerlink\" title=\"큐 내의 데이터 읽기\"></a>큐 내의 데이터 읽기</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><figcaption><span>Read Data In Queue</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Standard QUEUE / FIFO QUEUE의 경우</span><br><span class=\"line\">    //1-7. Reading Messages from Queues</span><br><span class=\"line\">    ReceiveMessageRequest receiveMessageRequest = new ReceiveMessageRequest(fifoQueueUrl)</span><br><span class=\"line\">            .withWaitTimeSeconds(10)</span><br><span class=\"line\">            .withMaxNumberOfMessages(10);</span><br><span class=\"line\"> </span><br><span class=\"line\">    List&lt;Message&gt; sqsMessages = sqs.receiveMessage(receiveMessageRequest).getMessages();</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"큐-내의-데이터-삭제\"><a href=\"#큐-내의-데이터-삭제\" class=\"headerlink\" title=\"큐 내의 데이터 삭제\"></a>큐 내의 데이터 삭제</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><figcaption><span>Delete Data In Queue</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Standard QUEUE / FIFO QUEUE의 경우</span><br><span class=\"line\">    //1-8. Deleting a Message from a Queue</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Message m : sqsMessages) &#123;</span><br><span class=\"line\">        sqs.deleteMessage(fifoQueueUrl, m.getReceiptHandle());</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"전달못한-Queue\"><a href=\"#전달못한-Queue\" class=\"headerlink\" title=\"전달못한 Queue\"></a>전달못한 Queue</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><figcaption><span>Dead Letter Queues</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Standard QUEUE / FIFO QUEUE의 경우</span><br><span class=\"line\">    //1-9. FIFO Dead Letter Queues1(TODO:배달못한 편지 대기열을 생성하고,</span><br><span class=\"line\">    /*String deadLetterQueueUrl = sqs.createQueue(<span class=\"string\">\"aws-sqs://notification_queue?amazonSQSClient=#sqsClient\"</span>).getQueueUrl();*/</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        // Create dead-letter queue</span><br><span class=\"line\">        Map&lt;String, String&gt; queueAttributes = new HashMap&lt;&gt;();</span><br><span class=\"line\">        queueAttributes.put(<span class=\"string\">\"FifoQueue\"</span>, <span class=\"string\">\"true\"</span>);</span><br><span class=\"line\">        queueAttributes.put(<span class=\"string\">\"ContentBasedDeduplication\"</span>, <span class=\"string\">\"true\"</span>);</span><br><span class=\"line\">        queueAttributes.put(<span class=\"string\">\"VisibilityTimeout\"</span>, <span class=\"string\">\"1\"</span>);</span><br><span class=\"line\">        CreateQueueRequest createFifoQueueRequest = new CreateQueueRequest(</span><br><span class=\"line\">                <span class=\"string\">\"deadletterminseok.fifo\"</span>).withAttributes(queueAttributes);</span><br><span class=\"line\">        String fifoQueueUrls = sqs.createQueue(createFifoQueueRequest)</span><br><span class=\"line\">                .getQueueUrl();</span><br><span class=\"line\">    &#125; catch (AmazonSQSException e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!e.getErrorCode().equals(<span class=\"string\">\"QueueAlreadyExists\"</span>)) &#123;</span><br><span class=\"line\">            throw e;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //TODO:minseok.fifo 로 통신하다가 부하가 걸리면 deadletterminseok.fifo로 보내도록 설정하는 아래 코드</span><br><span class=\"line\">    String dl_queue_url = sqs.getQueueUrl(<span class=\"string\">\"deadletterminseok.fifo\"</span>)</span><br><span class=\"line\">            .getQueueUrl();</span><br><span class=\"line\">    GetQueueAttributesResult queue_attrs = sqs.getQueueAttributes(</span><br><span class=\"line\">            new GetQueueAttributesRequest(dl_queue_url)</span><br><span class=\"line\">                    .withAttributeNames(<span class=\"string\">\"QueueArn\"</span>));</span><br><span class=\"line\">    String dl_queue_arn = queue_attrs.getAttributes().get(<span class=\"string\">\"QueueArn\"</span>);</span><br><span class=\"line\">    // Set dead letter queue with redrive policy on <span class=\"built_in\">source</span> queue.</span><br><span class=\"line\">    String src_queue_url = sqs.getQueueUrl(<span class=\"string\">\"minseok.fifo\"</span>)</span><br><span class=\"line\">            .getQueueUrl();</span><br><span class=\"line\">    SetQueueAttributesRequest request = new SetQueueAttributesRequest()</span><br><span class=\"line\">            .withQueueUrl(src_queue_url)</span><br><span class=\"line\">            .addAttributesEntry(<span class=\"string\">\"RedrivePolicy\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"&#123;\\\"maxReceiveCount\\\":\\\"5\\\", \\\"deadLetterTargetArn\\\":\\\"\"</span></span><br><span class=\"line\">                            + dl_queue_arn + <span class=\"string\">\"\\\"&#125;\"</span>);</span><br><span class=\"line\">    sqs.setQueueAttributes(request);</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">//또다른 방법(샘플)</span><br><span class=\"line\">    //1-10. FIFO Dead Letter Queues</span><br><span class=\"line\">    GetQueueAttributesResult deadLetterQueueAttributes = sqs.getQueueAttributes(</span><br><span class=\"line\">            new GetQueueAttributesRequest(dl_queue_url)</span><br><span class=\"line\">                    .withAttributeNames(<span class=\"string\">\"QueueArn\"</span>));</span><br><span class=\"line\"> </span><br><span class=\"line\">    String deadLetterQueueARN = deadLetterQueueAttributes.getAttributes()</span><br><span class=\"line\">            .get(<span class=\"string\">\"QueueArn\"</span>);</span><br><span class=\"line\">    SetQueueAttributesRequest queueAttributesRequest = new SetQueueAttributesRequest()</span><br><span class=\"line\">            //.withQueueUrl(standardQueueUrl)</span><br><span class=\"line\">            .withQueueUrl(<span class=\"string\">\"https://sqs.ap-northeast-2.amazonaws.com/[ALLIAS]/[FIFO_NAME]\"</span>)</span><br><span class=\"line\">            .addAttributesEntry(<span class=\"string\">\"RedrivePolicy\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"&#123;\\\"maxReceiveCount\\\":\\\"2\\\", \"</span></span><br><span class=\"line\">                            + <span class=\"string\">\"\\\"deadLetterTargetArn\\\":\\\"\"</span> + deadLetterQueueARN + <span class=\"string\">\"\\\"&#125;\"</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">    sqs.setQueueAttributes(queueAttributesRequest);</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"Monitoring\"><a href=\"#Monitoring\" class=\"headerlink\" title=\"Monitoring\"></a>Monitoring</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Standard QUEUE / FIFO QUEUE의 경우</span><br><span class=\"line\">    //1-11. FIFO Monitoring</span><br><span class=\"line\">    GetQueueAttributesRequest getQueueAttributesRequest</span><br><span class=\"line\">            //= new GetQueueAttributesRequest(standardQueueUrl) </span><br><span class=\"line\">            = new GetQueueAttributesRequest(<span class=\"string\">\"https://sqs.ap-northeast-2.amazonaws.com/[ALLIAS]/[FIFO_NAME]\"</span>)</span><br><span class=\"line\">            .withAttributeNames(<span class=\"string\">\"All\"</span>);</span><br><span class=\"line\">    GetQueueAttributesResult getQueueAttributesResult</span><br><span class=\"line\">            = sqs.getQueueAttributes(getQueueAttributesRequest);</span><br><span class=\"line\">    System.out.println(String.format(<span class=\"string\">\"The number of messages on the queue: %s\"</span>,</span><br><span class=\"line\">            getQueueAttributesResult.getAttributes()</span><br><span class=\"line\">                    .get(<span class=\"string\">\"ApproximateNumberOfMessages\"</span>)));</span><br><span class=\"line\">    System.out.println(String.format(<span class=\"string\">\"The number of messages in flight: %s\"</span>,</span><br><span class=\"line\">            getQueueAttributesResult.getAttributes()</span><br><span class=\"line\">                    .get(<span class=\"string\">\"ApproximateNumberOfMessagesNotVisible\"</span>)));</span><br></pre></td></tr></table></figure></div>\n\n\n<h3 id=\"전체-Full-소스\"><a href=\"#전체-Full-소스\" class=\"headerlink\" title=\"[전체 Full 소스]\"></a>[전체 Full 소스]</h3><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><figcaption><span>full source</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package helloworld;</span><br><span class=\"line\"> </span><br><span class=\"line\">import java.io.BufferedReader;</span><br><span class=\"line\">import java.io.InputStreamReader;</span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\">import java.net.URL;</span><br><span class=\"line\">import java.util.ArrayList;</span><br><span class=\"line\">import java.util.HashMap;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\">import java.util.stream.Collectors;</span><br><span class=\"line\"> </span><br><span class=\"line\">import com.amazonaws.auth.AWSStaticCredentialsProvider;</span><br><span class=\"line\">import com.amazonaws.auth.BasicAWSCredentials;</span><br><span class=\"line\">import com.amazonaws.regions.Regions;</span><br><span class=\"line\">import com.amazonaws.services.lambda.runtime.Context;</span><br><span class=\"line\">import com.amazonaws.services.lambda.runtime.RequestHandler;</span><br><span class=\"line\">import com.amazonaws.services.sqs.AmazonSQS;</span><br><span class=\"line\">import com.amazonaws.services.sqs.AmazonSQSClientBuilder;</span><br><span class=\"line\">import com.amazonaws.services.sqs.model.*;</span><br><span class=\"line\">import com.amazonaws.services.sqs.model.ListQueuesResult;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Handler <span class=\"keyword\">for</span> requests to Lambda <span class=\"keyword\">function</span>.</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class App implements RequestHandler&lt;Object, Object&gt; &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    public Object handleRequest(final Object input, final Context context) &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">        BasicAWSCredentials credentials = new BasicAWSCredentials(<span class=\"string\">\"ACCESS_KEY\"</span>, <span class=\"string\">\"SECRET_KEY\"</span>);</span><br><span class=\"line\">        AmazonSQS sqs = AmazonSQSClientBuilder.standard()</span><br><span class=\"line\">                .withCredentials(new AWSStaticCredentialsProvider(credentials))</span><br><span class=\"line\">                .withRegion(Regions.AP_NORTHEAST_2)</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">        ///////Create, Delete 는 있거나 삭제할게 없으면 바로 에러 떨어짐..</span><br><span class=\"line\">//        //1-1. FIFO Create Queue</span><br><span class=\"line\">//        Map&lt;String, String&gt; queueAttributes = new HashMap&lt;&gt;();</span><br><span class=\"line\">//        queueAttributes.put(<span class=\"string\">\"FifoQueue\"</span>, <span class=\"string\">\"true\"</span>);</span><br><span class=\"line\">//        queueAttributes.put(<span class=\"string\">\"ContentBasedDeduplication\"</span>, <span class=\"string\">\"true\"</span>);</span><br><span class=\"line\">//        queueAttributes.put(<span class=\"string\">\"VisibilityTimeout\"</span>, <span class=\"string\">\"1\"</span>);</span><br><span class=\"line\">//        CreateQueueRequest createFifoQueueRequest = new CreateQueueRequest(</span><br><span class=\"line\">//                <span class=\"string\">\"[FIFO_NAME]\"</span>).withAttributes(queueAttributes);</span><br><span class=\"line\">//        String fifoQueueUrl = sqs.createQueue(createFifoQueueRequest)</span><br><span class=\"line\">//                .getQueueUrl();</span><br><span class=\"line\"> </span><br><span class=\"line\">//        //1-2. FIFO Queue List(All)</span><br><span class=\"line\">//        ListQueuesResult lq_result = sqs.listQueues();</span><br><span class=\"line\">//        System.out.println(<span class=\"string\">\"Your SQS Queue URLs:\"</span>);</span><br><span class=\"line\">//        <span class=\"keyword\">for</span> (String url : lq_result.getQueueUrls()) &#123;</span><br><span class=\"line\">//            System.out.println(url);</span><br><span class=\"line\">//        &#125;</span><br><span class=\"line\">//        //1-3. FIFO Queue Search(KEY_WORD)</span><br><span class=\"line\">//        String name_prefix = <span class=\"string\">\"KEY_WORD_ENTER\"</span>;</span><br><span class=\"line\">//        lq_result = sqs.listQueues(new ListQueuesRequest(name_prefix));</span><br><span class=\"line\">//        System.out.println(<span class=\"string\">\"Queue URLs with prefix: \"</span> + name_prefix);</span><br><span class=\"line\">//        <span class=\"keyword\">for</span> (String url : lq_result.getQueueUrls()) &#123;</span><br><span class=\"line\">//            System.out.println(url);</span><br><span class=\"line\">//        &#125;</span><br><span class=\"line\">//        //1-4. FIFO Queue Delete(URL)</span><br><span class=\"line\">//        sqs.deleteQueue(fifoQueueUrl);</span><br><span class=\"line\"> </span><br><span class=\"line\">//        //1-5. FIFO Posting a Message to a FIFO Queue</span><br><span class=\"line\">//        SendMessageRequest send_msg_request = new SendMessageRequest()</span><br><span class=\"line\">//                .withQueueUrl(fifoQueueUrl)</span><br><span class=\"line\">//                .withMessageBody(<span class=\"string\">\"hello world\"</span>)</span><br><span class=\"line\">//                .withMessageGroupId(<span class=\"string\">\"minseok-group-1\"</span>)</span><br><span class=\"line\">//                .withDelaySeconds(0);</span><br><span class=\"line\">//        sqs.sendMessage(send_msg_request);</span><br><span class=\"line\"> </span><br><span class=\"line\">//        //1-6. FIFO Posting Multiple Messages to a Queue</span><br><span class=\"line\">//        List&lt;SendMessageBatchRequestEntry&gt; messageEntries = new ArrayList&lt;&gt;();</span><br><span class=\"line\">//        messageEntries.add(new SendMessageBatchRequestEntry()</span><br><span class=\"line\">//                .withId(<span class=\"string\">\"id-1\"</span>)</span><br><span class=\"line\">//                .withMessageBody(<span class=\"string\">\"batch-1\"</span>)</span><br><span class=\"line\">//                .withMessageGroupId(<span class=\"string\">\"minseok-group-1\"</span>));</span><br><span class=\"line\">//        messageEntries.add(new SendMessageBatchRequestEntry()</span><br><span class=\"line\">//                .withId(<span class=\"string\">\"id-2\"</span>)</span><br><span class=\"line\">//                .withMessageBody(<span class=\"string\">\"batch-2\"</span>)</span><br><span class=\"line\">//                .withMessageGroupId(<span class=\"string\">\"minseok-group-1\"</span>));</span><br><span class=\"line\">//</span><br><span class=\"line\">//        SendMessageBatchRequest sendMessageBatchRequest</span><br><span class=\"line\">//                = new SendMessageBatchRequest(fifoQueueUrl, messageEntries);</span><br><span class=\"line\">//        sqs.sendMessageBatch(sendMessageBatchRequest);</span><br><span class=\"line\"> </span><br><span class=\"line\">//        //1-7. FIFO Reading Messages from Queues</span><br><span class=\"line\">//        ReceiveMessageRequest receiveMessageRequest = new ReceiveMessageRequest(fifoQueueUrl)</span><br><span class=\"line\">//                .withWaitTimeSeconds(10)</span><br><span class=\"line\">//                .withMaxNumberOfMessages(10);</span><br><span class=\"line\">//</span><br><span class=\"line\">//        List&lt;Message&gt; sqsMessages = sqs.receiveMessage(receiveMessageRequest).getMessages();</span><br><span class=\"line\">//</span><br><span class=\"line\">//        //1-8. FIFO Deleting a Message from a Queue</span><br><span class=\"line\">//        <span class=\"keyword\">for</span> (Message m : sqsMessages) &#123;</span><br><span class=\"line\">//            sqs.deleteMessage(fifoQueueUrl, m.getReceiptHandle());</span><br><span class=\"line\">//        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">//        //1-9. FIFO Dead Letter Queues1(배달못한 편지 대기열을 생성하고,</span><br><span class=\"line\">//        /*String deadLetterQueueUrl = sqs.createQueue(<span class=\"string\">\"aws-sqs://notification_queue?amazonSQSClient=#sqsClient\"</span>).getQueueUrl();*/</span><br><span class=\"line\">//        try &#123;</span><br><span class=\"line\">//            // Create dead-letter queue</span><br><span class=\"line\">//            Map&lt;String, String&gt; queueAttributes = new HashMap&lt;&gt;();</span><br><span class=\"line\">//            queueAttributes.put(<span class=\"string\">\"FifoQueue\"</span>, <span class=\"string\">\"true\"</span>);</span><br><span class=\"line\">//            queueAttributes.put(<span class=\"string\">\"ContentBasedDeduplication\"</span>, <span class=\"string\">\"true\"</span>);</span><br><span class=\"line\">//            queueAttributes.put(<span class=\"string\">\"VisibilityTimeout\"</span>, <span class=\"string\">\"1\"</span>);</span><br><span class=\"line\">//            CreateQueueRequest createFifoQueueRequest = new CreateQueueRequest(</span><br><span class=\"line\">//                    <span class=\"string\">\"[DEADLETTER_FIFO_NAME]\"</span>).withAttributes(queueAttributes);</span><br><span class=\"line\">//            String fifoQueueUrls = sqs.createQueue(createFifoQueueRequest)</span><br><span class=\"line\">//                    .getQueueUrl();</span><br><span class=\"line\">//        &#125; catch (AmazonSQSException e) &#123;</span><br><span class=\"line\">//            <span class=\"keyword\">if</span> (!e.getErrorCode().equals(<span class=\"string\">\"QueueAlreadyExists\"</span>)) &#123;</span><br><span class=\"line\">//                throw e;</span><br><span class=\"line\">//            &#125;</span><br><span class=\"line\">//        &#125;</span><br><span class=\"line\">//        //[FIFO_NAME] 로 통신하다가 부하가 걸리면 [DEADLETTER_FIFO_NAME]로 보내도록 설정하는 아래 코드</span><br><span class=\"line\">//        String dl_queue_url = sqs.getQueueUrl(<span class=\"string\">\"[DEADLETTER_FIFO_NAME]\"</span>)</span><br><span class=\"line\">//                .getQueueUrl();</span><br><span class=\"line\">//        GetQueueAttributesResult queue_attrs = sqs.getQueueAttributes(</span><br><span class=\"line\">//                new GetQueueAttributesRequest(dl_queue_url)</span><br><span class=\"line\">//                        .withAttributeNames(<span class=\"string\">\"QueueArn\"</span>));</span><br><span class=\"line\">//        String dl_queue_arn = queue_attrs.getAttributes().get(<span class=\"string\">\"QueueArn\"</span>);</span><br><span class=\"line\">//        // Set dead letter queue with redrive policy on <span class=\"built_in\">source</span> queue.</span><br><span class=\"line\">//        String src_queue_url = sqs.getQueueUrl(<span class=\"string\">\"[FIFO_NAME]\"</span>)</span><br><span class=\"line\">//                .getQueueUrl();</span><br><span class=\"line\">//        SetQueueAttributesRequest request = new SetQueueAttributesRequest()</span><br><span class=\"line\">//                .withQueueUrl(src_queue_url)</span><br><span class=\"line\">//                .addAttributesEntry(<span class=\"string\">\"RedrivePolicy\"</span>,</span><br><span class=\"line\">//                        <span class=\"string\">\"&#123;\\\"maxReceiveCount\\\":\\\"5\\\", \\\"deadLetterTargetArn\\\":\\\"\"</span></span><br><span class=\"line\">//                                + dl_queue_arn + <span class=\"string\">\"\\\"&#125;\"</span>);</span><br><span class=\"line\">//        sqs.setQueueAttributes(request);</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">//        //1-10. FIFO Dead Letter Queues</span><br><span class=\"line\">//        GetQueueAttributesResult deadLetterQueueAttributes = sqs.getQueueAttributes(</span><br><span class=\"line\">//                new GetQueueAttributesRequest(dl_queue_url)</span><br><span class=\"line\">//                        .withAttributeNames(<span class=\"string\">\"QueueArn\"</span>));</span><br><span class=\"line\">//</span><br><span class=\"line\">//        String deadLetterQueueARN = deadLetterQueueAttributes.getAttributes()</span><br><span class=\"line\">//                .get(<span class=\"string\">\"QueueArn\"</span>);</span><br><span class=\"line\">//        SetQueueAttributesRequest queueAttributesRequest = new SetQueueAttributesRequest()</span><br><span class=\"line\">//                //.withQueueUrl(standardQueueUrl)</span><br><span class=\"line\">//                .withQueueUrl(<span class=\"string\">\"https://sqs.ap-northeast-2.amazonaws.com/[ALLIAS]/[FIFO_NAME]\"</span>)</span><br><span class=\"line\">//                .addAttributesEntry(<span class=\"string\">\"RedrivePolicy\"</span>,</span><br><span class=\"line\">//                        <span class=\"string\">\"&#123;\\\"maxReceiveCount\\\":\\\"2\\\", \"</span></span><br><span class=\"line\">//                                + <span class=\"string\">\"\\\"deadLetterTargetArn\\\":\\\"\"</span> + deadLetterQueueARN + <span class=\"string\">\"\\\"&#125;\"</span>);</span><br><span class=\"line\">//</span><br><span class=\"line\">//        sqs.setQueueAttributes(queueAttributesRequest);</span><br><span class=\"line\"> </span><br><span class=\"line\">//        //1-11. FIFO Monitoring</span><br><span class=\"line\">//        GetQueueAttributesRequest getQueueAttributesRequest</span><br><span class=\"line\">//                //= new GetQueueAttributesRequest(standardQueueUrl) //https://sqs.ap-northeast-2.amazonaws.com/491870877159/minseok.fifo</span><br><span class=\"line\">//                = new GetQueueAttributesRequest(<span class=\"string\">\"https://sqs.ap-northeast-2.amazonaws.com/[ALLIAS]/[FIFO_NAME]\"</span>)</span><br><span class=\"line\">//                .withAttributeNames(<span class=\"string\">\"All\"</span>);</span><br><span class=\"line\">//        GetQueueAttributesResult getQueueAttributesResult</span><br><span class=\"line\">//                = sqs.getQueueAttributes(getQueueAttributesRequest);</span><br><span class=\"line\">//        System.out.println(String.format(<span class=\"string\">\"The number of messages on the queue: %s\"</span>,</span><br><span class=\"line\">//                getQueueAttributesResult.getAttributes()</span><br><span class=\"line\">//                        .get(<span class=\"string\">\"ApproximateNumberOfMessages\"</span>)));</span><br><span class=\"line\">//        System.out.println(String.format(<span class=\"string\">\"The number of messages in flight: %s\"</span>,</span><br><span class=\"line\">//                getQueueAttributesResult.getAttributes()</span><br><span class=\"line\">//                        .get(<span class=\"string\">\"ApproximateNumberOfMessagesNotVisible\"</span>)));</span><br><span class=\"line\">//</span><br><span class=\"line\">/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</span><br><span class=\"line\">//</span><br><span class=\"line\">//        //2-1. Standard Create Queue</span><br><span class=\"line\">//        CreateQueueRequest create_request = new CreateQueueRequest(<span class=\"string\">\"[STANDARD_QUEUE_NAME]\"</span>)</span><br><span class=\"line\">//                .addAttributesEntry(<span class=\"string\">\"DelaySeconds\"</span>, <span class=\"string\">\"0\"</span>) //An <span class=\"built_in\">integer</span> from 0 to 900 seconds (15 minutes). Default: 0.</span><br><span class=\"line\">//                .addAttributesEntry(<span class=\"string\">\"VisibilityTimeout\"</span>, <span class=\"string\">\"30\"</span>) // An <span class=\"built_in\">integer</span> from 0 to 43,200 (12 hours). Default: 30.</span><br><span class=\"line\">//                .addAttributesEntry(<span class=\"string\">\"MessageRetentionPeriod\"</span>, <span class=\"string\">\"345600\"</span>) // An <span class=\"built_in\">integer</span> from 60 seconds (1 minute) to 1,209,600 seconds (14 days). Default: 345,600 (4 days).</span><br><span class=\"line\">//                .addAttributesEntry(<span class=\"string\">\"MaximumMessageSize\"</span>, <span class=\"string\">\"262144\"</span>); //An <span class=\"built_in\">integer</span> from 1,024 bytes (1 KiB) to 262,144 bytes (256 KiB). Default: 262,144 (256 KiB).</span><br><span class=\"line\">//        String standardQueueUrl = sqs.createQueue(create_request).getQueueUrl();</span><br><span class=\"line\"> </span><br><span class=\"line\">//        //1-2. Standard Queue List(All)</span><br><span class=\"line\">//        ListQueuesResult lq_result = sqs.listQueues();</span><br><span class=\"line\">//        System.out.println(<span class=\"string\">\"Your SQS Queue URLs:\"</span>);</span><br><span class=\"line\">//        <span class=\"keyword\">for</span> (String url : lq_result.getQueueUrls()) &#123;</span><br><span class=\"line\">//            System.out.println(url);</span><br><span class=\"line\">//        &#125;</span><br><span class=\"line\">//        //1-3. Standard Queue Search(KEY_WORD)</span><br><span class=\"line\">//        String name_prefix = <span class=\"string\">\"KEY_WORD_ENTER\"</span>;</span><br><span class=\"line\">//        lq_result = sqs.listQueues(new ListQueuesRequest(name_prefix));</span><br><span class=\"line\">//        System.out.println(<span class=\"string\">\"Queue URLs with prefix: \"</span> + name_prefix);</span><br><span class=\"line\">//        <span class=\"keyword\">for</span> (String url : lq_result.getQueueUrls()) &#123;</span><br><span class=\"line\">//            System.out.println(url);</span><br><span class=\"line\">//        &#125;</span><br><span class=\"line\">//        //1-4. Standard Queue Delete(URL)</span><br><span class=\"line\">//        sqs.deleteQueue(fifoQueueUrl);</span><br><span class=\"line\"> </span><br><span class=\"line\">//        //1-5. Standard Posting a Message to a Queue</span><br><span class=\"line\">//        SendMessageRequest send_msg_request = new SendMessageRequest()</span><br><span class=\"line\">//                .withQueueUrl(fifoQueueUrl)</span><br><span class=\"line\">//                .withMessageBody(<span class=\"string\">\"hello world\"</span>)</span><br><span class=\"line\">//                .withDelaySeconds(0);</span><br><span class=\"line\">//        sqs.sendMessage(send_msg_request);</span><br><span class=\"line\"> </span><br><span class=\"line\">//        //1-6. Standard Posting Multiple Messages to a Queue</span><br><span class=\"line\">//        List&lt;SendMessageBatchRequestEntry&gt; messageEntries = new ArrayList&lt;&gt;();</span><br><span class=\"line\">//        messageEntries.add(new SendMessageBatchRequestEntry()</span><br><span class=\"line\">//                .withId(<span class=\"string\">\"id-1\"</span>)</span><br><span class=\"line\">//                .withMessageBody(<span class=\"string\">\"batch-1\"</span>));</span><br><span class=\"line\">//        messageEntries.add(new SendMessageBatchRequestEntry()</span><br><span class=\"line\">//                .withId(<span class=\"string\">\"id-2\"</span>)</span><br><span class=\"line\">//                .withMessageBody(<span class=\"string\">\"batch-2\"</span>));</span><br><span class=\"line\">//</span><br><span class=\"line\">//        SendMessageBatchRequest sendMessageBatchRequest</span><br><span class=\"line\">//                = new SendMessageBatchRequest(fifoQueueUrl, messageEntries);</span><br><span class=\"line\">//        sqs.sendMessageBatch(sendMessageBatchRequest);</span><br><span class=\"line\"> </span><br><span class=\"line\">//        //1-7. Standard Reading Messages from Queues</span><br><span class=\"line\">//        ReceiveMessageRequest receiveMessageRequest = new ReceiveMessageRequest(fifoQueueUrl)</span><br><span class=\"line\">//                .withWaitTimeSeconds(10)</span><br><span class=\"line\">//                .withMaxNumberOfMessages(10);</span><br><span class=\"line\">//</span><br><span class=\"line\">//        List&lt;Message&gt; sqsMessages = sqs.receiveMessage(receiveMessageRequest).getMessages();</span><br><span class=\"line\">//</span><br><span class=\"line\">//        //1-8. FIFO Deleting a Message from a Queue</span><br><span class=\"line\">//        <span class=\"keyword\">for</span> (Message m : sqsMessages) &#123;</span><br><span class=\"line\">//            sqs.deleteMessage(fifoQueueUrl, m.getReceiptHandle());</span><br><span class=\"line\">//        &#125;</span><br><span class=\"line\">//</span><br><span class=\"line\">/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</span><br><span class=\"line\"> </span><br><span class=\"line\">        Map&lt;String, String&gt; headers = new HashMap&lt;&gt;();</span><br><span class=\"line\">        headers.put(<span class=\"string\">\"Content-Type\"</span>, <span class=\"string\">\"application/json\"</span>);</span><br><span class=\"line\">        headers.put(<span class=\"string\">\"X-Custom-Header\"</span>, <span class=\"string\">\"application/json\"</span>);</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            final String pageContents = this.getPageContents(<span class=\"string\">\"https://checkip.amazonaws.com\"</span>);</span><br><span class=\"line\">            String output = String.format(<span class=\"string\">\"&#123; \\\"message\\\": \\\"hello world\\\", \\\"location\\\": \\\"%s\\\" &#125;\"</span>, pageContents);</span><br><span class=\"line\">            <span class=\"built_in\">return</span> new GatewayResponse(output, headers, 200);</span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">return</span> new GatewayResponse(<span class=\"string\">\"&#123;&#125;\"</span>, headers, 500);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    private String getPageContents(String address) throws IOException&#123;</span><br><span class=\"line\">        URL url = new URL(address);</span><br><span class=\"line\">        try(BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()))) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">return</span> br.lines().collect(Collectors.joining(System.lineSeparator()));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"3-결론\"><a href=\"#3-결론\" class=\"headerlink\" title=\"3) 결론\"></a>3) 결론</h3><ol>\n<li>한개의 큐 관리만 잘 해주면 열 Dynamo 안부럽다.</li>\n<li>람다에서 돌아가는 소스로 작성되었지만, 얼마든지 다른 서비스에 쓰일 수 있다.</li>\n<li>이유 : 아까 위에서 말한대로 AWS 최초의 서비스였기 때문(거의 화석급….)</li>\n</ol>\n","text":"Kinesis가 있으니 SQS를 쓸 일이 없겠다. 이걸 뭐하러 쓰나?라고 생각했다면, 한참 더 공부해야한다. 우선 Kinesis와 SQS의 큰 차이점을 비교한다.Kinesis vs SQSKinesis는 스트리밍 데이터 수집 서비스이고 SQS는 메시지 ","link":"","raw":null,"photos":[],"categories":[{"name":"aws","slug":"aws","count":16,"path":"api/categories/aws.json"}],"tags":[{"name":"AWS","slug":"AWS","count":18,"path":"api/tags/AWS.json"},{"name":"sqs","slug":"sqs","count":1,"path":"api/tags/sqs.json"},{"name":"fifo","slug":"fifo","count":1,"path":"api/tags/fifo.json"},{"name":"standard","slug":"standard","count":1,"path":"api/tags/standard.json"}]},{"title":"Python 개발을 위한 IntelliJ 설정","slug":"LambdaPythonIntelliJ","date":"2020-05-11T05:26:08.000Z","updated":"2020-11-23T01:31:25.288Z","comments":true,"pin":null,"path":"api/articles/LambdaPythonIntelliJ.json","excerpt":"","keywords":null,"cover":"https://user-images.githubusercontent.com/62123161/81527423-2ba70e00-9395-11ea-919a-eb4abd661e5d.png","content":"<h2 id=\"개발환경-구축\"><a href=\"#개발환경-구축\" class=\"headerlink\" title=\"개발환경 구축\"></a>개발환경 구축</h2><p>※ 기본 개발환경</p>\n<ul>\n<li>IntelliJ, Django</li>\n<li>Python</li>\n<li>AWS Console, SAM(Serverless Application Model), RDS(MySQL)</li>\n</ul>\n<h2 id=\"개요\"><a href=\"#개요\" class=\"headerlink\" title=\"개요\"></a>개요</h2><ul>\n<li>파이썬 개발을 진행하고자 하면, 설정이 50%다. </li>\n<li>설정이 꼬여버리면 어떻게든 개발이 진행되지 않으므로, 설정에 유의하자. (돈이 상관없다면 Cloud9을 사용하는 것도 좋다.)</li>\n</ul>\n<h2 id=\"설정\"><a href=\"#설정\" class=\"headerlink\" title=\"설정\"></a>설정</h2><h3 id=\"IntelliJ-설치\"><a href=\"#IntelliJ-설치\" class=\"headerlink\" title=\"IntelliJ 설치\"></a>IntelliJ 설치</h3><ul>\n<li>원하는 버전을 설치해도 상관없겠지만, 1년씩 정기구독하면서 업데이트를 지원받는 IntelliJ IDEA Ultimate 를 사용하려 하였다.</li>\n<li>물론 Visual Studio도 지원을 해준다. 난 개인적으로 IDE는 IntelliJ 를 사용하고자 하였고, 이를 여기에 기록으로 남긴다.<br><a href=\"https://user-images.githubusercontent.com/62123161/81527423-2ba70e00-9395-11ea-919a-eb4abd661e5d.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/81527423-2ba70e00-9395-11ea-919a-eb4abd661e5d.png\" alt=\"LambdaPythonIntelliJ_01\"></a><br>IntelliJ에서는 아래와 같은 링크에서 보고 따라하기만 하면된다. Plugin 설치임.<br>(<a href=\"https://whitefrost-developer.tistory.com/7\" target=\"_blank\" rel=\"noopener\">https://whitefrost-developer.tistory.com/7</a>)</li>\n</ul>\n<h3 id=\"Python-설치\"><a href=\"#Python-설치\" class=\"headerlink\" title=\"Python 설치\"></a>Python 설치</h3><ul>\n<li>작성일자까지 확인해본 바로는 현재 Python은 3.8.2버전이 마지막 버전이다. </li>\n<li>설치방법은 아래 참고하자.<ol>\n<li><a href=\"http://www.python.org에서\" target=\"_blank\" rel=\"noopener\">www.python.org에서</a> 다운로드 메뉴 - Python 3.5이상 선택해서 다운로드</li>\n<li>설치 과정에서 Add Python 3.5 to Path 반드시 체크</li>\n<li>설치 확인 윈도우키 + R을 눌러서 나오는 창에 powershell이라고 치고, 확인을 눌러서 powershell실행<br><a href=\"https://user-images.githubusercontent.com/62123161/81527422-2b0e7780-9395-11ea-9f50-d801c3d11225.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/81527422-2b0e7780-9395-11ea-9f50-d801c3d11225.png\" alt=\"LambdaPythonIntelliJ_02\"></a></li>\n</ol>\n</li>\n</ul>\n<h3 id=\"SAM-설치\"><a href=\"#SAM-설치\" class=\"headerlink\" title=\"SAM 설치\"></a>SAM 설치</h3><p><a href=\"https://github.com/awslabs/aws-sam-cli/releases\" target=\"_blank\" rel=\"noopener\">https://github.com/awslabs/aws-sam-cli/releases</a></p>\n<h3 id=\"RDS-및-Dynamo-설정\"><a href=\"#RDS-및-Dynamo-설정\" class=\"headerlink\" title=\"RDS 및 Dynamo 설정\"></a>RDS 및 Dynamo 설정</h3><p>MySQL 설정 : <a href=\"https://docs.aws.amazon.com/ko_kr/AmazonRDS/latest/UserGuide/CHAP_MySQL.html\" target=\"_blank\" rel=\"noopener\">https://docs.aws.amazon.com/ko_kr/AmazonRDS/latest/UserGuide/CHAP_MySQL.html</a><br>DynamoDB 설정 : <a href=\"https://aws.amazon.com/ko/dynamodb/getting-started/\" target=\"_blank\" rel=\"noopener\">https://aws.amazon.com/ko/dynamodb/getting-started/</a></p>\n<h4 id=\"MySQL-기타설정-Optional\"><a href=\"#MySQL-기타설정-Optional\" class=\"headerlink\" title=\"MySQL 기타설정(Optional)\"></a>MySQL 기타설정(Optional)</h4><ul>\n<li>우선 기본적으로 ap-northeast-2(Seoul)에 설정하면, 당연히 SysDate()나 Now() 함수를 호출하여 현재 한국의 시간을 받아올 수 있을 줄 알았다.</li>\n<li>말도 안되겠지만, 시간을 조회하면 UTC+0이 들어온다. (그리니치 천문대 : 영국)</li>\n<li>그래서 아래와 같은 세팅을 해주어야 한다.<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><figcaption><span>Timezone 체크 쿼리(SQL)</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT @@global.time_zone, @@session.time_zone;  --현재 시스템과 세션에 설정된 타임존 보기</span><br><span class=\"line\">SET time_zone = <span class=\"string\">'Asia/Seoul'</span>; --현재 시스템의 타임존 바꿔버리기.</span><br></pre></td></tr></table></figure></div>\n위 내용은 가장 간단해서 쓴거고.. 다른방법도 있다.(어차피 RDS환경에서 다른방법은 답이없을듯.)<br>쓸거면 여기 링크 참고(<a href=\"https://jwkim96.tistory.com/23\" target=\"_blank\" rel=\"noopener\">https://jwkim96.tistory.com/23</a>)</li>\n</ul>\n<h3 id=\"Django-설치-Optional\"><a href=\"#Django-설치-Optional\" class=\"headerlink\" title=\"Django 설치(Optional)\"></a>Django 설치(Optional)</h3><p>공식 Document : <a href=\"https://docs.djangoproject.com/en/3.0/topics/install/\" target=\"_blank\" rel=\"noopener\">https://docs.djangoproject.com/en/3.0/topics/install/</a><br>문서보고 설치하면 된다.</p>\n<h2 id=\"개발\"><a href=\"#개발\" class=\"headerlink\" title=\"개발\"></a>개발</h2><p>모든 설정은 끝났다. 이제 개발만 하면되겟지만, 디버깅 모드에 관해서만 남기고 글을 마무리한다.<br>위 내용 중에 IntelliJ 설정이 완료가 되었다면 아래와 같은 화면을 볼 수 있을 것이다.</p>\n<h3 id=\"IntelliJ-프로젝트-생성\"><a href=\"#IntelliJ-프로젝트-생성\" class=\"headerlink\" title=\"IntelliJ 프로젝트 생성\"></a>IntelliJ 프로젝트 생성</h3><p><a href=\"https://user-images.githubusercontent.com/62123161/81527416-2a75e100-9395-11ea-815d-fabac97f59f4.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/81527416-2a75e100-9395-11ea-815d-fabac97f59f4.png\" alt=\"LambdaPythonIntelliJ_03\"></a></p>\n<ol>\n<li>Django를 선택해준다.<ul>\n<li>SQL Support 선택하지 않은 이유 : 보통 우리는 대부분의 서비스를 DB와 같이 쓴다. 하지만, 당장 pymysql만을 사용하겠다라고 하면 체크할 필요는 없을 것으로 판단이 되며,</li>\n<li>필요한 항목이 있을 경우 그때그때 import 해서 쓰면 된다는 생각이 들었기에 따로 체크하지 않는다.(물론 체크해서 사용해도 상관없다. 그냥 프로그램이 조금더 무거워질수도 있겠지..큰차이는 없다)</li>\n</ul>\n</li>\n<li>Next 클릭</li>\n<li>기존의 Flash Project Template가 없을것이다. 그냥 Next.</li>\n<li>프로젝트의 이름과 경로등이 정확히 들어갔는지 확인하고 Finish.</li>\n</ol>\n<h3 id=\"IntelliJ-프로젝트-디버깅\"><a href=\"#IntelliJ-프로젝트-디버깅\" class=\"headerlink\" title=\"IntelliJ 프로젝트 디버깅\"></a>IntelliJ 프로젝트 디버깅</h3><p><img src=\"https://user-images.githubusercontent.com/62123161/81527426-2c3fa480-9395-11ea-990d-e56f2c82150d.png\" alt=\"LambdaPythonIntelliJ_04\"></p>\n<ul>\n<li>이전 과정을 거치고 나면 위와 같은 화면을 마주하게 될 것이다.</li>\n<li>manage.py가 기본 Default main소스라고 보면 된다.</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/62123161/81527425-2c3fa480-9395-11ea-9063-c2786f3f9c3b.png\" alt=\"LambdaPythonIntelliJ_05\"></p>\n<ul>\n<li>디버깅이 잘 적용되는걸 볼 수 있다.</li>\n<li>저 os관련된 라이브러리는 크게 필요없으니 지워도된다. 알아서 정리해서 써보시길..</li>\n</ul>\n","text":"개발환경 구축※ 기본 개발환경IntelliJ, DjangoPythonAWS Console, SAM(Serverless Application Model), RDS(MySQL)개요파이썬 개발을 진행하고자 하면, 설정이 50%다. 설정이 꼬여버리면 어떻게든","link":"","raw":null,"photos":[],"categories":[{"name":"aws","slug":"aws","count":16,"path":"api/categories/aws.json"}],"tags":[{"name":"AWS","slug":"AWS","count":18,"path":"api/tags/AWS.json"},{"name":"python","slug":"python","count":4,"path":"api/tags/python.json"},{"name":"IntelliJ","slug":"IntelliJ","count":1,"path":"api/tags/IntelliJ.json"}]},{"title":"SNS","slug":"SNS","date":"2020-05-06T05:26:34.000Z","updated":"2020-11-23T01:31:25.299Z","comments":true,"pin":null,"path":"api/articles/SNS.json","excerpt":"","keywords":null,"cover":"https://user-images.githubusercontent.com/62123161/81143669-536d2f00-8fad-11ea-8ade-3a21d5987656.png","content":"<h2 id=\"개발환경-구축\"><a href=\"#개발환경-구축\" class=\"headerlink\" title=\"개발환경 구축\"></a>개발환경 구축</h2><p>※ 기본 개발환경</p>\n<ul>\n<li>IntelliJ</li>\n<li>Java, Spring</li>\n<li>AWS Console</li>\n</ul>\n<h2 id=\"SNS-설명\"><a href=\"#SNS-설명\" class=\"headerlink\" title=\"SNS 설명\"></a>SNS 설명</h2><ul>\n<li>사용자에게 Noti 보내주는게 주요 임무.</li>\n<li>기본 기능으로는 Push(FCM, GCM), 이메일, SMS, 등 … 다용도로 보낼 수 있다.</li>\n</ul>\n<h3 id=\"1-SNS-Topic\"><a href=\"#1-SNS-Topic\" class=\"headerlink\" title=\"1) SNS Topic\"></a>1) SNS Topic</h3><p><a href=\"https://user-images.githubusercontent.com/62123161/81143669-536d2f00-8fad-11ea-8ade-3a21d5987656.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/81143669-536d2f00-8fad-11ea-8ade-3a21d5987656.png\" alt=\"sns_02\"></a></p>\n<ul>\n<li>Topic이라는 그룹개념을 생성하고, 메세지를 받을 Subscription들을 등록하면 된다. 원하는 Protocol을 설정하면 그대로 받을 수 있다.</li>\n<li>참고사항 : 서울 리전(ap-northeast-2)는 문자서비스(SMS)를 사용할 수 없다. 도쿄리전이나, Virginia 리전을 이용하면 좋다. </li>\n<li>그리고, 기본 Limit은 말도안되지만 1달러이다. 한도를 증액 요청해야 한다.</li>\n</ul>\n<h3 id=\"2-SNS-Subscription\"><a href=\"#2-SNS-Subscription\" class=\"headerlink\" title=\"2) SNS Subscription\"></a>2) SNS Subscription</h3><p><a href=\"https://user-images.githubusercontent.com/62123161/81143663-51a36b80-8fad-11ea-922e-568047d624c5.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/81143663-51a36b80-8fad-11ea-922e-568047d624c5.png\" alt=\"sns_01\"></a></p>\n<ul>\n<li>Subscription은 말그대로 구독자다. </li>\n<li>HTTP(80), HTTPS(443), Email, SQS, Lambda 등 각종 AWS서비스와 3rd party 애플리케이션에 보낼 수 있다.</li>\n</ul>\n<h3 id=\"3-SNS-Publish-Message\"><a href=\"#3-SNS-Publish-Message\" class=\"headerlink\" title=\"3) SNS Publish Message\"></a>3) SNS Publish Message</h3><p><a href=\"https://user-images.githubusercontent.com/62123161/81143668-52d49880-8fad-11ea-99b6-946c8cbec576.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/81143668-52d49880-8fad-11ea-99b6-946c8cbec576.png\" alt=\"sns_03\"></a></p>\n<ul>\n<li>Publish는 간단히 제목과 본문으로 보내줘도 된다. 큰 의미가 없다.</li>\n</ul>\n<h3 id=\"4-Subscriptions에-여러-EndPoint를-등록할-수-있고-각-Endpoint들을-그룹으로-묶어줄-수-있다\"><a href=\"#4-Subscriptions에-여러-EndPoint를-등록할-수-있고-각-Endpoint들을-그룹으로-묶어줄-수-있다\" class=\"headerlink\" title=\"4) Subscriptions에 여러 EndPoint를 등록할 수 있고, 각 Endpoint들을 그룹으로 묶어줄 수 있다.\"></a>4) Subscriptions에 여러 EndPoint를 등록할 수 있고, 각 Endpoint들을 그룹으로 묶어줄 수 있다.</h3><p><a href=\"https://user-images.githubusercontent.com/62123161/81145089-8533c500-8fb0-11ea-8ed7-96c10b10cc60.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/81145089-8533c500-8fb0-11ea-8ed7-96c10b10cc60.png\" alt=\"sns_04\"></a></p>\n<h2 id=\"소스\"><a href=\"#소스\" class=\"headerlink\" title=\"소스\"></a>소스</h2><h3 id=\"1-Credentials\"><a href=\"#1-Credentials\" class=\"headerlink\" title=\"1) Credentials\"></a>1) Credentials</h3><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><figcaption><span>인증생성</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static BasicAWSCredentials creds = new BasicAWSCredentials(<span class=\"string\">\"ACCESS_KEY\"</span>,<span class=\"string\">\"SECRET_KEY\"</span>);</span><br><span class=\"line\">    public static AmazonSNSClient client = (AmazonSNSClient)((AmazonSNSClientBuilder)((AmazonSNSClientBuilder)AmazonSNSClient.builder().withCredentials(new AWSStaticCredentialsProvider(creds))).withRegion(aws_region)).build(); //provide credentials here</span><br><span class=\"line\">    public static AmazonSNS snsClient = (AmazonSNS)((AmazonSNSClientBuilder)((AmazonSNSClientBuilder) AmazonSNSClient.builder().withCredentials(new AWSStaticCredentialsProvider(creds))).withRegion(aws_region)).build();</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"2-Create-Topic\"><a href=\"#2-Create-Topic\" class=\"headerlink\" title=\"2) Create Topic\"></a>2) Create Topic</h3><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><figcaption><span>토픽 생성</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Create Topic</span><br><span class=\"line\">BasicAWSCredentials creds = new BasicAWSCredentials(aws_access_key_id,aws_secret_access_key);</span><br><span class=\"line\">AmazonSNS snsClient = (AmazonSNS)((AmazonSNSClientBuilder)((AmazonSNSClientBuilder) AmazonSNSClient.builder().withCredentials(new AWSStaticCredentialsProvider(creds))).withRegion(aws_region)).build();</span><br><span class=\"line\">CreateTopicResult createTopicResult = snsClient.createTopic(<span class=\"string\">\"myTopic\"</span>);</span><br><span class=\"line\">String topicArn = createTopicResult.getTopicArn();</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"3-Delete-Topic\"><a href=\"#3-Delete-Topic\" class=\"headerlink\" title=\"3) Delete Topic\"></a>3) Delete Topic</h3><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><figcaption><span>토픽삭제</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Delete Topic</span><br><span class=\"line\">BasicAWSCredentials creds = new BasicAWSCredentials(aws_access_key_id,aws_secret_access_key);</span><br><span class=\"line\">AmazonSNS snsClient = (AmazonSNS)((AmazonSNSClientBuilder)((AmazonSNSClientBuilder) AmazonSNSClient.builder().withCredentials(new AWSStaticCredentialsProvider(creds))).withRegion(aws_region)).build();</span><br><span class=\"line\">snsClient.deleteTopic(<span class=\"string\">\"myTopic\"</span>);</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"4-Get-Topic-list\"><a href=\"#4-Get-Topic-list\" class=\"headerlink\" title=\"4) Get Topic list\"></a>4) Get Topic list</h3><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><figcaption><span>SNS내 토픽리스트 받아오기.</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//////TODO:SNS (List)</span><br><span class=\"line\">            ListTopicsResult listTopicsResult = snsClient.listTopics();</span><br><span class=\"line\">            HashMap&lt;String, String&gt; listTopics = new HashMap&lt;String, String&gt;();</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(int i = 0; i&lt;listTopicsResult.getTopics().size();i++)&#123;</span><br><span class=\"line\">                String topic_arn = listTopicsResult.getTopics().get(i).toString().replace(<span class=\"string\">\"TopicArn: \"</span>,<span class=\"string\">\"\"</span>).replace(<span class=\"string\">\"&#123;\"</span>,<span class=\"string\">\"\"</span>).replace(<span class=\"string\">\"&#125;\"</span>,<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">                String[] topicSplit = topic_arn.split(<span class=\"string\">\":\"</span>);</span><br><span class=\"line\">                String topic_name = topicSplit[topicSplit.length-1];</span><br><span class=\"line\"></span><br><span class=\"line\">                listTopics.put(topic_name, topic_arn);</span><br><span class=\"line\">            &#125;</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"5-Publish-Message-Send\"><a href=\"#5-Publish-Message-Send\" class=\"headerlink\" title=\"5) Publish Message(Send)\"></a>5) Publish Message(Send)</h3><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><figcaption><span>TopicArn과 msg로 전달가능</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Publish a message to an Amazon SNS topic.</span><br><span class=\"line\">final String msg = <span class=\"string\">\"If you receive this message, publishing a message to an Amazon SNS topic works.\"</span>;</span><br><span class=\"line\">final PublishRequest publishRequest = new PublishRequest(topicArn, msg);</span><br><span class=\"line\">final PublishResult publishResponse = snsClient.publish(publishRequest);</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"6-Etc…\"><a href=\"#6-Etc…\" class=\"headerlink\" title=\"6) Etc….\"></a>6) Etc….</h3><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><figcaption><span>(번외)SQS에 보내서 Queue 방식으로 SNS에 전송</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">            //TODO: search from topic list</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(findSNSArn.length() &gt; 0)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (findSQSArn.length() &gt; 0) &#123;</span><br><span class=\"line\">                    //TODO: subscribe!!!</span><br><span class=\"line\">                    Topics.subscribeQueue(snsClient, sqsClient, findSNSArn, findSQSArn);</span><br><span class=\"line\">                    //TODO: save the token to sns</span><br><span class=\"line\">                    String token_ARN = registerWithSNS(smartPhoneKey);</span><br><span class=\"line\">                    //TODO: userSeq, smartPhoneKey, smartPhoneType, token_ARN .....mySQL</span><br><span class=\"line\">                    String[] <span class=\"built_in\">where</span> = &#123;<span class=\"string\">\"USER_SEQ\"</span>, Integer.toString(userSeq)&#125;; //&#123;<span class=\"string\">\"gid\"</span>,<span class=\"string\">\"1\"</span>,<span class=\"string\">\"uid\"</span>,<span class=\"string\">\"2\"</span>,<span class=\"string\">\"CountryCD\"</span>,<span class=\"string\">\"1\"</span>,<span class=\"string\">\"test\"</span>&#125;;</span><br><span class=\"line\">                    ResultSet resultSet = mysqlCRUD_R(<span class=\"built_in\">where</span>, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">                    int row = rowCount(resultSet);</span><br><span class=\"line\">                    //<span class=\"keyword\">if</span>, row exist : update</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(row &gt; 0)&#123;</span><br><span class=\"line\">                        mysqlCRUD_CU(<span class=\"string\">\"Update\"</span>, token_ARN);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    //<span class=\"keyword\">if</span>, row not exist : insert</span><br><span class=\"line\">                    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                        mysqlCRUD_CU(<span class=\"string\">\"Create\"</span>, token_ARN);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//                //메세지전송!!</span><br><span class=\"line\">//                snsClient.publish(new PublishRequest(findSNSArn, <span class=\"string\">\"Hello SNS World\"</span>).withSubject(<span class=\"string\">\"Subject\"</span>));</span><br><span class=\"line\">//</span><br><span class=\"line\">//                List&lt;Message&gt; messages = sqsClient.receiveMessage(new ReceiveMessageRequest(findSQSArn).getMessages();</span><br><span class=\"line\">//                <span class=\"keyword\">if</span> (messages.size() &gt; 0) &#123;</span><br><span class=\"line\">//                    byte[] decodedBytes = Base64.decodeBase64((messages.get(0)).getBody().getBytes());</span><br><span class=\"line\">//                    System.out.println(<span class=\"string\">\"Message: \"</span> +  new String(decodedBytes));</span><br><span class=\"line\">//                &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    <span class=\"built_in\">return</span> new GatewayResponse(<span class=\"string\">\"[SQS]Topic Arn does not exist.\"</span>, headers, 400);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"built_in\">return</span> new GatewayResponse(<span class=\"string\">\"[SNS]Topic Arn does not exist.\"</span>, headers, 400);</span><br><span class=\"line\">            &#125;</span><br></pre></td></tr></table></figure></div>\n\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><figcaption><span>(번외) Util들..</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    //TODO:find value from topic list</span><br><span class=\"line\">    public static String topicSearch(HashMap&lt;String, String&gt; hashMap, String topicName)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(hashMap.size() &gt; 0)&#123;</span><br><span class=\"line\">            String value = hashMap.get(topicName);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(value.length() &lt; 1)&#123;</span><br><span class=\"line\">                <span class=\"built_in\">return</span> <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"built_in\">return</span> value;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</span><br><span class=\"line\">    public String registerWithSNS(String token) &#123;</span><br><span class=\"line\">        String endpointArn = retrieveEndpointArn();</span><br><span class=\"line\"></span><br><span class=\"line\">        boolean updateNeeded = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        boolean createNeeded = (null == endpointArn);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (createNeeded) &#123;</span><br><span class=\"line\">            // No platform endpoint ARN is stored; need to call createEndpoint.</span><br><span class=\"line\">            endpointArn = createEndpoint(token, platformApplication_ARN);</span><br><span class=\"line\">            createNeeded = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Retrieving platform endpoint data...\"</span>);</span><br><span class=\"line\">        // Look up the platform endpoint and make sure the data <span class=\"keyword\">in</span> it is current, even <span class=\"keyword\">if</span></span><br><span class=\"line\">        // it was just created.</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            GetEndpointAttributesRequest geaReq =</span><br><span class=\"line\">                    new GetEndpointAttributesRequest()</span><br><span class=\"line\">                            .withEndpointArn(endpointArn);</span><br><span class=\"line\">            GetEndpointAttributesResult geaRes =</span><br><span class=\"line\">                    client.getEndpointAttributes(geaReq);</span><br><span class=\"line\"></span><br><span class=\"line\">            updateNeeded = !geaRes.getAttributes().get(<span class=\"string\">\"Token\"</span>).equals(token)</span><br><span class=\"line\">                    || !geaRes.getAttributes().get(<span class=\"string\">\"Enabled\"</span>).equalsIgnoreCase(<span class=\"string\">\"true\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; catch (NotFoundException nfe) &#123;</span><br><span class=\"line\">            // We had a stored ARN, but the platform endpoint associated with it</span><br><span class=\"line\">            // disappeared. Recreate it.</span><br><span class=\"line\">            createNeeded = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (createNeeded) &#123;</span><br><span class=\"line\">            createEndpoint(token, platformApplication_ARN);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"updateNeeded = \"</span> + updateNeeded);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (updateNeeded) &#123;</span><br><span class=\"line\">            // The platform endpoint is out of sync with the current data;</span><br><span class=\"line\">            // update the token and <span class=\"built_in\">enable</span> it.</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"Updating platform endpoint \"</span> + endpointArn);</span><br><span class=\"line\">            Map attribs = new HashMap();</span><br><span class=\"line\">            attribs.put(<span class=\"string\">\"Token\"</span>, token);</span><br><span class=\"line\">            attribs.put(<span class=\"string\">\"Enabled\"</span>, <span class=\"string\">\"true\"</span>);</span><br><span class=\"line\">            SetEndpointAttributesRequest saeReq =</span><br><span class=\"line\">                    new SetEndpointAttributesRequest()</span><br><span class=\"line\">                            .withEndpointArn(endpointArn)</span><br><span class=\"line\">                            .withAttributes(attribs);</span><br><span class=\"line\">            client.setEndpointAttributes(saeReq);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> endpointArn;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @<span class=\"built_in\">return</span> never null</span><br><span class=\"line\">     * */</span><br><span class=\"line\">    private String createEndpoint(String token, String PlatformApplicationARN) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        String endpointArn = null;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"Creating platform endpoint with token \"</span> + token);</span><br><span class=\"line\">            CreatePlatformEndpointRequest cpeReq =</span><br><span class=\"line\">                    new CreatePlatformEndpointRequest()</span><br><span class=\"line\">//                            .withPlatformApplicationArn(applicationArn)</span><br><span class=\"line\">                            .withPlatformApplicationArn(platformApplication_ARN)</span><br><span class=\"line\">                            .withToken(token);</span><br><span class=\"line\">            CreatePlatformEndpointResult cpeRes = client</span><br><span class=\"line\">                    .createPlatformEndpoint(cpeReq);</span><br><span class=\"line\">            endpointArn = cpeRes.getEndpointArn();</span><br><span class=\"line\">        &#125; catch (InvalidParameterException ipe) &#123;</span><br><span class=\"line\">            String message = ipe.getErrorMessage();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"Exception message: \"</span> + message);</span><br><span class=\"line\">            Pattern p = Pattern</span><br><span class=\"line\">                    .compile(<span class=\"string\">\".*Endpoint (arn:aws:sns[^ ]+) already exists \"</span> +</span><br><span class=\"line\">                            <span class=\"string\">\"with the same [Tt]oken.*\"</span>);</span><br><span class=\"line\">            Matcher m = p.matcher(message);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (m.matches()) &#123;</span><br><span class=\"line\">                // The platform endpoint already exists <span class=\"keyword\">for</span> this token, but with</span><br><span class=\"line\">                // additional custom data that</span><br><span class=\"line\">                // createEndpoint does not want to overwrite. Just use the</span><br><span class=\"line\">                // existing platform endpoint.</span><br><span class=\"line\">                endpointArn = m.group(1);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                // Rethrow the exception, the input is actually bad.</span><br><span class=\"line\">                throw ipe;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        storeEndpointArn(endpointArn);</span><br><span class=\"line\">        <span class=\"built_in\">return</span> endpointArn;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @<span class=\"built_in\">return</span> the ARN the app was registered under previously, or null <span class=\"keyword\">if</span> no</span><br><span class=\"line\">     *         platform endpoint ARN is stored.</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private String <span class=\"function\"><span class=\"title\">retrieveEndpointArn</span></span>() &#123;</span><br><span class=\"line\">        // Retrieve the platform endpoint ARN from permanent storage,</span><br><span class=\"line\">        // or <span class=\"built_in\">return</span> null <span class=\"keyword\">if</span> null is stored.</span><br><span class=\"line\">        <span class=\"built_in\">return</span> arnStorage;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Stores the platform endpoint ARN <span class=\"keyword\">in</span> permanent storage <span class=\"keyword\">for</span> lookup next time.</span><br><span class=\"line\">     * */</span><br><span class=\"line\">    private void storeEndpointArn(String endpointArn) &#123;</span><br><span class=\"line\">        // Write the platform endpoint ARN to permanent storage.</span><br><span class=\"line\">        arnStorage = endpointArn;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</span><br><span class=\"line\">    public static ResultSet mysqlCRUD_R(String[] <span class=\"built_in\">where</span>, String orderby)&#123;</span><br><span class=\"line\">        Connection conn = null;</span><br><span class=\"line\">        Statement stmt = null;</span><br><span class=\"line\"></span><br><span class=\"line\">        try&#123;</span><br><span class=\"line\">            Class.forName(JDBC_DRIVER);</span><br><span class=\"line\">            conn = DriverManager.getConnection(mySQLConnection,USERNAME,PASSWORD);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"\\n- MySQL Connection\"</span>);</span><br><span class=\"line\">            stmt = conn.createStatement(</span><br><span class=\"line\">                    ResultSet.TYPE_SCROLL_INSENSITIVE,</span><br><span class=\"line\">                    ResultSet.CONCUR_READ_ONLY);</span><br><span class=\"line\"></span><br><span class=\"line\">            String sql;</span><br><span class=\"line\">            sql = <span class=\"string\">\"SELECT * FROM \"</span>+insertDataTableName;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(where.length &gt; 0) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((where.length % 2) == 0) &#123;//Even Number</span><br><span class=\"line\">                    String str = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">                    str += <span class=\"string\">\" WHERE \"</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (int i = 0; i &lt; where.length; i++) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>((where.length/2) == ((i/2)+1))&#123;//final</span><br><span class=\"line\">                            str += <span class=\"built_in\">where</span>[i] + <span class=\"string\">\"='\"</span> + <span class=\"built_in\">where</span>[i + 1] + <span class=\"string\">\"' \"</span>;</span><br><span class=\"line\">                            i++;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                            str += <span class=\"built_in\">where</span>[i] + <span class=\"string\">\"='\"</span> + <span class=\"built_in\">where</span>[i + 1] + <span class=\"string\">\"' AND \"</span>;</span><br><span class=\"line\">                            i++;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    sql += str;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123; //Odd Number</span><br><span class=\"line\">                    String str = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">                    str += <span class=\"string\">\" WHERE \"</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (int i = 0; i &lt; where.length - 1; i++) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>((where.length/2) == ((i/2)+1))&#123;//final</span><br><span class=\"line\">                            str += <span class=\"built_in\">where</span>[i] + <span class=\"string\">\"='\"</span> + <span class=\"built_in\">where</span>[i + 1] + <span class=\"string\">\"' \"</span>;</span><br><span class=\"line\">                            i++;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                            str += <span class=\"built_in\">where</span>[i] + <span class=\"string\">\"='\"</span> + <span class=\"built_in\">where</span>[i + 1] + <span class=\"string\">\"' AND \"</span>;</span><br><span class=\"line\">                            i++;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    sql += str;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(orderby.length()&gt;0)&#123;</span><br><span class=\"line\">                sql += orderby;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            rs = stmt.executeQuery(sql);</span><br><span class=\"line\">            int row = rowCount(rs);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">while</span>(rs.next())&#123;</span><br><span class=\"line\">                String groupName = rs.getString(<span class=\"string\">\"USER_SEQ\"</span>);</span><br><span class=\"line\">                String memberName = rs.getString(<span class=\"string\">\"SMARTPHONE_KEY\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                System.out.print(<span class=\"string\">\"\\n** USER_SEQ : \"</span> + groupName);</span><br><span class=\"line\">                System.out.print(<span class=\"string\">\"\\n    -&gt; SMARTPHONE_KEY: \"</span> + memberName);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            //rs.close();</span><br><span class=\"line\">            //stmt.close();</span><br><span class=\"line\">            //conn.close();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;catch(SQLException se1)&#123;</span><br><span class=\"line\">            se1.printStackTrace();</span><br><span class=\"line\">        &#125;catch(Exception ex)&#123;</span><br><span class=\"line\">            ex.printStackTrace();</span><br><span class=\"line\">        &#125;finally&#123;</span><br><span class=\"line\">//            try&#123;</span><br><span class=\"line\">//                <span class=\"keyword\">if</span>(stmt!=null)</span><br><span class=\"line\">//                    stmt.close();</span><br><span class=\"line\">//            &#125;catch(SQLException se2)&#123;</span><br><span class=\"line\">//</span><br><span class=\"line\">//            &#125;</span><br><span class=\"line\">//            try&#123;</span><br><span class=\"line\">//                <span class=\"keyword\">if</span>(conn!=null)</span><br><span class=\"line\">//                    conn.close();</span><br><span class=\"line\">//            &#125;catch(SQLException se)&#123;</span><br><span class=\"line\">//                se.printStackTrace();</span><br><span class=\"line\">//            &#125;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"\\n\\n- MySQL Connection Close\"</span>);</span><br><span class=\"line\">            <span class=\"built_in\">return</span> rs;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public static int rowCount(ResultSet resultSet)&#123;</span><br><span class=\"line\">        int size = 0;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            resultSet.last();</span><br><span class=\"line\">            size = resultSet.getRow();</span><br><span class=\"line\">            resultSet.beforeFirst();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        catch(Exception ex) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">return</span> 0;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public static ResultSet mysqlCRUD_CU(String devide, String token_ARN)&#123;</span><br><span class=\"line\">        Connection con = null;</span><br><span class=\"line\">        PreparedStatement pstmt = null;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            String SQL = null;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(devide == <span class=\"string\">\"Create\"</span>)&#123;</span><br><span class=\"line\">                SQL = <span class=\"string\">\"INSERT문\"</span>;</span><br><span class=\"line\">                Class.forName(JDBC_DRIVER);</span><br><span class=\"line\">                con = DriverManager.getConnection(mySQLConnection, USERNAME, PASSWORD);</span><br><span class=\"line\">                java.util.Date utilDate = new java.util.Date ();</span><br><span class=\"line\">                pstmt = con.prepareStatement(SQL);</span><br><span class=\"line\">                pstmt.setInt(N,VALUE);</span><br><span class=\"line\">                pstmt.setString(N, VALUE);</span><br><span class=\"line\">                pstmt.setNull(N, Types.VARCHAR); //java.sql.Types.NULL</span><br><span class=\"line\">                pstmt.setDate(N, java.sql.Date.valueOf(java.time.LocalDate.now()));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(devide == <span class=\"string\">\"Update\"</span>)&#123;</span><br><span class=\"line\">                SQL = <span class=\"string\">\"UPDATE문\"</span>;</span><br><span class=\"line\">                Class.forName(JDBC_DRIVER);</span><br><span class=\"line\">                con = DriverManager.getConnection(mySQLConnection, USERNAME, PASSWORD);</span><br><span class=\"line\">                java.util.Date utilDate = new java.util.Date ();</span><br><span class=\"line\">                pstmt = con.prepareStatement(SQL);</span><br><span class=\"line\">                pstmt.setString(N, VALUE);</span><br><span class=\"line\">                pstmt.setInt(N, VALUE);</span><br><span class=\"line\">                pstmt.setNull(N, Types.VARCHAR); //java.sql.Types.NULL</span><br><span class=\"line\">                pstmt.setDate(N, java.sql.Date.valueOf(java.time.LocalDate.now()));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"built_in\">return</span> rs;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            int r = pstmt.executeUpdate();</span><br><span class=\"line\">        &#125; catch (SQLException e) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">return</span> rs=null;</span><br><span class=\"line\">        &#125; catch (ClassNotFoundException e1) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">return</span> rs=null;</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (pstmt != null) &#123;</span><br><span class=\"line\">                try &#123;</span><br><span class=\"line\">                    pstmt.close();</span><br><span class=\"line\">                &#125; catch (SQLException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (con != null) &#123;</span><br><span class=\"line\">                try &#123;</span><br><span class=\"line\">                    con.close();</span><br><span class=\"line\">                &#125; catch (SQLException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">return</span> rs;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"번외\"><a href=\"#번외\" class=\"headerlink\" title=\"번외\"></a>번외</h3><ul>\n<li>각 유형의 가입자에게 다른 컨텐츠를 보내려면 “각 전송 프로토콜에 대한 사용자 정의 페이로드”를 선택한 다음 각 프로토콜에 대한 지시 사항이있는 JSON 오브젝트를 삽입<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"default\"</span>: <span class=\"string\">\"Sample fallback message\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"email\"</span>: <span class=\"string\">\"Sample message for email endpoints\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"sqs\"</span>: <span class=\"string\">\"Sample message for Amazon SQS endpoints\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"lambda\"</span>: <span class=\"string\">\"Sample message for AWS Lambda endpoints\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"http\"</span>: <span class=\"string\">\"Sample message for HTTP endpoints\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"https\"</span>: <span class=\"string\">\"Sample message for HTTPS endpoints\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"sms\"</span>: <span class=\"string\">\"Sample message for SMS endpoints\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"APNS\"</span>: <span class=\"string\">\"&#123;\\\"aps\\\":&#123;\\\"alert\\\": \\\"Sample message for iOS endpoints\\\"&#125; &#125;\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"APNS_SANDBOX\"</span>: <span class=\"string\">\"&#123;\\\"aps\\\":&#123;\\\"alert\\\":\\\"Sample message for iOS development endpoints\\\"&#125;&#125;\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"APNS_VOIP\"</span>: <span class=\"string\">\"&#123;\\\"aps\\\":&#123;\\\"alert\\\":\\\"Sample message for Apple VoIP endpoints\\\"&#125;&#125;\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"APNS_VOIP_SANDBOX\"</span>: <span class=\"string\">\"&#123;\\\"aps\\\":&#123;\\\"alert\\\": \\\"Sample message for Apple VoIP development endpoints\\\"&#125; &#125;\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"MACOS\"</span>: <span class=\"string\">\"&#123;\\\"aps\\\":&#123;\\\"alert\\\":\\\"Sample message for MacOS endpoints\\\"&#125;&#125;\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"MACOS_SANDBOX\"</span>: <span class=\"string\">\"&#123;\\\"aps\\\":&#123;\\\"alert\\\": \\\"Sample message for MacOS development endpoints\\\"&#125; &#125;\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"GCM\"</span>: <span class=\"string\">\"&#123; \\\"data\\\": &#123; \\\"message\\\": \\\"Sample message for Android endpoints\\\" &#125; &#125;\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"ADM\"</span>: <span class=\"string\">\"&#123; \\\"data\\\": &#123; \\\"message\\\": \\\"Sample message for FireOS endpoints\\\" &#125; &#125;\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"BAIDU\"</span>: <span class=\"string\">\"&#123;\\\"title\\\":\\\"Sample message title\\\",\\\"description\\\":\\\"Sample message for Baidu endpoints\\\"&#125;\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"MPNS\"</span>: <span class=\"string\">\"&lt;?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?&gt;&lt;wp:Notification xmlns:wp=\\\"WPNotification\\\"&gt;&lt;wp:Tile&gt;&lt;wp:Count&gt;ENTER COUNT&lt;/wp:Count&gt;&lt;wp:Title&gt;Sample message for Windows Phone 7+ endpoints&lt;/wp:Title&gt;&lt;/wp:Tile&gt;&lt;/wp:Notification&gt;\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"WNS\"</span>: <span class=\"string\">\"&lt;badge version=\\\"1\\\" value=\\\"42\\\"/&gt;\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div></li>\n</ul>\n","text":"개발환경 구축※ 기본 개발환경IntelliJJava, SpringAWS ConsoleSNS 설명사용자에게 Noti 보내주는게 주요 임무.기본 기능으로는 Push(FCM, GCM), 이메일, SMS, 등 … 다용도로 보낼 수 있다.1) SNS Topic","link":"","raw":null,"photos":[],"categories":[{"name":"aws","slug":"aws","count":16,"path":"api/categories/aws.json"}],"tags":[{"name":"AWS","slug":"AWS","count":18,"path":"api/tags/AWS.json"},{"name":"secretsmanager","slug":"secretsmanager","count":2,"path":"api/tags/secretsmanager.json"},{"name":"Secret","slug":"Secret","count":2,"path":"api/tags/Secret.json"}]},{"title":"Kinesis Data Analytics","slug":"kinesisDataAnalytics","date":"2020-05-02T04:36:44.000Z","updated":"2020-11-23T01:31:25.287Z","comments":true,"pin":null,"path":"api/articles/kinesisDataAnalytics.json","excerpt":"","keywords":null,"cover":"https://user-images.githubusercontent.com/62123161/80855331-3f5ac200-8c7b-11ea-87f4-3176b8b70682.png","content":"<h2 id=\"개발환경-구축\"><a href=\"#개발환경-구축\" class=\"headerlink\" title=\"개발환경 구축\"></a>개발환경 구축</h2><p>※ 기본 개발환경</p>\n<ul>\n<li>IntelliJ</li>\n<li>Java, Spring</li>\n<li>AWS Console</li>\n</ul>\n<h2 id=\"Kinesis-Data-Analytics-기초설명\"><a href=\"#Kinesis-Data-Analytics-기초설명\" class=\"headerlink\" title=\"Kinesis Data Analytics 기초설명\"></a>Kinesis Data Analytics 기초설명</h2><ol>\n<li>Kinesis Data Analytics을(를) 시작하려면 스트리밍 데이터를 지속적으로 읽고 처리하는 Kinesis 데이터 분석 애플리케이션을 생성합니다. 이 서비스는 Amazon Kinesis Data Streams 및 Amazon Kinesis Data Firehose 스트리밍 소스로부터의 데이터 수집을 지원합니다. 그런 다음 대화형 편집기를 사용하여 SQL 코드를 작성하고 라이브 스트리밍 데이터로 테스트합니다. Kinesis Data Analytics이(가) 결과를 전송하려는 대상을 구성할 수도 있습니다.</li>\n<li>Kinesis Data Analytics은(는) Amazon Kinesis Data Firehose(Amazon S3, Amazon Redshift, Amazon Elasticsearch Service 및 Splunk), AWS Lambda 및 Amazon Kinesis Data Streams을(를) 대상으로 지원합니다.</li>\n<li>Analytics의 경우 코딩이 전~~혀 없음.(굳이 있다면, 콘솔 내 SQL 문 작성해야 하는 정도?)</li>\n<li>코딩이 없는 만큼, Console화면에 대해 익숙해져야 함. </li>\n</ol>\n<h3 id=\"1-Create-application\"><a href=\"#1-Create-application\" class=\"headerlink\" title=\"1. Create application\"></a>1. Create application</h3><p><a href=\"https://user-images.githubusercontent.com/62123161/80855331-3f5ac200-8c7b-11ea-87f4-3176b8b70682.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/80855331-3f5ac200-8c7b-11ea-87f4-3176b8b70682.png\" alt=\"kinesisAnalytics_01\"></a></p>\n<ul>\n<li>[Create Application] 선택</li>\n</ul>\n<p><a href=\"https://user-images.githubusercontent.com/62123161/80855330-3ec22b80-8c7b-11ea-988e-fca08da5ea36.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/80855330-3ec22b80-8c7b-11ea-988e-fca08da5ea36.png\" alt=\"kinesisAnalytics_02\"></a></p>\n<ul>\n<li>생성을 누르면 Analytics 생성이 완료되었습니다. 축하합니다. 끝…. 이면 좋겠지만, 이 뒤가 실제 분석단계고 겨우 겉의 껍데기 하나 만든것이다.</li>\n</ul>\n<p><a href=\"https://user-images.githubusercontent.com/62123161/80855329-3e299500-8c7b-11ea-8c0e-423c69e40641.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/80855329-3e299500-8c7b-11ea-8c0e-423c69e40641.png\" alt=\"kinesisAnalytics_03\"></a></p>\n<ul>\n<li>Streaming 할 데이터, 실시간 분석(확인용), 보낼곳 설정 등 과정을 거친다.</li>\n<li>해당 과정을 거치면서 상당히 많은 오류를 맞닥트리게 될 것이다. 보통은 형변환에서 에러가 난다. (예-Varchar형인데 int형으로 분류됬을 경우.)</li>\n<li>실제 컬럼양이 많아서 귀찮더라도, 하나하나 전부 체크해 주어야 향후 Analytics를 원활하게 쓸 수 있다.</li>\n</ul>\n<p><a href=\"https://user-images.githubusercontent.com/62123161/80855328-3d90fe80-8c7b-11ea-95fa-6377adcd65e9.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/80855328-3d90fe80-8c7b-11ea-95fa-6377adcd65e9.png\" alt=\"kinesisAnalytics_04\"></a></p>\n<ul>\n<li>Source : 위에서 생성한 test-kinesis 선택</li>\n<li>Record pre-processing : 위의 firehose에서처럼 람다 함수를 이용하여 스트림 데이터 가공 가능</li>\n<li>Access permissions : IAM 롤 생성</li>\n<li>Discover schema 버튼을 클릭하여 스키마 확인 및 설정</li>\n</ul>\n<p><a href=\"https://user-images.githubusercontent.com/62123161/80855327-3cf86800-8c7b-11ea-8063-351e853d8e13.PNG\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/80855327-3cf86800-8c7b-11ea-8063-351e853d8e13.PNG\" alt=\"kinesisAnalytics_05\"></a></p>\n<ul>\n<li>자동으로 설정된 스키마 확인 후 필요에 따라 Edit schema 버튼을 통하여 스키마 수정</li>\n</ul>\n<p><a href=\"https://user-images.githubusercontent.com/62123161/80855326-3cf86800-8c7b-11ea-8901-cdbfe521e1db.PNG\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/80855326-3cf86800-8c7b-11ea-8901-cdbfe521e1db.PNG\" alt=\"kinesisAnalytics_06\"></a></p>\n<ul>\n<li>적절하게 스키마 변경 후 Save schema and update stream samples 버튼을 클릭하여 확인</li>\n</ul>\n<p><a href=\"https://user-images.githubusercontent.com/62123161/80855325-3bc73b00-8c7b-11ea-9896-fe3958db0c75.PNG\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/80855325-3bc73b00-8c7b-11ea-9896-fe3958db0c75.PNG\" alt=\"kinesisAnalytics_07\"></a></p>\n<ul>\n<li>소스를 선택하면 Real time analytics 영역이 활성화됨. Go to SQL editor 클릭</li>\n</ul>\n<p><a href=\"https://user-images.githubusercontent.com/62123161/80855324-3b2ea480-8c7b-11ea-84ba-bcbbea1d6efa.PNG\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/80855324-3b2ea480-8c7b-11ea-84ba-bcbbea1d6efa.PNG\" alt=\"kinesisAnalytics_08\"></a></p>\n<ul>\n<li>스크림 SQL을 작성 후 Save and run SQL 버튼 클릭</li>\n<li>하단의 Real-time analytics 탭에서 결과 데이터 실시간 확인</li>\n</ul>\n<p><a href=\"https://user-images.githubusercontent.com/62123161/80855323-3a960e00-8c7b-11ea-93f0-67c18f83d4d3.PNG\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/80855323-3a960e00-8c7b-11ea-93f0-67c18f83d4d3.PNG\" alt=\"kinesisAnalytics_09\"></a></p>\n<ul>\n<li>Real time analytics를 선택하면 Destination 영역이 활성화됨</li>\n</ul>\n<p><a href=\"https://user-images.githubusercontent.com/62123161/80855322-3a960e00-8c7b-11ea-9d44-becb19a625c9.PNG\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/80855322-3a960e00-8c7b-11ea-9d44-becb19a625c9.PNG\" alt=\"kinesisAnalytics_10\"></a></p>\n<ul>\n<li>Kinesis Analytics 데이터를 전달할 Firehose 생성 (test-firehose-destination)</li>\n</ul>\n<p><a href=\"https://user-images.githubusercontent.com/62123161/80855321-39fd7780-8c7b-11ea-8645-8ae033de86f2.PNG\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/80855321-39fd7780-8c7b-11ea-8645-8ae033de86f2.PNG\" alt=\"kinesisAnalytics_11\"></a></p>\n<ul>\n<li>다시 Analytics로 돌아와서 Destination 버튼 클릭</li>\n<li>Destination 서비스는 Kinesis Firehose 선택 후 위에서 생성한 test-firehose-destination 선택</li>\n<li>In-application stream으로 위에서 생성한 DESTINATION_SQL_STREAM 선택 후 저장</li>\n</ul>\n<p><a href=\"https://user-images.githubusercontent.com/62123161/80855320-3964e100-8c7b-11ea-8d38-df4f865408fa.PNG\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/80855320-3964e100-8c7b-11ea-8d38-df4f865408fa.PNG\" alt=\"kinesisAnalytics_12\"></a><br><a href=\"https://user-images.githubusercontent.com/62123161/80855318-38cc4a80-8c7b-11ea-9561-dae174bc37a3.PNG\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/80855318-38cc4a80-8c7b-11ea-9561-dae174bc37a3.PNG\" alt=\"kinesisAnalytics_13\"></a></p>\n<ul>\n<li>전체 설정 확인 후 목록에서 Running 상태 확인</li>\n</ul>\n<p><a href=\"https://user-images.githubusercontent.com/62123161/80855316-3833b400-8c7b-11ea-8125-157f380587ca.PNG\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/80855316-3833b400-8c7b-11ea-8125-157f380587ca.PNG\" alt=\"kinesisAnalytics_14\"></a></p>\n<ul>\n<li>test-firehose에 연결한 Kinesis Streams 데이터 S3 저장 확인</li>\n</ul>\n<p><a href=\"https://user-images.githubusercontent.com/62123161/80855314-37028700-8c7b-11ea-9b6f-1c2bb17198b0.PNG\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/80855314-37028700-8c7b-11ea-9b6f-1c2bb17198b0.PNG\" alt=\"kinesisAnalytics_15\"></a></p>\n<ul>\n<li>test-firehose-destination에 연결한 Kinesis Analytics 데이터 S3 저장 확인</li>\n</ul>\n","text":"개발환경 구축※ 기본 개발환경IntelliJJava, SpringAWS ConsoleKinesis Data Analytics 기초설명Kinesis Data Analytics을(를) 시작하려면 스트리밍 데이터를 지속적으로 읽고 처리하는 Kinesis 데","link":"","raw":null,"photos":[],"categories":[{"name":"aws","slug":"aws","count":16,"path":"api/categories/aws.json"}],"tags":[{"name":"AWS","slug":"AWS","count":18,"path":"api/tags/AWS.json"},{"name":"Kinesis","slug":"Kinesis","count":4,"path":"api/tags/Kinesis.json"},{"name":"Analytics","slug":"Analytics","count":1,"path":"api/tags/Analytics.json"}]},{"title":"iotCore","slug":"iotCore","date":"2020-05-05T23:47:30.000Z","updated":"2020-11-23T01:31:25.288Z","comments":true,"pin":null,"path":"api/articles/iotCore.json","excerpt":"","keywords":null,"cover":"https://user-images.githubusercontent.com/62123161/81146079-8d8cff80-8fb2-11ea-9c70-659a95ce13a1.png","content":"<h2 id=\"개발환경-구축\"><a href=\"#개발환경-구축\" class=\"headerlink\" title=\"개발환경 구축\"></a>개발환경 구축</h2><p>※ 기본 개발환경</p>\n<ul>\n<li>IntelliJ</li>\n<li>Java, Spring</li>\n<li>AWS Console</li>\n</ul>\n<h2 id=\"IoT-Core-설명\"><a href=\"#IoT-Core-설명\" class=\"headerlink\" title=\"IoT Core 설명\"></a>IoT Core 설명</h2><ol>\n<li>AWS IoT Core는 커넥티드 디바이스가 쉽고 안전하게 클라우드 애플리케이션 및 다른 디바이스와 상호 작용할 수 있게 해주는 관리형 클라우드 서비스입니다. AWS IoT Core는 수십억 개의 디바이스와 수조 건의 메시지를 지원하며, 안전하고 안정적으로 이러한 메시지를 처리하여 AWS 엔드포인트 및 다른 디바이스로 라우팅할 수 있습니다. AWS IoT Core의 경우, 디바이스가 연결되어 있지 않더라도 언제나 애플리케이션에서 모든 디바이스를 추적하고 디바이스와 통신할 수 있습니다.</li>\n<li>또한 AWS IoT Core를 사용하면 인프라를 관리할 필요 없이, AWS Lambda, Amazon Kinesis, Amazon S3, Amazon SageMaker, Amazon DynamoDB, Amazon CloudWatch, AWS CloudTrail, Amazon QuickSight 및 Alexa Voice Service와 같은 AWS 및 Amazon 서비스를 사용하여, 커넥티드 디바이스에서 생성한 데이터를 수집, 처리 및 분석하고 이를 기반으로 운영하는 IoT 애플리케이션을 손쉽게 구축할 수 있습니다.</li>\n<li>현재 경동에서는 AWS IoT Core 플랫폼을 Converter쪽에서 주로 컨트롤 하고 있다.(자세한 설명은 생략한다..) </li>\n</ol>\n<p><a href=\"https://user-images.githubusercontent.com/62123161/81146079-8d8cff80-8fb2-11ea-9c70-659a95ce13a1.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/81146079-8d8cff80-8fb2-11ea-9c70-659a95ce13a1.png\" alt=\"iotcore_01\"></a><br><em>초기화면 - 전체 디바이스에 대한 현황을 보여준다.</em></p>\n<ul>\n<li>기존 다른 서비스와 다른 점으로는 하나의 플랫폼이 모든 서비스의 디바이스를 관리한다는 점. (서비스별로 그룹화 불가능 / 물론, Additional Value로 값을 지정할 수는 있음.)</li>\n<li>경동은 Manage, Secure, Act, Test 네가지 속성만을 사용한다. (Setting은 무시 ㅡㅡ;)</li>\n</ul>\n<h3 id=\"1-Manage\"><a href=\"#1-Manage\" class=\"headerlink\" title=\"1) Manage\"></a>1) Manage</h3><h4 id=\"Things\"><a href=\"#Things\" class=\"headerlink\" title=\"Things\"></a>Things</h4><p><a href=\"https://user-images.githubusercontent.com/62123161/81146081-8e259600-8fb2-11ea-91dc-6815331e657f.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/81146081-8e259600-8fb2-11ea-91dc-6815331e657f.png\" alt=\"iotcore_02\"></a></p>\n<ul>\n<li>Things는 디바이스 전체가 나오는 화면 / 검색을 통하여 특정 디바이스를 찾을 수 있으며, 연결이 됬는지 안됬는지 확인할 수 있다.(명령어 예-  connectivity.connected:true)</li>\n</ul>\n<h4 id=\"Type\"><a href=\"#Type\" class=\"headerlink\" title=\"Type\"></a>Type</h4><p><a href=\"https://user-images.githubusercontent.com/62123161/81146082-8e259600-8fb2-11ea-9f1f-1b7b523a9f28.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/81146082-8e259600-8fb2-11ea-9f1f-1b7b523a9f28.png\" alt=\"iotcore_03\"></a></p>\n<ul>\n<li>디바이스 별로 Section을 구분할 수 없기에 Type으로 지정할 수 있다.</li>\n</ul>\n<h4 id=\"Thing-groups\"><a href=\"#Thing-groups\" class=\"headerlink\" title=\"Thing groups\"></a>Thing groups</h4><p><a href=\"https://user-images.githubusercontent.com/62123161/81146071-8b2aa580-8fb2-11ea-9dee-0fff15dabd08.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/81146071-8b2aa580-8fb2-11ea-9dee-0fff15dabd08.png\" alt=\"iotcore_04\"></a></p>\n<ul>\n<li>현재는 스마트톡 밖에 없지만, 향후 서비스별로 추가가 될 예정이다.</li>\n</ul>\n<h4 id=\"Secure\"><a href=\"#Secure\" class=\"headerlink\" title=\"Secure\"></a>Secure</h4><h5 id=\"Certificates\"><a href=\"#Certificates\" class=\"headerlink\" title=\"Certificates\"></a>Certificates</h5><p><a href=\"https://user-images.githubusercontent.com/62123161/81146073-8c5bd280-8fb2-11ea-992d-b30143ac216c.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/81146073-8c5bd280-8fb2-11ea-992d-b30143ac216c.png\" alt=\"iotcore_05\"></a></p>\n<ul>\n<li>IoT Core의 꽃이다. 인증서는 각 디바이스별로 갖고있으며, 인증서가 있어야만 Things에 등록될 수 있다.</li>\n<li>반대로 얘기하면 인증서가 없이는 어떤 디바이스라도(실제 우리제품이라고 하더라도) 등록이 안된다는 소리이며</li>\n<li>이 얘기를 조금 더 풀어 해석한다면, 관리가 철저해야 한다는 것이다. 인증서 잃어버리는 순간 모든 디바이스가 접속불가 상태가 발생할 수 있다.</li>\n</ul>\n<h5 id=\"Policies\"><a href=\"#Policies\" class=\"headerlink\" title=\"Policies\"></a>Policies</h5><p><a href=\"https://user-images.githubusercontent.com/62123161/81146074-8c5bd280-8fb2-11ea-8f0c-f8c31f10cd69.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/81146074-8c5bd280-8fb2-11ea-8f0c-f8c31f10cd69.png\" alt=\"iotcore_06\"></a></p>\n<ul>\n<li>정책이다. 화면 하단의 Json처럼 접근에 대한 권한을 지정할 수 있다. 아직 IAM 권한에 대해 완벽하게 공부하지 않아서, 연습때문에 모든 권한을 풀어둔 상태다. 나중에는 수정해야한다.</li>\n<li>정책에서 연결된 인증서 관리도 가능하다. </li>\n<li>(인증서-정책)은 하나의 쌍이다. 둘 중 하나라도 없으면 서비스가 돌아가지 않는다.</li>\n</ul>\n<h4 id=\"Act\"><a href=\"#Act\" class=\"headerlink\" title=\"Act\"></a>Act</h4><h5 id=\"Rules\"><a href=\"#Rules\" class=\"headerlink\" title=\"Rules\"></a>Rules</h5><p><a href=\"https://user-images.githubusercontent.com/62123161/81146075-8cf46900-8fb2-11ea-89a0-1b77f260ecba.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/81146075-8cf46900-8fb2-11ea-89a0-1b77f260ecba.png\" alt=\"iotcore_07\"></a></p>\n<ul>\n<li>위에서 디바이스쪽의 꽃이 인증서였다면, 서버쪽의 꽃은 바로 이 Rule Engine이다.</li>\n<li>기본 Rule은 쿼리 시스템으로 움직인다. MQTT 기준 Topic주제를 통해서 들어오는 데이터는 모두 Rule Engine을 거친다고 보면된다.</li>\n<li>따라서, 디바이스에서 보내는 신호를 어떻게 처리할지 마음대로 정해줄 수 있다. (INPUT / OUTPUT 데이터 모두 컨트롤이 가능하다.)</li>\n</ul>\n<h4 id=\"Test\"><a href=\"#Test\" class=\"headerlink\" title=\"Test\"></a>Test</h4><p><a href=\"https://user-images.githubusercontent.com/62123161/81146077-8cf46900-8fb2-11ea-87f0-60331ea24adb.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/81146077-8cf46900-8fb2-11ea-87f0-60331ea24adb.png\" alt=\"iotcore_08\"></a></p>\n<ul>\n<li>직접 써보기 바란다. 더 이상의 설명은 생략함.</li>\n<li>힌트 : MQTT라고 써져있듯이 Topic을 통한 Pub/Sub 구조임. Topic을 Sub한 상태로 아래 Pub에 데이터를 싣어서 보내면 수신함.(뭔가 다 알려준거같은데…. 그래도모르면 질문….)</li>\n</ul>\n<h3 id=\"2-소스\"><a href=\"#2-소스\" class=\"headerlink\" title=\"2) 소스\"></a>2) 소스</h3><ul>\n<li>100줄도 안된다. (기타 자체 참조가 좀 들어가있지만, 그냥 보고 쓰기엔 나쁘지 않을 것이다.)</li>\n<li>그리고, 당연한 얘기지만 IoT Core는 Full Managing System이다. 따라서, Create Things만 있다.<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LambdaLogger logger = context.getLogger();</span><br><span class=\"line\">ResponseCreateThings responseCreateThings = new ResponseCreateThings();</span><br><span class=\"line\">try&#123;</span><br><span class=\"line\">    logger.log(<span class=\"string\">\"Start CreateThings\"</span>);</span><br><span class=\"line\">    SecretManagerHelper.getInstance();</span><br><span class=\"line\"> </span><br><span class=\"line\">    String queryString = String.format(<span class=\"string\">\"thingName:roomcon-%s\"</span>, request.macAddress);</span><br><span class=\"line\">    GetStatisticsRequest getStatisticsRequest = new GetStatisticsRequest().withQueryString(queryString);</span><br><span class=\"line\">    GetStatisticsResult result = AWSIoTHelper.getInstance().getAWSIot().getStatistics(getStatisticsRequest);</span><br><span class=\"line\"> </span><br><span class=\"line\">    Map&lt;String, String&gt; attributes = new HashMap&lt;String, String&gt;();</span><br><span class=\"line\">    attributes.put(<span class=\"string\">\"ADDITIONAL_VALUE\"</span>, request.additionalValue);</span><br><span class=\"line\">    attributes.put(<span class=\"string\">\"THINGS_TYPE\"</span>, request.thingsType);</span><br><span class=\"line\">    AttributePayload attributePayload = new AttributePayload().withAttributes(attributes);//.addAttributesEntry(<span class=\"string\">\"ADDITIONAL_VALUE\"</span>, request.additionalValue);</span><br><span class=\"line\"> </span><br><span class=\"line\">    String thingName = String.format(<span class=\"string\">\"roomcon-%s\"</span>, request.macAddress);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(result.getStatistics().getCount() == 0)&#123;</span><br><span class=\"line\">        String groupName = <span class=\"string\">\"etc\"</span>;</span><br><span class=\"line\">        String secureArn = Config.IOT_CORE_NODE.path(<span class=\"string\">\"IOT_CORE_SECURE_1ST_ARN\"</span>).asText();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(request.thingsType.equals(<span class=\"string\">\"001\"</span>))&#123;</span><br><span class=\"line\">            groupName = <span class=\"string\">\"nr-30d\"</span>;</span><br><span class=\"line\">            secureArn = Config.IOT_CORE_NODE.path(<span class=\"string\">\"IOT_CORE_SECURE_1ST_ARN\"</span>).asText();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(request.thingsType.equals(<span class=\"string\">\"002\"</span>))&#123;</span><br><span class=\"line\">            groupName = <span class=\"string\">\"nr-35d\"</span>;</span><br><span class=\"line\">            secureArn = Config.IOT_CORE_NODE.path(<span class=\"string\">\"IOT_CORE_SECURE_2ND_ARN\"</span>).asText();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(request.thingsType.equals(<span class=\"string\">\"003\"</span>))&#123;</span><br><span class=\"line\">            groupName = <span class=\"string\">\"nr-40d\"</span>;</span><br><span class=\"line\">            secureArn = Config.IOT_CORE_NODE.path(<span class=\"string\">\"IOT_CORE_SECURE_2ND_ARN\"</span>).asText();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(request.thingsType.equals(<span class=\"string\">\"011\"</span>))&#123;</span><br><span class=\"line\">            groupName = <span class=\"string\">\"nrm-35d\"</span>;</span><br><span class=\"line\">            secureArn = Config.IOT_CORE_NODE.path(<span class=\"string\">\"IOT_CORE_SECURE_2ND_ARN\"</span>).asText();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        CreateThingRequest createThingRequest = new CreateThingRequest()</span><br><span class=\"line\">                .withThingName(thingName)</span><br><span class=\"line\">                .withAttributePayload(attributePayload)</span><br><span class=\"line\">                .withThingTypeName(<span class=\"string\">\"RoomController\"</span>);</span><br><span class=\"line\">        CreateThingResult createThingResult = AWSIoTHelper.getInstance().getAWSIot().createThing(createThingRequest);</span><br><span class=\"line\"> </span><br><span class=\"line\">        AddThingToThingGroupRequest addThingToThingGroupRequest = new AddThingToThingGroupRequest()</span><br><span class=\"line\">                .withThingArn(Config.IOT_CORE_NODE.path(<span class=\"string\">\"IOT_CORE_THINGS_ARN\"</span>).asText() + thingName)</span><br><span class=\"line\">                .withThingGroupArn(Config.IOT_CORE_NODE.path(<span class=\"string\">\"IOT_CORE_GROUP_ARN\"</span>).asText() + groupName)</span><br><span class=\"line\">                .withThingGroupName(groupName)</span><br><span class=\"line\">                .withThingName(thingName);</span><br><span class=\"line\">        AddThingToThingGroupResult addThingToThingGroupResult = AWSIoTHelper.getInstance().getAWSIot().addThingToThingGroup(addThingToThingGroupRequest);</span><br><span class=\"line\"> </span><br><span class=\"line\">        AttachThingPrincipalRequest attachThingPrincipalRequest = new AttachThingPrincipalRequest()</span><br><span class=\"line\">                .withThingName(thingName)</span><br><span class=\"line\">                .withPrincipal(secureArn);</span><br><span class=\"line\">        AttachThingPrincipalResult attachThingPrincipalResult = AWSIoTHelper.getInstance().getAWSIot().attachThingPrincipal(attachThingPrincipalRequest);</span><br><span class=\"line\"> </span><br><span class=\"line\">        responseCreateThings.isSuccess = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        responseCreateThings.successCode = 201;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        UpdateThingRequest updateThingRequest = new UpdateThingRequest()</span><br><span class=\"line\">                .withThingName(thingName)</span><br><span class=\"line\">                .withAttributePayload(attributePayload);</span><br><span class=\"line\">        UpdateThingResult updateThingResult = AWSIoTHelper.getInstance().getAWSIot().updateThing(updateThingRequest);</span><br><span class=\"line\"> </span><br><span class=\"line\">        responseCreateThings.isSuccess = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        responseCreateThings.successCode = 200;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; catch(Throwable e) &#123;</span><br><span class=\"line\">    logger.log(<span class=\"string\">\"Error CreateThings\"</span>);</span><br><span class=\"line\">    responseCreateThings.isSuccess = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    responseCreateThings.successCode = 500;</span><br><span class=\"line\">&#125; finally &#123;</span><br><span class=\"line\">    logger.log(<span class=\"string\">\"End CreateThings\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">return</span> responseCreateThings;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n</li>\n</ul>\n","text":"개발환경 구축※ 기본 개발환경IntelliJJava, SpringAWS ConsoleIoT Core 설명AWS IoT Core는 커넥티드 디바이스가 쉽고 안전하게 클라우드 애플리케이션 및 다른 디바이스와 상호 작용할 수 있게 해주는 관리형 클라우드 서","link":"","raw":null,"photos":[],"categories":[{"name":"aws","slug":"aws","count":16,"path":"api/categories/aws.json"}],"tags":[{"name":"AWS","slug":"AWS","count":18,"path":"api/tags/AWS.json"},{"name":"iot","slug":"iot","count":1,"path":"api/tags/iot.json"},{"name":"IoT Core","slug":"IoT-Core","count":1,"path":"api/tags/IoT-Core.json"}]},{"title":"Kinesis Data Firehose","slug":"kinesisDataFirehose","date":"2020-05-01T01:21:23.000Z","updated":"2020-11-23T01:31:25.294Z","comments":true,"pin":null,"path":"api/articles/kinesisDataFirehose.json","excerpt":"","keywords":null,"cover":"https://user-images.githubusercontent.com/62123161/80773866-2b896000-8b96-11ea-9292-4988675db895.png","content":"<h2 id=\"개발환경-구축\"><a href=\"#개발환경-구축\" class=\"headerlink\" title=\"개발환경 구축\"></a>개발환경 구축</h2><p>※ 기본 개발환경</p>\n<ul>\n<li>IntelliJ</li>\n<li>Java, Spring</li>\n<li>AWS Console</li>\n</ul>\n<h2 id=\"Data-Firehose와-Data-Stream과-다른점\"><a href=\"#Data-Firehose와-Data-Stream과-다른점\" class=\"headerlink\" title=\"Data Firehose와 Data Stream과 다른점\"></a>Data Firehose와 Data Stream과 다른점</h2><ol>\n<li>Kinesis Stream은 기본 수준 서비스로, 각 파티션이 내부적으로 주문 된 여러 리더를 지원하는 파티션 된 데이터 스트림. 병합 / 분할 샤드를 관리하여 운영해야 함.</li>\n<li>커스터마이징이 가능하며 맞춤형 애플리케이션을 구축하거나 특수한 요구에 맞게 데이터를 스트리밍하는 개발자에게 가장 적합합니다. 그러나 수동 조정 및 프로비저닝이 필요합니다. 데이터는 일반적으로 24 시간 동안 스트림으로 제공되지만 추가 비용을 지불하면 최대 7 일 동안 데이터 가용성을 얻을 수 있습니다.</li>\n<li>Firehose는 매우 많은 Kinesis 사용 사례를 위해 구축 된 Kinesis 스트림 위에 구축 된 서비스로, 많은 데이터를 수집하고 이를 S3 / Redshift / ElasticSearch와 같은 스토리지 솔루션으로 파이핑 함. 파티션을 관리.</li>\n<li>스케일링은 초당 최대 기가 바이트까지 자동으로 처리되며 배치, 암호화 및 압축이 가능합니다.<br><a href=\"https://user-images.githubusercontent.com/62123161/80773866-2b896000-8b96-11ea-9292-4988675db895.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/80773866-2b896000-8b96-11ea-9292-4988675db895.png\" alt=\"kinesisfirehose_01\"></a></li>\n</ol>\n<h3 id=\"1-Firehose-생성\"><a href=\"#1-Firehose-생성\" class=\"headerlink\" title=\"1) Firehose 생성\"></a>1) Firehose 생성</h3><p><a href=\"https://user-images.githubusercontent.com/62123161/80773864-2b896000-8b96-11ea-863b-97cf308afdc9.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/80773864-2b896000-8b96-11ea-863b-97cf308afdc9.png\" alt=\"kinesisfirehose_02\"></a><br>① Firehose Name 입력<br>② 자동으로 Put되는 방식인지, DataStream에서 받아서 전달하는 방식인지 선택.<br>    현재 우리 서비스에서는 Direct Put 해도 상관없음. Data를 특정 Stream에서 컨트롤해야한다면 Stream을 선택해주면 됨.<br>③ CMK를 활용하여 Stream의 평문데이터를 Firehose로 가져오면서 암호화 진행여부<br><a href=\"https://user-images.githubusercontent.com/62123161/80773863-2af0c980-8b96-11ea-9b59-4bcd47295594.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/80773863-2af0c980-8b96-11ea-9b59-4bcd47295594.png\" alt=\"kinesisfirehose_03\"></a><br>④ Lambda를 통해 저장할 데이터를 손볼건지 결정하는 부분.<br>⑤ AWS Glue를 통해 전처리 작업을 진행할지 선택하는 부분.</p>\n<p> *Glue 란?<br>AWS Glue는 완전 관리형 ETL(추출, 변환, 로드) 서비스로, 효율적인 비용으로 간단하게 여러 데이터 스토어 간에 원하는 데이터를 분류, 정리, 보강, 이동합니다. AWS Glue는 AWS Glue 데이터 카탈로그으로 알려진 중앙 메타데이터 리포지토리, 자동적으로 Python 및 Scala 코드를 생성하는 ETL 엔진 및 종속적 해결 방안, 작업 모니터링 및 재시도를 관리하는 유연성 스케줄러로 구성됩니다. AWS Glue는 서버리스이므로 설정하거나 관리할 인프라가 없습니다.<br><a href=\"https://user-images.githubusercontent.com/62123161/80773862-2a583300-8b96-11ea-8f42-d5299b504504.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/80773862-2a583300-8b96-11ea-8f42-d5299b504504.png\" alt=\"kinesisfirehose_04\"></a><br>⑥ S3 / Redshift / Elasticsearch Service / Splunk 등 AWS의 목적지로 보낼 곳 선택<br>     (우리 서비스에서는 우선 S3를 사용함. 추후 ES, Splunk 등 검토)<br>⑦ prefix / error prefix (저장되는 파일의 S3 디렉토리 지정)<br>     kd/year-!{timestamp:YYYY}/month-!{timestamp:MM}/day-!{timestamp:dd}/<br>     kderror/!{firehose:random-string}/!{firehose:error-output-type}/!{timestamp:yyyy/MM/dd}/<br><a href=\"https://user-images.githubusercontent.com/62123161/80773857-288e6f80-8b96-11ea-87e2-9efc8190f38c.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/80773857-288e6f80-8b96-11ea-87e2-9efc8190f38c.png\" alt=\"kinesisfirehose_05\"></a><br>⑧ Buffer사이즈와 주기를 정해주어야 함.<br>    SmartTok 기준 40000대 15분동안 45MB가 쌓이고 있음. 용량이 부족하면 꽉 찬 데이터까지만 보내므로 조절이 필요함.(매우중요)<br>⑨ Compression(압축방식지정.. 비용문제만 아니면 안해도됨)<br>⑩ S3 Encryption<br>    KMS를 통한 암호화. 3번의 CMK를 통한 암호화를 지정해도되고 저장할때 KMS를 통해 지정해도 됨. 암호화는 나중에 반영.<br>⑪ Logging<br>    로깅은 항상 Enable함.<br>    본인이 코딩의 신이거나 AWS의 지배자가 아니라면 로깅 및 디버깅은 생활화 하자.<br>⑫ Permission(권한)<br>    권한은 기본권한으로..(AWS 사상 중 가장 중요시되는 최소권한의 원칙)</p>\n<h3 id=\"2-Data-직접-넣기\"><a href=\"#2-Data-직접-넣기\" class=\"headerlink\" title=\"2) Data 직접 넣기?\"></a>2) Data 직접 넣기?</h3><ul>\n<li><p>코딩이 없어서 아쉬우셨다면, 잠시 코딩을 갖는 시간을 갖겠음.</p>\n</li>\n<li><p>솔직히 Firehose는 AWS 완전관리형이기에 크게 손볼게 없다.</p>\n</li>\n<li><p>단순히 데이터 넣는 API정도뿐이라 간단히 소개함.</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><figcaption><span>basic AWS Credential</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BasicAWSCredentials awsCreds = new BasicAWSCredentials(<span class=\"string\">\"ACCESS_KEY\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"SECRET_KEY\"</span>);</span><br><span class=\"line\">    AmazonKinesisFirehoseClientBuilder clientBuilder = AmazonKinesisFirehoseClientBuilder.standard();</span><br><span class=\"line\">    clientBuilder.setRegion(<span class=\"string\">\"ap-northeast-2\"</span>); // 서울 region</span><br><span class=\"line\">    clientBuilder.setCredentials(new AWSStaticCredentialsProvider(awsCreds));</span><br><span class=\"line\">    AmazonKinesisFirehose kinesisClient = clientBuilder.build();</span><br></pre></td></tr></table></figure></div>\n\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><figcaption><span>single write</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//단일 쓰기 작업</span><br><span class=\"line\">static void sendData(AmazonKinesisFirehose kinesisClient, int count) &#123;</span><br><span class=\"line\">    String myData = <span class=\"string\">\"&#123;\\\"no\\\":\"</span> + count + <span class=\"string\">\"&#125;\\n\"</span>; // 보내려는 데이터</span><br><span class=\"line\">    PutRecordRequest putRecordsRequest = new PutRecordRequest();</span><br><span class=\"line\">    putRecordsRequest.setDeliveryStreamName(STREAM_NAME);</span><br><span class=\"line\">    Record rc = new Record();</span><br><span class=\"line\">    rc.setData(ByteBuffer.wrap(myData.getBytes()));</span><br><span class=\"line\">    putRecordsRequest.setRecord(rc);</span><br><span class=\"line\">    PutRecordResult putRecordsResult = kinesisClient.putRecord(putRecordsRequest);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Put Result\"</span> + putRecordsResult);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><figcaption><span>multiple write</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//////////////////////////////////////////</span><br><span class=\"line\"> // 10번 반복해서 전송(일괄전송)</span><br><span class=\"line\">        HashSet&lt;Record&gt; recordList = new HashSet&lt;Record&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int i = 0; i &lt; 10 ; i++) &#123;</span><br><span class=\"line\">            recordList.add(createData());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        multiSendData(kinesisClient, recordList);</span><br><span class=\"line\">//////////////////////////////////////////</span><br><span class=\"line\"> </span><br><span class=\"line\">    //일괄 쓰기 작업</span><br><span class=\"line\">    static void multiSendData(AmazonKinesisFirehose kinesisClient, HashSet&lt;Record&gt; recordList)&#123;</span><br><span class=\"line\">        PutRecordBatchRequest putRecordBatchRequest = new PutRecordBatchRequest();</span><br><span class=\"line\">        putRecordBatchRequest.setDeliveryStreamName(STREAM_NAME);</span><br><span class=\"line\">        putRecordBatchRequest.setRecords(recordList);</span><br><span class=\"line\"> </span><br><span class=\"line\">        // Put Record Batch records. Max No.Of Records we can put <span class=\"keyword\">in</span> a</span><br><span class=\"line\">        // single put record batch request is 500</span><br><span class=\"line\">        PutRecordBatchResult putRecordBatchResult = kinesisClient.putRecordBatch(putRecordBatchRequest);</span><br><span class=\"line\"> </span><br><span class=\"line\">        recordList.clear();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public static Record <span class=\"function\"><span class=\"title\">createData</span></span>() &#123;</span><br><span class=\"line\">        String data = ThreadLocalRandom.current().nextInt() + <span class=\"string\">\"\\n\"</span>;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> new Record().withData(ByteBuffer.wrap(data.getBytes()));</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"3-현재-사용처\"><a href=\"#3-현재-사용처\" class=\"headerlink\" title=\"3) 현재 사용처\"></a>3) 현재 사용처</h3><ul>\n<li>AWS IoT Core 내의 Rule Engine에 현재 사용중임. DynamoDB를 대체해서 사용하고자 하며, 추후 Analytics를 통하거나 해서 MySQL에 저장할 예정.</li>\n</ul>\n</li>\n<li><p>저장기간이 최대 7일이 한계이므로, 주기적으로 Batch작업 돌려주어야 할 것으로 보임.</p>\n<h3 id=\"결론\"><a href=\"#결론\" class=\"headerlink\" title=\"결론\"></a>결론</h3></li>\n<li><p>솔직히 Data Stream의 활용범위는 상당히 넓다. 기본적인 SQS기능뿐만 아니라 AWS 다른 솔루션 플랫폼에 적용할 수 있을정도로 활용범위가 넓은 점은 장점이지만, 모든 설정을 해줘야 한다는 단점이 있다.</p>\n</li>\n<li><p>Firehose는 몇개 안되는 설정으로 자동으로 원하는 기능을 제공해주니 단순비교는 어렵지만 개인적으로 쓰기 편한감이 있음.</p>\n</li>\n<li><p>(코딩이 필요없다…….. 위 대제목 2번에 쓴 코드를 쓸 일 자체가 없을 것으로 보임.)</p>\n</li>\n</ul>\n","text":"개발환경 구축※ 기본 개발환경IntelliJJava, SpringAWS ConsoleData Firehose와 Data Stream과 다른점Kinesis Stream은 기본 수준 서비스로, 각 파티션이 내부적으로 주문 된 여러 리더를 지원하는 파티션 ","link":"","raw":null,"photos":[],"categories":[{"name":"aws","slug":"aws","count":16,"path":"api/categories/aws.json"}],"tags":[{"name":"AWS","slug":"AWS","count":18,"path":"api/tags/AWS.json"},{"name":"Kinesis","slug":"Kinesis","count":4,"path":"api/tags/Kinesis.json"},{"name":"firehose","slug":"firehose","count":1,"path":"api/tags/firehose.json"}]},{"title":"Kinesis Data Stream","slug":"kinesisDataStream","date":"2020-04-30T09:00:58.000Z","updated":"2020-11-23T01:31:25.299Z","comments":true,"pin":null,"path":"api/articles/kinesisDataStream.json","excerpt":"","keywords":null,"cover":"/img/01.SmartTok_System_01.png","content":"<h2 id=\"개발환경-구축\"><a href=\"#개발환경-구축\" class=\"headerlink\" title=\"개발환경 구축\"></a>개발환경 구축</h2><p>※ 기본 개발환경</p>\n<ul>\n<li>IntelliJ</li>\n<li>Java, Spring</li>\n<li>AWS Console</li>\n</ul>\n<p>※ 참고자료 : <a href=\"https://docs.aws.amazon.com/ko_kr/kinesis/index.html\" target=\"_blank\" rel=\"noopener\">https://docs.aws.amazon.com/ko_kr/kinesis/index.html</a></p>\n<h2 id=\"Kinesis-기초설명\"><a href=\"#Kinesis-기초설명\" class=\"headerlink\" title=\"Kinesis 기초설명\"></a>Kinesis 기초설명</h2><ol>\n<li>Kinesis는 SQS를 기반으로 한 큐 시스템이다.</li>\n<li>종류로는 Video Streams, Data Streams, Data Firehose, Data Analytics 총 4가지가 있다.</li>\n<li>경동에서는 이 4가지 시스템 모두 사용하겠지만, Video Streams의 경우에는 홈오토, 홈넷쪽에서 사용할 것으로 추정되므로 현 블로그에서는 나머지 기능만을 설명하기로 한다.</li>\n</ol>\n<h2 id=\"Data-Stream\"><a href=\"#Data-Stream\" class=\"headerlink\" title=\"Data Stream\"></a>Data Stream</h2><ol>\n<li>Shard라는 개념을 사용하고 있으며, 큐 내의 메모리 개념으로 받아들이면 된다.</li>\n<li>ap-northeast-2(서울) 리전의 경우 기본적으로 200개의 샤드만 지원이 된다.</li>\n</ol>\n<p><a href=\"https://user-images.githubusercontent.com/62123161/80692614-c5a4c600-8b0c-11ea-98ba-1efbe0264585.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/80692614-c5a4c600-8b0c-11ea-98ba-1efbe0264585.png\" alt=\"kinesis_01\"></a></p>\n<ol start=\"3\">\n<li>한개의 Shard당 1초에 1MB씩 처리가 가능하며, 1000개의 Record를 처리한다. 읽는데는 초당 2MB한도로 읽을 수 있다. 만약, 처리할 데이터의 용량이 크다면, 그만큼의 샤드를 추가하면 된다. 이번 연습에서는 기본샤드인 1만 추가하기로 한다.</li>\n<li>편의를 위해 언어는 Java로 통일한다.</li>\n</ol>\n<h3 id=\"1-Data-Stream-만들기\"><a href=\"#1-Data-Stream-만들기\" class=\"headerlink\" title=\"1) Data Stream 만들기\"></a>1) Data Stream 만들기</h3><ol>\n<li>사용하고자 하는 Stream의 이름과 샤드의 수만 입력하면 자동으로 생성이 된다.(feat. 별거없음)</li>\n</ol>\n<h3 id=\"2-Data-Stream-Page\"><a href=\"#2-Data-Stream-Page\" class=\"headerlink\" title=\"2) Data Stream Page\"></a>2) Data Stream Page</h3><ol>\n<li>데이터 Stream이 생성이 되었다고 하면 아래와 같이 Detail 페이지를 볼 수 있다.</li>\n</ol>\n<p><a href=\"https://user-images.githubusercontent.com/62123161/80692615-c6d5f300-8b0c-11ea-8dab-ab4473eea2a2.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-images.githubusercontent.com/62123161/80692615-c6d5f300-8b0c-11ea-8dab-ab4473eea2a2.png\" alt=\"kinesis_02\"></a></p>\n<ol start=\"2\">\n<li><p>Data Stream은 Firehose와 Analytics에 사용될 수 있으며, 데이터는 모두 Json으로 하는게 좋다. 물론, CVS파일도 지원을 하기는 한다.(사용할 때 어려울뿐…)</p>\n</li>\n<li><p>데이터 저장방식에서 암호화를 추가할 수 있다. KMS를 설정해서 사용하는데, 현 연습에서는 사용하지 않도록 한다.</p>\n</li>\n<li><p>Data Stream의 보관 기간은 1일~7일까지 선택할 수 있다. 24시간에서 더 늘리게 되면 추가요금이 발생하므로 주의하자.</p>\n</li>\n</ol>\n<h3 id=\"3-Data-Stream을-Java로-개발\"><a href=\"#3-Data-Stream을-Java로-개발\" class=\"headerlink\" title=\"3) Data Stream을 Java로 개발\"></a>3) Data Stream을 Java로 개발</h3><ol>\n<li><p>Gradle(최소 수준의 Dependence 이므로 개발하면서 필요하면 추가해준다.)</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// https://mvnrepository.com/artifact/com.amazonaws/aws-java-sdk-sqs</span><br><span class=\"line\">compile group: <span class=\"string\">'com.amazonaws'</span>, name: <span class=\"string\">'aws-java-sdk-sqs'</span>, version: <span class=\"string\">'1.11.705'</span></span><br><span class=\"line\">// https://mvnrepository.com/artifact/com.amazonaws/aws-java-sdk-core</span><br><span class=\"line\">compile group: <span class=\"string\">'com.amazonaws'</span>, name: <span class=\"string\">'aws-java-sdk-core'</span>, version: <span class=\"string\">'1.9.17'</span></span><br><span class=\"line\">// https://mvnrepository.com/artifact/com.amazonaws/amazon-kinesis-client</span><br><span class=\"line\">compile group: <span class=\"string\">'com.amazonaws'</span>, name: <span class=\"string\">'amazon-kinesis-client'</span>, version: <span class=\"string\">'1.13.2'</span></span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p>스트림에 Data PUT(Multi)</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private static List&lt;PutRecordsRequestEntry&gt; <span class=\"function\"><span class=\"title\">putItemStream</span></span>()&#123;</span><br><span class=\"line\">        BasicAWSCredentials awsCreds = new BasicAWSCredentials(<span class=\"string\">\"ACCESSKEY\"</span>, <span class=\"string\">\"SECRETKEY\"</span>);</span><br><span class=\"line\">        AmazonKinesisClientBuilder clientBuilder = AmazonKinesisClientBuilder.standard();</span><br><span class=\"line\">        clientBuilder.setRegion(<span class=\"string\">\"ap-northeast-2\"</span>); // 서울 region</span><br><span class=\"line\">        clientBuilder.setCredentials(new AWSStaticCredentialsProvider(awsCreds));</span><br><span class=\"line\">        AmazonKinesis kinesisClient = clientBuilder.build();</span><br><span class=\"line\"> </span><br><span class=\"line\">        //PutRecords</span><br><span class=\"line\">        PutRecordsRequest putRecordsRequest  = new PutRecordsRequest();</span><br><span class=\"line\">        putRecordsRequest.setStreamName(STREAM_NAME);</span><br><span class=\"line\">        List &lt;PutRecordsRequestEntry&gt; putRecordsRequestEntryList  = new ArrayList&lt;&gt;();</span><br><span class=\"line\">        try&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (int i = 0; i &lt; 10; i++) &#123;</span><br><span class=\"line\">                PutRecordsRequestEntry putRecordsRequestEntry  = new PutRecordsRequestEntry();</span><br><span class=\"line\">                String myData = <span class=\"string\">\"&#123;\\\"testAWS\\\":\"</span> + i + <span class=\"string\">\"&#125;\\n\"</span>; // 보내려는 데이터</span><br><span class=\"line\">                putRecordsRequestEntry.setData(ByteBuffer.wrap(myData.getBytes()));</span><br><span class=\"line\">//            putRecordsRequestEntry.setData(ByteBuffer.wrap(String.valueOf(i).getBytes()));</span><br><span class=\"line\">                putRecordsRequestEntry.setPartitionKey(String.format(<span class=\"string\">\"partitionKey-%d\"</span>, i));</span><br><span class=\"line\">                putRecordsRequestEntryList.add(putRecordsRequestEntry);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">            putRecordsRequest.setRecords(putRecordsRequestEntryList);</span><br><span class=\"line\">            PutRecordsResult putRecordsResult  = kinesisClient.putRecords(putRecordsRequest);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        catch (Exception e)&#123;</span><br><span class=\"line\">            System.out.println(e.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"built_in\">return</span> putRecordsRequestEntryList;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p>스트림에 Data PUT(Single)</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static void sendData(AmazonKinesis kinesisClient, int count) &#123;</span><br><span class=\"line\">        HashMap&lt;Integer,String&gt; list = new HashMap&lt;Integer,String&gt;();</span><br><span class=\"line\"> </span><br><span class=\"line\">        list.put(0,<span class=\"string\">\"&#123;\\\"NAME\\\":\\\"dhaval0\\\",\\\"TOTAL\\\":100&#125;\"</span>);</span><br><span class=\"line\">        list.put(1,<span class=\"string\">\"&#123;\\\"NAME\\\":\\\"dhaval1\\\",\\\"TOTAL\\\":200&#125;\"</span>);</span><br><span class=\"line\">        list.put(2,<span class=\"string\">\"&#123;\\\"NAME\\\":\\\"dhaval2\\\",\\\"TOTAL\\\":300&#125;\"</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">        PutRecordsRequest putRecordsRequest  = new PutRecordsRequest();</span><br><span class=\"line\">        putRecordsRequest.setStreamName(STREAM_NAME);</span><br><span class=\"line\">        List&lt;PutRecordsRequestEntry&gt; putRecordsRequestEntryList  = new ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int i = 0; i &lt; count; i++) &#123;</span><br><span class=\"line\">            String myData = list.get(i); // 보내려는 데이터</span><br><span class=\"line\">            PutRecordsRequestEntry putRecordsRequestEntry  = new PutRecordsRequestEntry();</span><br><span class=\"line\">            putRecordsRequestEntry.setData(ByteBuffer.wrap(myData.getBytes()));</span><br><span class=\"line\">            putRecordsRequestEntry.setPartitionKey(<span class=\"string\">\"MainStream\"</span>);</span><br><span class=\"line\">//            putRecordsRequestEntry.setPartitionKey(String.format(<span class=\"string\">\"partitionKey-%d\"</span>, i));</span><br><span class=\"line\">            putRecordsRequestEntryList.add(putRecordsRequestEntry);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        putRecordsRequest.setRecords(putRecordsRequestEntryList);</span><br><span class=\"line\">        PutRecordsResult putRecordsResult  = kinesisClient.putRecords(putRecordsRequest);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Put Result\"</span> + putRecordsResult);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></div></li>\n<li><p>샤드 내 총 데이터 갯수조회</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static int getDataCount(String shardId, String streamName) &#123;</span><br><span class=\"line\">        int dataCount = 0;</span><br><span class=\"line\"> </span><br><span class=\"line\">        BasicAWSCredentials awsCreds = new BasicAWSCredentials(<span class=\"string\">\"ACCESSKEY\"</span>, <span class=\"string\">\"SECRETKEY\"</span>);</span><br><span class=\"line\">        AmazonKinesisClientBuilder clientBuilder = AmazonKinesisClientBuilder.standard();</span><br><span class=\"line\">        clientBuilder.setRegion(<span class=\"string\">\"ap-northeast-2\"</span>); // 서울 region</span><br><span class=\"line\">        clientBuilder.setCredentials(new AWSStaticCredentialsProvider(awsCreds));</span><br><span class=\"line\">        AmazonKinesis kinesisClient = clientBuilder.build();</span><br><span class=\"line\"> </span><br><span class=\"line\">        String shardIterator;</span><br><span class=\"line\">        GetShardIteratorRequest getShardIteratorRequest = new GetShardIteratorRequest();</span><br><span class=\"line\">        getShardIteratorRequest.setStreamName(streamName);</span><br><span class=\"line\">        getShardIteratorRequest.setShardId(shardId);</span><br><span class=\"line\">        getShardIteratorRequest.setShardIteratorType(ShardIteratorType.TRIM_HORIZON);</span><br><span class=\"line\"> </span><br><span class=\"line\">        GetShardIteratorResult getShardIteratorResult = kinesisClient.getShardIterator(getShardIteratorRequest);</span><br><span class=\"line\">        shardIterator = getShardIteratorResult.getShardIterator();</span><br><span class=\"line\">        GetRecordsRequest getRecordsRequest = new GetRecordsRequest();</span><br><span class=\"line\">        getRecordsRequest.setShardIterator(shardIterator);</span><br><span class=\"line\">        getRecordsRequest.setLimit(1000);</span><br><span class=\"line\"> </span><br><span class=\"line\">        GetRecordsResult getRecordsResult = kinesisClient.getRecords(getRecordsRequest);</span><br><span class=\"line\">        List&lt;Record&gt; records = getRecordsResult.getRecords();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!records.isEmpty() &amp;&amp; records.size() &gt; 0)&#123;</span><br><span class=\"line\">            dataCount = records.size();</span><br><span class=\"line\">            Iterator&lt;Record&gt; iterator = records.iterator();</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(iterator.hasNext()) &#123;</span><br><span class=\"line\">                Record record = iterator.next();</span><br><span class=\"line\">                byte[] bytes = record.getData().array();</span><br><span class=\"line\">                String recordData = new String(bytes);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"Shard Id. :\"</span>+shardId+<span class=\"string\">\"Seq. No. is : \"</span>+<span class=\"string\">\"  Record data :\"</span>+recordData);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"built_in\">return</span> dataCount;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></div></li>\n<li><p>샤드 내 데이터 조회</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private static HashSet&lt;Record&gt; <span class=\"function\"><span class=\"title\">getItemStream</span></span>()&#123;</span><br><span class=\"line\">        BasicAWSCredentials awsCreds = new BasicAWSCredentials(<span class=\"string\">\"ACCESSKEY\"</span>, <span class=\"string\">\"SECRETKEY\"</span>);</span><br><span class=\"line\">        AmazonKinesisClientBuilder clientBuilder = AmazonKinesisClientBuilder.standard();</span><br><span class=\"line\">        clientBuilder.setRegion(<span class=\"string\">\"ap-northeast-2\"</span>); // 서울 region</span><br><span class=\"line\">        clientBuilder.setCredentials(new AWSStaticCredentialsProvider(awsCreds));</span><br><span class=\"line\">        AmazonKinesis kinesisClient = clientBuilder.build();</span><br><span class=\"line\"> </span><br><span class=\"line\">        List&lt;Shard&gt; shardList = getShardList();</span><br><span class=\"line\"> </span><br><span class=\"line\">        //GetRecords</span><br><span class=\"line\">        String shardIterator;</span><br><span class=\"line\">        GetShardIteratorRequest getShardIteratorRequest = new GetShardIteratorRequest();</span><br><span class=\"line\">        getShardIteratorRequest.setStreamName(STREAM_NAME);</span><br><span class=\"line\">        getShardIteratorRequest.setShardId(shardList.get(0).getShardId());</span><br><span class=\"line\">        getShardIteratorRequest.setShardIteratorType(<span class=\"string\">\"TRIM_HORIZON\"</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">        GetShardIteratorResult getShardIteratorResult = kinesisClient.getShardIterator(getShardIteratorRequest);</span><br><span class=\"line\">        shardIterator = getShardIteratorResult.getShardIterator();</span><br><span class=\"line\"> </span><br><span class=\"line\">        HashSet&lt;Record&gt; records = new HashSet&lt;Record&gt;();</span><br><span class=\"line\">        HashMap&lt;String, String&gt; view = new HashMap&lt;String, String&gt;();</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">            GetRecordsRequest getRecordsRequest = new GetRecordsRequest();</span><br><span class=\"line\">            getRecordsRequest.setShardIterator(shardIterator);</span><br><span class=\"line\">            getRecordsRequest.setLimit(25);</span><br><span class=\"line\"> </span><br><span class=\"line\">            GetRecordsResult result = kinesisClient.getRecords(getRecordsRequest);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(result.getRecords().size() == 0)&#123;</span><br><span class=\"line\">                <span class=\"built_in\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            //<span class=\"keyword\">for</span>(Record record : result.getRecords())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(int i = 0;i&lt;result.getRecords().size();i++)&#123;</span><br><span class=\"line\">                Record record = result.getRecords().get(i);</span><br><span class=\"line\">                records.add(record);</span><br><span class=\"line\"> </span><br><span class=\"line\">                view.put(record.getSequenceNumber(), new String(record.getData().array()));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                Thread.sleep(1000);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            catch (InterruptedException exception) &#123;</span><br><span class=\"line\">                throw new RuntimeException(exception);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">            shardIterator = result.getNextShardIterator();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> records;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></div></li>\n<li><p>(번외) Stream 내 Shard 리스트 출력</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private static List&lt;Shard&gt; <span class=\"function\"><span class=\"title\">getShardList</span></span>()&#123;</span><br><span class=\"line\">        BasicAWSCredentials awsCreds = new BasicAWSCredentials(<span class=\"string\">\"ACCESSKEY\"</span>, <span class=\"string\">\"SECRETKEY\"</span>);</span><br><span class=\"line\">        AmazonKinesisClientBuilder clientBuilder = AmazonKinesisClientBuilder.standard();</span><br><span class=\"line\">        clientBuilder.setRegion(<span class=\"string\">\"ap-northeast-2\"</span>); // 서울 region</span><br><span class=\"line\">        clientBuilder.setCredentials(new AWSStaticCredentialsProvider(awsCreds));</span><br><span class=\"line\">        AmazonKinesis kinesisClient = clientBuilder.build();</span><br><span class=\"line\"> </span><br><span class=\"line\">        DescribeStreamRequest describeStreamRequest = new DescribeStreamRequest();</span><br><span class=\"line\">        describeStreamRequest.setStreamName( STREAM_NAME );</span><br><span class=\"line\">        List&lt;Shard&gt; shards = new ArrayList&lt;&gt;();</span><br><span class=\"line\">        String exclusiveStartShardId = null;</span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            describeStreamRequest.setExclusiveStartShardId( exclusiveStartShardId );</span><br><span class=\"line\">            DescribeStreamResult describeStreamResult = kinesisClient.describeStream( describeStreamRequest );</span><br><span class=\"line\">            shards.addAll( describeStreamResult.getStreamDescription().getShards() );</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (describeStreamResult.getStreamDescription().getHasMoreShards() &amp;&amp; shards.size() &gt; 0) &#123;</span><br><span class=\"line\">                exclusiveStartShardId = shards.get(shards.size() - 1).getShardId();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                exclusiveStartShardId = null;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> ( exclusiveStartShardId != null );</span><br><span class=\"line\">        <span class=\"built_in\">return</span> shards;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></div></li>\n<li><p>(번외) 계정 내 Stream 리스트 조회(전체)</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private static List&lt;String&gt; <span class=\"function\"><span class=\"title\">getStreamList</span></span>()&#123;</span><br><span class=\"line\">        BasicAWSCredentials awsCreds = new BasicAWSCredentials(<span class=\"string\">\"ACCESSKEY\"</span>, <span class=\"string\">\"SECRETKEY\"</span>);</span><br><span class=\"line\">        AmazonKinesisClientBuilder clientBuilder = AmazonKinesisClientBuilder.standard();</span><br><span class=\"line\">        clientBuilder.setRegion(<span class=\"string\">\"ap-northeast-2\"</span>); // 서울 region</span><br><span class=\"line\">        clientBuilder.setCredentials(new AWSStaticCredentialsProvider(awsCreds));</span><br><span class=\"line\">        AmazonKinesis kinesisClient = clientBuilder.build();</span><br><span class=\"line\"> </span><br><span class=\"line\">        ListStreamsRequest listStreamsRequest = new ListStreamsRequest();</span><br><span class=\"line\">        listStreamsRequest.setLimit(20);</span><br><span class=\"line\">        ListStreamsResult listStreamsResult = kinesisClient.listStreams(listStreamsRequest);</span><br><span class=\"line\">        List&lt;String&gt; streamNames = listStreamsResult.getStreamNames();</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">while</span> (listStreamsResult.getHasMoreStreams())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (streamNames.size() &gt; 0) &#123;</span><br><span class=\"line\">                listStreamsRequest.setExclusiveStartStreamName(streamNames.get(streamNames.size() - 1));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            listStreamsResult = kinesisClient.listStreams(listStreamsRequest);</span><br><span class=\"line\">            streamNames.addAll(listStreamsResult.getStreamNames());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"built_in\">return</span> streamNames;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></div></li>\n<li><p>(번외) Stream 삭제</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private static Boolean deleteStream(String streamName)&#123;</span><br><span class=\"line\">        BasicAWSCredentials awsCreds = new BasicAWSCredentials(<span class=\"string\">\"ACCESSKEY\"</span>, <span class=\"string\">\"SECRETKEY\"</span>);</span><br><span class=\"line\">        AmazonKinesisClientBuilder clientBuilder = AmazonKinesisClientBuilder.standard();</span><br><span class=\"line\">        clientBuilder.setRegion(<span class=\"string\">\"ap-northeast-2\"</span>); // 서울 region</span><br><span class=\"line\">        clientBuilder.setCredentials(new AWSStaticCredentialsProvider(awsCreds));</span><br><span class=\"line\">        AmazonKinesis kinesisClient = clientBuilder.build();</span><br><span class=\"line\"> </span><br><span class=\"line\">        Boolean result = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        try&#123;</span><br><span class=\"line\">            DeleteStreamRequest deleteStreamRequest = new DeleteStreamRequest();</span><br><span class=\"line\">            deleteStreamRequest.setStreamName(streamName);</span><br><span class=\"line\">            kinesisClient.deleteStream(deleteStreamRequest);</span><br><span class=\"line\"> </span><br><span class=\"line\">            result = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        catch (Exception e)&#123;</span><br><span class=\"line\">            System.out.println(e.getMessage());</span><br><span class=\"line\">            result = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></div>\n\n</li>\n</ol>\n<h2 id=\"결론\"><a href=\"#결론\" class=\"headerlink\" title=\"결론\"></a>결론</h2><ul>\n<li>Kinesis는 기존의 SQS와 동일하게 사용해도 좋을 것 같다. 단지 SQS와 다른점은 가격이 싸고 속도가 빠르다는 점.<br>   싸고 빠르다는점 이외에도 Firehose, Analytics 등과 함께 사용하므로 더욱더 편리하게 AWS 생태계에 접근할 수 있다는 메리트가 있다.</li>\n<li>위 실습내용을 모두 돌려보고 나면, 크게 할 것이 없다는 점을 느낄 수 있을 것이다.</li>\n</ul>\n","text":"개발환경 구축※ 기본 개발환경IntelliJJava, SpringAWS Console※ 참고자료 : https://docs.aws.amazon.com/ko_kr/kinesis/index.htmlKinesis 기초설명Kinesis는 SQS를 기반으로 한","link":"","raw":null,"photos":[],"categories":[{"name":"aws","slug":"aws","count":16,"path":"api/categories/aws.json"}],"tags":[{"name":"AWS","slug":"AWS","count":18,"path":"api/tags/AWS.json"},{"name":"Kinesis","slug":"Kinesis","count":4,"path":"api/tags/Kinesis.json"},{"name":"Cloud","slug":"Cloud","count":1,"path":"api/tags/Cloud.json"}]}]}